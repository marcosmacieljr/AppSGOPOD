{"ast":null,"code":"import I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport getSceneIndicesForInterpolationInputRange from \"../../utils/getSceneIndicesForInterpolationInputRange\";\nvar EPS = 1e-5;\n\nfunction forInitial(props) {\n  var navigation = props.navigation,\n      scene = props.scene;\n  var focused = navigation.state.index === scene.index;\n  var opacity = focused ? 1 : 0;\n  var translate = focused ? 0 : 1000000;\n  return {\n    opacity: opacity,\n    transform: [{\n      translateX: translate\n    }, {\n      translateY: translate\n    }]\n  };\n}\n\nfunction forHorizontal(props) {\n  var layout = props.layout,\n      position = props.position,\n      scene = props.scene;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n\n  var interpolate = getSceneIndicesForInterpolationInputRange(props);\n  if (!interpolate) return {\n    opacity: 0\n  };\n  var first = interpolate.first,\n      last = interpolate.last;\n  var index = scene.index;\n  var width = layout.initWidth;\n  var translateX = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: I18nManager.isRTL ? [-width, 0, width * 0.3] : [width, 0, width * -0.3],\n    extrapolate: 'clamp'\n  });\n  var shadowOpacity = props.shadowEnabled ? position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: [0, 0.7, 0],\n    extrapolate: 'clamp'\n  }) : null;\n  var overlayOpacity = props.cardOverlayEnabled ? position.interpolate({\n    inputRange: [index, last - 0.5, last, last + EPS],\n    outputRange: [0, 0.07, 0.07, 0],\n    extrapolate: 'clamp'\n  }) : null;\n  return {\n    transform: [{\n      translateX: translateX\n    }],\n    overlayOpacity: overlayOpacity,\n    shadowOpacity: shadowOpacity\n  };\n}\n\nfunction forVertical(props) {\n  var layout = props.layout,\n      position = props.position,\n      scene = props.scene;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n\n  var interpolate = getSceneIndicesForInterpolationInputRange(props);\n  if (!interpolate) return {\n    opacity: 0\n  };\n  var first = interpolate.first,\n      last = interpolate.last;\n  var index = scene.index;\n  var height = layout.initHeight;\n  var translateY = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: [height, 0, 0],\n    extrapolate: 'clamp'\n  });\n  return {\n    transform: [{\n      translateY: translateY\n    }]\n  };\n}\n\nfunction forFadeFromBottomAndroid(props) {\n  var layout = props.layout,\n      position = props.position,\n      scene = props.scene;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n\n  var interpolate = getSceneIndicesForInterpolationInputRange(props);\n  if (!interpolate) return {\n    opacity: 0\n  };\n  var first = interpolate.first,\n      last = interpolate.last;\n  var index = scene.index;\n  var opacity = position.interpolate({\n    inputRange: [first, first + 0.5, first + 0.9, index, last - 1e-5, last],\n    outputRange: [0, 0.25, 0.7, 1, 1, 0],\n    extrapolate: 'clamp'\n  });\n  var height = layout.initHeight;\n  var maxTranslation = height * 0.08;\n  var translateY = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: [maxTranslation, 0, 0],\n    extrapolate: 'clamp'\n  });\n  return {\n    opacity: opacity,\n    transform: [{\n      translateY: translateY\n    }]\n  };\n}\n\nfunction forFadeToBottomAndroid(props) {\n  var layout = props.layout,\n      position = props.position,\n      scene = props.scene;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n\n  var interpolate = getSceneIndicesForInterpolationInputRange(props);\n  if (!interpolate) return {\n    opacity: 0\n  };\n  var first = interpolate.first,\n      last = interpolate.last;\n  var index = scene.index;\n  var inputRange = [first, index, last];\n  var opacity = position.interpolate({\n    inputRange: inputRange,\n    outputRange: [0, 1, 1],\n    extrapolate: 'clamp'\n  });\n  var height = layout.initHeight;\n  var maxTranslation = height * 0.08;\n  var translateY = position.interpolate({\n    inputRange: inputRange,\n    outputRange: [maxTranslation, 0, 0],\n    extrapolate: 'clamp'\n  });\n  return {\n    opacity: opacity,\n    transform: [{\n      translateY: translateY\n    }]\n  };\n}\n\nfunction forFade(props) {\n  var layout = props.layout,\n      position = props.position,\n      scene = props.scene;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n\n  var interpolate = getSceneIndicesForInterpolationInputRange(props);\n  if (!interpolate) return {\n    opacity: 0\n  };\n  var first = interpolate.first,\n      last = interpolate.last;\n  var index = scene.index;\n  var opacity = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: [0, 1, 1],\n    extrapolate: 'clamp'\n  });\n  return {\n    opacity: opacity\n  };\n}\n\nfunction forNoAnimation() {\n  return {};\n}\n\nexport default {\n  forHorizontal: forHorizontal,\n  forVertical: forVertical,\n  forFadeFromBottomAndroid: forFadeFromBottomAndroid,\n  forFadeToBottomAndroid: forFadeToBottomAndroid,\n  forFade: forFade,\n  forNoAnimation: forNoAnimation\n};","map":{"version":3,"mappings":"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","names":["getSceneIndicesForInterpolationInputRange","EPS","forInitial","props","navigation","scene","focused","state","index","opacity","translate","transform","translateX","translateY","forHorizontal","layout","position","isMeasured","interpolate","first","last","width","initWidth","inputRange","outputRange","I18nManager","isRTL","extrapolate","shadowOpacity","shadowEnabled","overlayOpacity","cardOverlayEnabled","forVertical","height","initHeight","forFadeFromBottomAndroid","maxTranslation","forFadeToBottomAndroid","forFade","forNoAnimation"],"sources":["StackViewStyleInterpolator.tsx"],"sourcesContent":["import { I18nManager } from 'react-native';\nimport getSceneIndicesForInterpolationInputRange from '../../utils/getSceneIndicesForInterpolationInputRange';\nimport { SceneInterpolatorProps } from '../../types';\n\nconst EPS = 1e-5;\n\n/**\n * Utility that builds the style for the card in the cards stack.\n *\n *     +------------+\n *   +-+            |\n * +-+ |            |\n * | | |            |\n * | | |  Focused   |\n * | | |   Card     |\n * | | |            |\n * +-+ |            |\n *   +-+            |\n *     +------------+\n */\n\n/**\n * Render the initial style when the initial layout isn't measured yet.\n */\nfunction forInitial(props: SceneInterpolatorProps) {\n  const { navigation, scene } = props;\n\n  const focused = navigation.state.index === scene.index;\n  const opacity = focused ? 1 : 0;\n  // If not focused, move the scene far away.\n  const translate = focused ? 0 : 1000000;\n  return {\n    opacity,\n    transform: [{ translateX: translate }, { translateY: translate }],\n  };\n}\n\n/**\n * Standard iOS-style slide in from the right.\n */\nfunction forHorizontal(props: SceneInterpolatorProps) {\n  const { layout, position, scene } = props;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n  const interpolate = getSceneIndicesForInterpolationInputRange(props);\n\n  if (!interpolate) return { opacity: 0 };\n\n  const { first, last } = interpolate;\n  const index = scene.index;\n\n  const width = layout.initWidth;\n  const translateX = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: I18nManager.isRTL\n      ? [-width, 0, width * 0.3]\n      : [width, 0, width * -0.3],\n    extrapolate: 'clamp',\n  });\n\n  const shadowOpacity = props.shadowEnabled\n    ? position.interpolate({\n        inputRange: [first, index, last],\n        outputRange: [0, 0.7, 0],\n        extrapolate: 'clamp',\n      })\n    : null;\n\n  let overlayOpacity = props.cardOverlayEnabled\n    ? position.interpolate({\n        inputRange: [index, last - 0.5, last, last + EPS],\n        outputRange: [0, 0.07, 0.07, 0],\n        extrapolate: 'clamp',\n      })\n    : null;\n\n  return {\n    transform: [{ translateX }],\n    overlayOpacity,\n    shadowOpacity,\n  };\n}\n\n/**\n * Standard iOS-style slide in from the bottom (used for modals).\n */\nfunction forVertical(props: SceneInterpolatorProps) {\n  const { layout, position, scene } = props;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n  const interpolate = getSceneIndicesForInterpolationInputRange(props);\n\n  if (!interpolate) return { opacity: 0 };\n\n  const { first, last } = interpolate;\n  const index = scene.index;\n  const height = layout.initHeight;\n  const translateY = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: [height, 0, 0],\n    extrapolate: 'clamp',\n  });\n\n  return {\n    transform: [{ translateY }],\n  };\n}\n\n/**\n * Standard Android-style fade in from the bottom.\n */\nfunction forFadeFromBottomAndroid(props: SceneInterpolatorProps) {\n  const { layout, position, scene } = props;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n  const interpolate = getSceneIndicesForInterpolationInputRange(props);\n\n  if (!interpolate) return { opacity: 0 };\n\n  const { first, last } = interpolate;\n  const index = scene.index;\n  const opacity = position.interpolate({\n    inputRange: [first, first + 0.5, first + 0.9, index, last - 1e-5, last],\n    outputRange: [0, 0.25, 0.7, 1, 1, 0],\n    extrapolate: 'clamp',\n  });\n\n  const height = layout.initHeight;\n  const maxTranslation = height * 0.08;\n  const translateY = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: [maxTranslation, 0, 0],\n    extrapolate: 'clamp',\n  });\n\n  return {\n    opacity,\n    transform: [{ translateY }],\n  };\n}\n\nfunction forFadeToBottomAndroid(props: SceneInterpolatorProps) {\n  const { layout, position, scene } = props;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n  const interpolate = getSceneIndicesForInterpolationInputRange(props);\n\n  if (!interpolate) return { opacity: 0 };\n\n  const { first, last } = interpolate;\n  const index = scene.index;\n  const inputRange = [first, index, last];\n\n  const opacity = position.interpolate({\n    inputRange,\n    outputRange: [0, 1, 1],\n    extrapolate: 'clamp',\n  });\n\n  const height = layout.initHeight;\n  const maxTranslation = height * 0.08;\n\n  const translateY = position.interpolate({\n    inputRange,\n    outputRange: [maxTranslation, 0, 0],\n    extrapolate: 'clamp',\n  });\n\n  return {\n    opacity,\n    transform: [{ translateY }],\n  };\n}\n\n/**\n *  fadeIn and fadeOut\n */\nfunction forFade(props: SceneInterpolatorProps) {\n  const { layout, position, scene } = props;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n  const interpolate = getSceneIndicesForInterpolationInputRange(props);\n\n  if (!interpolate) return { opacity: 0 };\n\n  const { first, last } = interpolate;\n  const index = scene.index;\n  const opacity = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: [0, 1, 1],\n    extrapolate: 'clamp',\n  });\n\n  return {\n    opacity,\n  };\n}\n\nfunction forNoAnimation() {\n  return {};\n}\n\nexport default {\n  forHorizontal,\n  forVertical,\n  forFadeFromBottomAndroid,\n  forFadeToBottomAndroid,\n  forFade,\n  forNoAnimation,\n};\n"]},"metadata":{},"sourceType":"module"}