{"ast":null,"code":"function getSceneIndicesForInterpolationInputRange(props) {\n  var scene = props.scene,\n      scenes = props.scenes;\n  var index = scene.index;\n  var lastSceneIndexInScenes = scenes.length - 1;\n  var isBack = !scenes[lastSceneIndexInScenes].isActive;\n\n  if (isBack) {\n    var currentSceneIndexInScenes = scenes.findIndex(function (item) {\n      return item === scene;\n    });\n    var targetSceneIndexInScenes = scenes.findIndex(function (item) {\n      return item.isActive;\n    });\n    var targetSceneIndex = scenes[targetSceneIndexInScenes].index;\n    var lastSceneIndex = scenes[lastSceneIndexInScenes].index;\n\n    if (index !== targetSceneIndex && currentSceneIndexInScenes === lastSceneIndexInScenes) {\n      return {\n        first: Math.min(targetSceneIndex, index - 1),\n        last: index + 1\n      };\n    } else if (index === targetSceneIndex && currentSceneIndexInScenes === targetSceneIndexInScenes) {\n      return {\n        first: index - 1,\n        last: Math.max(lastSceneIndex, index + 1)\n      };\n    } else if (index === targetSceneIndex || currentSceneIndexInScenes > targetSceneIndexInScenes) {\n      return null;\n    } else {\n      return {\n        first: index - 1,\n        last: index + 1\n      };\n    }\n  } else {\n    return {\n      first: index - 1,\n      last: index + 1\n    };\n  }\n}\n\nexport default getSceneIndicesForInterpolationInputRange;","map":{"version":3,"mappings":"AAOA,SAASA,yCAAT,CAAmDC,KAAnD,EAAiE;AAAA,MACvDC,KADuD,GACrCD,KADqC,CACvDC,KADuD;AAAA,MAChDC,MADgD,GACrCF,KADqC,CAChDE,MADgD;AAE/D,MAAMC,KAAK,GAAGF,KAAK,CAACE,KAApB;AACA,MAAMC,sBAAsB,GAAGF,MAAM,CAACG,MAAPH,GAAgB,CAA/C;AACA,MAAMI,MAAM,GAAG,CAACJ,MAAM,CAACE,sBAAD,CAANF,CAA+BK,QAA/C;;AAEA,MAAID,MAAJ,EAAY;AACV,QAAME,yBAAyB,GAAGN,MAAM,CAACO,SAAPP,CAAiB,gBAAI;AAAA,aAAIQ,IAAI,KAAKT,KAAb;AAArB,MAAlC;AACA,QAAMU,wBAAwB,GAAGT,MAAM,CAACO,SAAPP,CAAiB,gBAAI;AAAA,aAAIQ,IAAI,CAACH,QAAT;AAArB,MAAjC;AACA,QAAMK,gBAAgB,GAAGV,MAAM,CAACS,wBAAD,CAANT,CAAiCC,KAA1D;AACA,QAAMU,cAAc,GAAGX,MAAM,CAACE,sBAAD,CAANF,CAA+BC,KAAtD;;AAEA,QACEA,KAAK,KAAKS,gBAAVT,IACAK,yBAAyB,KAAKJ,sBAFhC,EAGE;AACA,aAAO;AACLU,aAAK,EAAEC,IAAI,CAACC,GAALD,CAASH,gBAATG,EAA2BZ,KAAK,GAAG,CAAnCY,CADF;AAELE,YAAI,EAAEd,KAAK,GAAG;AAFT,OAAP;AAJF,WAQO,IACLA,KAAK,KAAKS,gBAAVT,IACAK,yBAAyB,KAAKG,wBAFzB,EAGL;AACA,aAAO;AACLG,aAAK,EAAEX,KAAK,GAAG,CADV;AAELc,YAAI,EAAEF,IAAI,CAACG,GAALH,CAASF,cAATE,EAAyBZ,KAAK,GAAG,CAAjCY;AAFD,OAAP;AAJK,WAQA,IACLZ,KAAK,KAAKS,gBAAVT,IACAK,yBAAyB,GAAGG,wBAFvB,EAGL;AACA,aAAO,IAAP;AAJK,WAKA;AACL,aAAO;AAAEG,aAAK,EAAEX,KAAK,GAAG,CAAjB;AAAoBc,YAAI,EAAEd,KAAK,GAAG;AAAlC,OAAP;AAEH;AA9BD,SA8BO;AACL,WAAO;AAAEW,WAAK,EAAEX,KAAK,GAAG,CAAjB;AAAoBc,UAAI,EAAEd,KAAK,GAAG;AAAlC,KAAP;AAEH;AAED;;AAAA,eAAeJ,yCAAf","names":["getSceneIndicesForInterpolationInputRange","props","scene","scenes","index","lastSceneIndexInScenes","length","isBack","isActive","currentSceneIndexInScenes","findIndex","item","targetSceneIndexInScenes","targetSceneIndex","lastSceneIndex","first","Math","min","last","max"],"sources":["getSceneIndicesForInterpolationInputRange.tsx"],"sourcesContent":["import { Scene } from '../types';\n\ntype Props = {\n  scene: Scene;\n  scenes: Scene[];\n};\n\nfunction getSceneIndicesForInterpolationInputRange(props: Props) {\n  const { scene, scenes } = props;\n  const index = scene.index;\n  const lastSceneIndexInScenes = scenes.length - 1;\n  const isBack = !scenes[lastSceneIndexInScenes].isActive;\n\n  if (isBack) {\n    const currentSceneIndexInScenes = scenes.findIndex(item => item === scene);\n    const targetSceneIndexInScenes = scenes.findIndex(item => item.isActive);\n    const targetSceneIndex = scenes[targetSceneIndexInScenes].index;\n    const lastSceneIndex = scenes[lastSceneIndexInScenes].index;\n\n    if (\n      index !== targetSceneIndex &&\n      currentSceneIndexInScenes === lastSceneIndexInScenes\n    ) {\n      return {\n        first: Math.min(targetSceneIndex, index - 1),\n        last: index + 1,\n      };\n    } else if (\n      index === targetSceneIndex &&\n      currentSceneIndexInScenes === targetSceneIndexInScenes\n    ) {\n      return {\n        first: index - 1,\n        last: Math.max(lastSceneIndex, index + 1),\n      };\n    } else if (\n      index === targetSceneIndex ||\n      currentSceneIndexInScenes > targetSceneIndexInScenes\n    ) {\n      return null;\n    } else {\n      return { first: index - 1, last: index + 1 };\n    }\n  } else {\n    return { first: index - 1, last: index + 1 };\n  }\n}\n\nexport default getSceneIndicesForInterpolationInputRange;\n"]},"metadata":{},"sourceType":"module"}