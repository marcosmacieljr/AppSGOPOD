{"ast":null,"code":"var validateFormat = function validateFormat() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nexport default function invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1;\n    throw error;\n  }\n}","map":{"version":3,"mappings":"AAWA,IAAIA,cAAc,GAAG,0BAAY,CAAjC;;AAEA,IAAIC,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,YAA7B,EAA2C;AACzCD,gBAAc,GAAG,wBAAUI,MAAV,EAAkB;AACjC,QAAIA,MAAM,KAAKC,SAAf,EAA0B;AACxB,YAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;AAHH;AAKD;;AAED,eAAe,SAASC,SAAT,CAAmBC,SAAnB,EAA8BJ,MAA9B,EAAsCK,CAAtC,EAAyCC,CAAzC,EAA4CC,CAA5C,EAA+CC,CAA/C,EAAkDC,CAAlD,EAAqDC,CAArD,EAAwD;AACrEd,gBAAc,CAACI,MAAD,CAAdJ;;AAEA,MAAI,CAACQ,SAAL,EAAgB;AACd,QAAIO,KAAJ;;AACA,QAAIX,MAAM,KAAKC,SAAf,EAA0B;AACxBU,WAAK,GAAG,IAAIT,KAAJ,CACN,+HADM,CAARS;AADF,WAIO;AACL,UAAIC,IAAI,GAAG,CAACP,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,CAAX;AACA,UAAIG,QAAQ,GAAG,CAAf;AACAF,WAAK,GAAG,IAAIT,KAAJ,CACNF,MAAM,CAACc,OAAPd,CAAe,KAAfA,EAAsB,YAAY;AAChC,eAAOY,IAAI,CAACC,QAAQ,EAAT,CAAX;AADF,QADM,CAARF;AAKAA,WAAK,CAACI,IAANJ,GAAa,qBAAbA;AACD;;AAEDA,SAAK,CAACK,WAANL,GAAoB,CAApBA;AACA,UAAMA,KAAN;AACD;AACF","names":["validateFormat","process","env","NODE_ENV","format","undefined","Error","invariant","condition","a","b","c","d","e","f","error","args","argIndex","replace","name","framesToPop"],"sources":["invariant.js"],"sourcesContent":["/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function () {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function (format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nexport default function invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function () {\n          return args[argIndex++];\n        })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}