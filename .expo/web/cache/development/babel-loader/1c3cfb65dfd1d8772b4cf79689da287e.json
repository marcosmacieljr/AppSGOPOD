{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-stack/src/views/Header/ModularHeaderBackButton.tsx\";\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableItem from \"../TouchableItem\";\nimport defaultBackImage from \"../assets/back-icon.png\";\n\nvar ModularHeaderBackButton = function (_React$PureComponent) {\n  _inherits(ModularHeaderBackButton, _React$PureComponent);\n\n  function ModularHeaderBackButton() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ModularHeaderBackButton);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ModularHeaderBackButton)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {};\n\n    _this.onTextLayout = function (e) {\n      if (_this.state.initialTextWidth) {\n        return;\n      }\n\n      _this.setState({\n        initialTextWidth: e.nativeEvent.layout.x + e.nativeEvent.layout.width\n      });\n    };\n\n    _this.getTitleText = function () {\n      var _this$props = _this.props,\n          width = _this$props.width,\n          title = _this$props.title,\n          truncatedTitle = _this$props.truncatedTitle;\n      var initialTextWidth = _this.state.initialTextWidth;\n\n      if (title === null) {\n        return null;\n      } else if (!title) {\n        return truncatedTitle;\n      } else if (initialTextWidth && width && initialTextWidth > width) {\n        return truncatedTitle;\n      } else {\n        return title.length > 8 ? truncatedTitle : title;\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(ModularHeaderBackButton, [{\n    key: \"renderBackImage\",\n    value: function renderBackImage() {\n      var _this$props2 = this.props,\n          backImage = _this$props2.backImage,\n          backTitleVisible = _this$props2.backTitleVisible,\n          tintColor = _this$props2.tintColor;\n\n      if (React.isValidElement(backImage)) {\n        return backImage;\n      } else if (backImage) {\n        return backImage({\n          tintColor: tintColor\n        });\n      } else {\n        return React.createElement(Image, {\n          style: [styles.icon, !!backTitleVisible && styles.iconWithTitle, !!tintColor && {\n            tintColor: tintColor\n          }],\n          source: defaultBackImage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          }\n        });\n      }\n    }\n  }, {\n    key: \"maybeRenderTitle\",\n    value: function maybeRenderTitle() {\n      var _this$props3 = this.props,\n          backTitleVisible = _this$props3.backTitleVisible,\n          titleStyle = _this$props3.titleStyle,\n          tintColor = _this$props3.tintColor;\n      var backTitleText = this.getTitleText();\n\n      if (!backTitleVisible || backTitleText === null) {\n        return null;\n      }\n\n      var LabelContainerComponent = this.props.LabelContainerComponent;\n      return React.createElement(LabelContainerComponent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        }\n      }, React.createElement(Text, {\n        accessible: false,\n        onLayout: this.onTextLayout,\n        style: [styles.title, !!tintColor && {\n          color: tintColor\n        }, titleStyle],\n        numberOfLines: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        }\n      }, this.getTitleText()));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          onPress = _this$props4.onPress,\n          title = _this$props4.title;\n      var ButtonContainerComponent = this.props.ButtonContainerComponent;\n      return React.createElement(TouchableItem, {\n        accessibilityComponentType: \"button\",\n        accessibilityLabel: title ? title + \", back\" : 'Go back',\n        accessibilityTraits: \"button\",\n        testID: \"header-back\",\n        delayPressIn: 0,\n        onPress: onPress,\n        style: styles.container,\n        borderless: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        }\n      }, React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        }\n      }, React.createElement(ButtonContainerComponent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        }\n      }, this.renderBackImage()), this.maybeRenderTitle()));\n    }\n  }]);\n\n  return ModularHeaderBackButton;\n}(React.PureComponent);\n\nModularHeaderBackButton.defaultProps = {\n  tintColor: '#037aff',\n  truncatedTitle: 'Back'\n};\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    backgroundColor: 'transparent',\n    marginBottom: 1,\n    overflow: 'visible'\n  },\n  title: {\n    fontSize: 17,\n    paddingRight: 10\n  },\n  icon: {\n    height: 21,\n    width: 12,\n    marginLeft: 9,\n    marginRight: 22,\n    marginVertical: 12,\n    resizeMode: 'contain',\n    transform: [{\n      scaleX: I18nManager.isRTL ? -1 : 1\n    }]\n  },\n  iconWithTitle: {\n    marginRight: 3\n  }\n});\nexport default ModularHeaderBackButton;","map":{"version":3,"mappings":"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","names":["React","TouchableItem","defaultBackImage","ModularHeaderBackButton","state","onTextLayout","e","_this","initialTextWidth","setState","nativeEvent","layout","x","width","getTitleText","props","title","truncatedTitle","length","backImage","backTitleVisible","tintColor","isValidElement","Image","style","styles","icon","iconWithTitle","source","__source","fileName","lineNumber","titleStyle","backTitleText","LabelContainerComponent","Text","accessible","onLayout","color","numberOfLines","onPress","ButtonContainerComponent","accessibilityComponentType","accessibilityLabel","accessibilityTraits","testID","delayPressIn","container","borderless","View","renderBackImage","maybeRenderTitle","PureComponent","defaultProps","StyleSheet","create","alignItems","flexDirection","backgroundColor","marginBottom","overflow","fontSize","paddingRight","height","marginLeft","marginRight","marginVertical","resizeMode","transform","scaleX","I18nManager","isRTL"],"sources":["ModularHeaderBackButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  I18nManager,\n  Image,\n  Text,\n  View,\n  StyleSheet,\n  LayoutChangeEvent,\n} from 'react-native';\n\nimport TouchableItem from '../TouchableItem';\n\nimport defaultBackImage from '../assets/back-icon.png';\nimport { HeaderBackButtonProps } from '../../types';\n\ntype Props = HeaderBackButtonProps & {\n  LabelContainerComponent: React.ComponentType;\n  ButtonContainerComponent: React.ComponentType;\n};\n\ntype State = {\n  initialTextWidth?: number;\n};\n\nclass ModularHeaderBackButton extends React.PureComponent<Props, State> {\n  static defaultProps = {\n    tintColor: '#037aff',\n    truncatedTitle: 'Back',\n  };\n\n  state: State = {};\n\n  private onTextLayout = (e: LayoutChangeEvent) => {\n    if (this.state.initialTextWidth) {\n      return;\n    }\n    this.setState({\n      initialTextWidth: e.nativeEvent.layout.x + e.nativeEvent.layout.width,\n    });\n  };\n\n  private renderBackImage() {\n    const { backImage, backTitleVisible, tintColor } = this.props;\n\n    if (React.isValidElement(backImage)) {\n      return backImage;\n    } else if (backImage) {\n      return backImage({ tintColor });\n    } else {\n      return (\n        <Image\n          style={[\n            styles.icon,\n            !!backTitleVisible && styles.iconWithTitle,\n            !!tintColor && { tintColor },\n          ]}\n          source={defaultBackImage}\n        />\n      );\n    }\n  }\n\n  private getTitleText = () => {\n    const { width, title, truncatedTitle } = this.props;\n\n    let { initialTextWidth } = this.state;\n\n    if (title === null) {\n      return null;\n    } else if (!title) {\n      return truncatedTitle;\n    } else if (initialTextWidth && width && initialTextWidth > width) {\n      return truncatedTitle;\n    } else {\n      return title.length > 8 ? truncatedTitle : title;\n    }\n  };\n\n  private maybeRenderTitle() {\n    const { backTitleVisible, titleStyle, tintColor } = this.props;\n    let backTitleText = this.getTitleText();\n\n    if (!backTitleVisible || backTitleText === null) {\n      return null;\n    }\n\n    const { LabelContainerComponent } = this.props;\n\n    return (\n      <LabelContainerComponent>\n        <Text\n          accessible={false}\n          onLayout={this.onTextLayout}\n          style={[\n            styles.title,\n            !!tintColor && { color: tintColor },\n            titleStyle,\n          ]}\n          numberOfLines={1}\n        >\n          {this.getTitleText()}\n        </Text>\n      </LabelContainerComponent>\n    );\n  }\n\n  render() {\n    const { onPress, title } = this.props;\n    const { ButtonContainerComponent } = this.props;\n\n    return (\n      <TouchableItem\n        accessibilityComponentType=\"button\"\n        accessibilityLabel={title ? `${title}, back` : 'Go back'}\n        accessibilityTraits=\"button\"\n        testID=\"header-back\"\n        delayPressIn={0}\n        onPress={onPress}\n        style={styles.container}\n        borderless\n      >\n        <View style={styles.container}>\n          <ButtonContainerComponent>\n            {this.renderBackImage()}\n          </ButtonContainerComponent>\n          {this.maybeRenderTitle()}\n        </View>\n      </TouchableItem>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    backgroundColor: 'transparent',\n    marginBottom: 1,\n    overflow: 'visible',\n  },\n  title: {\n    fontSize: 17,\n    paddingRight: 10,\n  },\n  icon: {\n    height: 21,\n    width: 12,\n    marginLeft: 9,\n    marginRight: 22,\n    marginVertical: 12,\n    resizeMode: 'contain',\n    transform: [{ scaleX: I18nManager.isRTL ? -1 : 1 }],\n  },\n  iconWithTitle: {\n    marginRight: 3,\n  },\n});\n\nexport default ModularHeaderBackButton;\n"]},"metadata":{},"sourceType":"module"}