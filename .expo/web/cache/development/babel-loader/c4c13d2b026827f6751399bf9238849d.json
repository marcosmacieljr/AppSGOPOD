{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as NavigationActions from \"../NavigationActions\";\nimport * as StackActions from \"./StackActions\";\nimport createConfigGetter from \"./createConfigGetter\";\nimport getScreenForRouteName from \"./getScreenForRouteName\";\nimport StateUtils from \"../StateUtils\";\nimport validateRouteConfigMap from \"./validateRouteConfigMap\";\nimport invariant from \"../utils/invariant\";\nimport { generateKey } from \"./KeyGenerator\";\nimport { createPathParser } from \"./pathUtils\";\n\nfunction behavesLikePushAction(action) {\n  return action.type === NavigationActions.NAVIGATE || action.type === StackActions.PUSH;\n}\n\nvar defaultActionCreators = function defaultActionCreators() {\n  return {};\n};\n\nfunction isResetToRootStack(action) {\n  return action.type === StackActions.RESET && action.key === null;\n}\n\nexport default (function (routeConfigs) {\n  var stackConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  validateRouteConfigMap(routeConfigs);\n  var childRouters = {};\n  var routeNames = Object.keys(routeConfigs);\n  routeNames.forEach(function (routeName) {\n    var routeConfig = routeConfigs[routeName];\n    var screen = routeConfig && routeConfig.screen ? routeConfig.screen : routeConfig;\n\n    if (screen && screen.router) {\n      childRouters[routeName] = screen.router;\n    } else {\n      childRouters[routeName] = null;\n    }\n  });\n  var initialRouteParams = stackConfig.initialRouteParams;\n  var getCustomActionCreators = stackConfig.getCustomActionCreators || defaultActionCreators;\n  var initialRouteName = stackConfig.initialRouteName || routeNames[0];\n  var initialChildRouter = childRouters[initialRouteName];\n\n  function getInitialState(action) {\n    var route = {};\n    var childRouter = childRouters[action.routeName];\n\n    if (behavesLikePushAction(action) && childRouter !== undefined) {\n      var childState = {};\n\n      if (childRouter !== null) {\n        var childAction = action.action || NavigationActions.init({\n          params: action.params\n        });\n        childState = childRouter.getStateForAction(childAction);\n      }\n\n      return {\n        key: 'StackRouterRoot',\n        isTransitioning: false,\n        index: 0,\n        routes: [_objectSpread(_objectSpread({\n          params: action.params\n        }, childState), {}, {\n          key: action.key || generateKey(),\n          routeName: action.routeName\n        })]\n      };\n    }\n\n    if (initialChildRouter) {\n      route = initialChildRouter.getStateForAction(NavigationActions.navigate({\n        routeName: initialRouteName,\n        params: initialRouteParams\n      }));\n    }\n\n    var params = (routeConfigs[initialRouteName].params || route.params || action.params || initialRouteParams) && _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, routeConfigs[initialRouteName].params || {}), route.params || {}), action.params || {}), initialRouteParams || {});\n\n    var initialRouteKey = stackConfig.initialRouteKey;\n    route = _objectSpread(_objectSpread(_objectSpread({}, route), params ? {\n      params: params\n    } : {}), {}, {\n      routeName: initialRouteName,\n      key: action.key || initialRouteKey || generateKey()\n    });\n    return {\n      key: 'StackRouterRoot',\n      isTransitioning: false,\n      index: 0,\n      routes: [route]\n    };\n  }\n\n  function getParamsForRouteAndAction(routeName, action) {\n    var routeConfig = routeConfigs[routeName];\n\n    if (routeConfig && routeConfig.params) {\n      return _objectSpread(_objectSpread({}, routeConfig.params), action.params);\n    } else {\n      return action.params;\n    }\n  }\n\n  var _createPathParser = createPathParser(childRouters, routeConfigs, stackConfig),\n      getPathAndParamsForRoute = _createPathParser.getPathAndParamsForRoute,\n      _getActionForPathAndParams = _createPathParser.getActionForPathAndParams;\n\n  return {\n    childRouters: childRouters,\n    getComponentForState: function getComponentForState(state) {\n      var activeChildRoute = state.routes[state.index];\n      var routeName = activeChildRoute.routeName;\n\n      if (childRouters[routeName]) {\n        return childRouters[routeName].getComponentForState(activeChildRoute);\n      }\n\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n    getComponentForRouteName: function getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n    getActionCreators: function getActionCreators(route, navStateKey) {\n      return _objectSpread(_objectSpread({}, getCustomActionCreators(route, navStateKey)), {}, {\n        pop: function pop(n, params) {\n          return StackActions.pop(_objectSpread({\n            n: n\n          }, params));\n        },\n        popToTop: function popToTop(params) {\n          return StackActions.popToTop(params);\n        },\n        push: function push(routeName, params, action) {\n          return StackActions.push({\n            routeName: routeName,\n            params: params,\n            action: action\n          });\n        },\n        replace: function replace(replaceWith, params, action, newKey) {\n          if (typeof replaceWith === 'string') {\n            return StackActions.replace({\n              routeName: replaceWith,\n              params: params,\n              action: action,\n              key: route.key,\n              newKey: newKey\n            });\n          }\n\n          invariant(typeof replaceWith === 'object', 'Must replaceWith an object or a string');\n          invariant(params == null, 'Params must not be provided to .replace() when specifying an object');\n          invariant(action == null, 'Child action must not be provided to .replace() when specifying an object');\n          invariant(newKey == null, 'Child action must not be provided to .replace() when specifying an object');\n          return StackActions.replace(replaceWith);\n        },\n        reset: function reset(actions, index) {\n          return StackActions.reset({\n            actions: actions,\n            index: index == null ? actions.length - 1 : index,\n            key: navStateKey\n          });\n        },\n        dismiss: function dismiss() {\n          return NavigationActions.back({\n            key: navStateKey\n          });\n        }\n      });\n    },\n    getStateForAction: function getStateForAction(action, state) {\n      if (!state) {\n        return getInitialState(action);\n      }\n\n      var activeChildRoute = state.routes[state.index];\n\n      if (!isResetToRootStack(action) && action.type !== NavigationActions.NAVIGATE) {\n        var activeChildRouter = childRouters[activeChildRoute.routeName];\n\n        if (activeChildRouter) {\n          var route = activeChildRouter.getStateForAction(action, activeChildRoute);\n\n          if (route !== null && route !== activeChildRoute) {\n            return StateUtils.replaceAt(state, activeChildRoute.key, route, action.type === NavigationActions.SET_PARAMS);\n          }\n        }\n      } else if (action.type === NavigationActions.NAVIGATE) {\n        for (var _iterator = _createForOfIteratorHelperLoose(state.routes.slice().reverse()), _step; !(_step = _iterator()).done;) {\n          var childRoute = _step.value;\n          var childRouter = childRouters[childRoute.routeName];\n          var childAction = action.routeName === childRoute.routeName && action.action ? action.action : action;\n\n          if (childRouter) {\n            var nextRouteState = childRouter.getStateForAction(childAction, childRoute);\n\n            if (nextRouteState === null || nextRouteState !== childRoute) {\n              var newState = StateUtils.replaceAndPrune(state, nextRouteState ? nextRouteState.key : childRoute.key, nextRouteState ? nextRouteState : childRoute);\n              return _objectSpread(_objectSpread({}, newState), {}, {\n                isTransitioning: state.index !== newState.index ? action.immediate !== true : state.isTransitioning\n              });\n            }\n          }\n        }\n      }\n\n      if (behavesLikePushAction(action) && childRouters[action.routeName] !== undefined) {\n        var _childRouter = childRouters[action.routeName];\n\n        var _route;\n\n        invariant(action.type !== StackActions.PUSH || action.key == null, 'StackRouter does not support key on the push action');\n        var lastRouteIndex = state.routes.findIndex(function (r) {\n          if (action.key) {\n            return r.key === action.key;\n          } else {\n            return r.routeName === action.routeName;\n          }\n        });\n\n        if (action.type !== StackActions.PUSH && lastRouteIndex !== -1) {\n          if (state.index === lastRouteIndex && !action.params) {\n            return null;\n          }\n\n          var routes = state.routes.slice(0, lastRouteIndex + 1);\n\n          if (action.params) {\n            var _route2 = state.routes[lastRouteIndex];\n            routes[lastRouteIndex] = _objectSpread(_objectSpread({}, _route2), {}, {\n              params: _objectSpread(_objectSpread({}, _route2.params), action.params)\n            });\n          }\n\n          return _objectSpread(_objectSpread({}, state), {}, {\n            isTransitioning: state.index !== lastRouteIndex ? action.immediate !== true : state.isTransitioning,\n            index: lastRouteIndex,\n            routes: routes\n          });\n        }\n\n        if (_childRouter) {\n          var _childAction = action.action || NavigationActions.init({\n            params: getParamsForRouteAndAction(action.routeName, action)\n          });\n\n          _route = _objectSpread(_objectSpread({\n            params: getParamsForRouteAndAction(action.routeName, action)\n          }, _childRouter.getStateForAction(_childAction)), {}, {\n            routeName: action.routeName,\n            key: action.key || generateKey()\n          });\n        } else {\n          _route = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            routeName: action.routeName,\n            key: action.key || generateKey()\n          };\n        }\n\n        return _objectSpread(_objectSpread({}, StateUtils.push(state, _route)), {}, {\n          isTransitioning: action.immediate !== true\n        });\n      } else if (action.type === StackActions.PUSH && childRouters[action.routeName] === undefined) {\n        return state;\n      }\n\n      if (behavesLikePushAction(action)) {\n        var childRouterNames = Object.keys(childRouters);\n\n        for (var i = 0; i < childRouterNames.length; i++) {\n          var childRouterName = childRouterNames[i];\n          var _childRouter2 = childRouters[childRouterName];\n\n          if (_childRouter2) {\n            var initChildRoute = _childRouter2.getStateForAction(NavigationActions.init());\n\n            var navigatedChildRoute = _childRouter2.getStateForAction(action, initChildRoute);\n\n            var routeToPush = null;\n\n            if (navigatedChildRoute === null) {\n              routeToPush = initChildRoute;\n            } else if (navigatedChildRoute !== initChildRoute) {\n              routeToPush = navigatedChildRoute;\n            }\n\n            if (routeToPush) {\n              var _route3 = _objectSpread(_objectSpread({}, routeToPush), {}, {\n                routeName: childRouterName,\n                key: action.key || generateKey()\n              });\n\n              return _objectSpread(_objectSpread({}, StateUtils.push(state, _route3)), {}, {\n                isTransitioning: action.immediate !== true\n              });\n            }\n          }\n        }\n      }\n\n      if (action.type === StackActions.POP_TO_TOP) {\n        if (action.key && state.key !== action.key) {\n          return state;\n        }\n\n        if (state.index > 0) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            isTransitioning: action.immediate !== true,\n            index: 0,\n            routes: [state.routes[0]]\n          });\n        }\n\n        return state;\n      }\n\n      if (action.type === StackActions.REPLACE) {\n        var routeIndex;\n\n        if (action.key === undefined && state.routes.length) {\n          routeIndex = state.routes.length - 1;\n        } else {\n          routeIndex = state.routes.findIndex(function (r) {\n            return r.key === action.key;\n          });\n        }\n\n        if (routeIndex !== -1) {\n          var _childRouter3 = childRouters[action.routeName];\n          var childState = {};\n\n          if (_childRouter3) {\n            var _childAction2 = action.action || NavigationActions.init({\n              params: getParamsForRouteAndAction(action.routeName, action)\n            });\n\n            childState = _childRouter3.getStateForAction(_childAction2);\n          }\n\n          var _routes = _toConsumableArray(state.routes);\n\n          _routes[routeIndex] = _objectSpread(_objectSpread({\n            params: getParamsForRouteAndAction(action.routeName, action)\n          }, childState), {}, {\n            routeName: action.routeName,\n            key: action.newKey || generateKey()\n          });\n          return _objectSpread(_objectSpread({}, state), {}, {\n            routes: _routes\n          });\n        }\n      }\n\n      if (action.type === StackActions.COMPLETE_TRANSITION && (action.key == null || action.key === state.key) && action.toChildKey === state.routes[state.index].key && state.isTransitioning) {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isTransitioning: false\n        });\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        var key = action.key;\n        var lastRoute = state.routes.find(function (route) {\n          return route.key === key;\n        });\n\n        if (lastRoute) {\n          var params = _objectSpread(_objectSpread({}, lastRoute.params), action.params);\n\n          var _routes2 = _toConsumableArray(state.routes);\n\n          _routes2[state.routes.indexOf(lastRoute)] = _objectSpread(_objectSpread({}, lastRoute), {}, {\n            params: params\n          });\n          return _objectSpread(_objectSpread({}, state), {}, {\n            routes: _routes2\n          });\n        }\n      }\n\n      if (action.type === StackActions.RESET) {\n        if (action.key != null && action.key !== state.key) {\n          return state;\n        }\n\n        var newStackActions = action.actions;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          routes: newStackActions.map(function (newStackAction) {\n            var router = childRouters[newStackAction.routeName];\n            var childState = {};\n\n            if (router) {\n              var _childAction3 = newStackAction.action || NavigationActions.init({\n                params: getParamsForRouteAndAction(newStackAction.routeName, newStackAction)\n              });\n\n              childState = router.getStateForAction(_childAction3);\n            }\n\n            return _objectSpread(_objectSpread({\n              params: getParamsForRouteAndAction(newStackAction.routeName, newStackAction)\n            }, childState), {}, {\n              routeName: newStackAction.routeName,\n              key: newStackAction.key || generateKey()\n            });\n          }),\n          index: action.index\n        });\n      }\n\n      if (action.type === NavigationActions.BACK || action.type === StackActions.POP) {\n        var _key = action.key,\n            n = action.n,\n            immediate = action.immediate,\n            prune = action.prune;\n\n        if (action.type === StackActions.POP && prune === false && _key) {\n          var index = state.routes.findIndex(function (r) {\n            return r.key === _key;\n          });\n\n          if (index > 0) {\n            var count = Math.max(index - (n !== null && n !== void 0 ? n : 1) + 1, 1);\n\n            var _routes3 = state.routes.slice(0, count).concat(state.routes.slice(index + 1));\n\n            if (_routes3.length) {\n              return _objectSpread(_objectSpread({}, state), {}, {\n                routes: _routes3,\n                index: _routes3.length - 1,\n                isTransitioning: immediate !== true\n              });\n            }\n          }\n        } else {\n          var backRouteIndex = state.index;\n\n          if (action.type === StackActions.POP && n != null) {\n            backRouteIndex = Math.max(1, state.index - n + 1);\n          } else if (_key) {\n            var backRoute = state.routes.find(function (route) {\n              return route.key === _key;\n            });\n            backRouteIndex = state.routes.indexOf(backRoute);\n          }\n\n          if (backRouteIndex > 0) {\n            return _objectSpread(_objectSpread({}, state), {}, {\n              routes: state.routes.slice(0, backRouteIndex),\n              index: backRouteIndex - 1,\n              isTransitioning: immediate !== true\n            });\n          }\n        }\n      }\n\n      var keyIndex = action.key ? StateUtils.indexOf(state, action.key) : -1;\n\n      for (var _iterator2 = _createForOfIteratorHelperLoose(state.routes.slice().reverse()), _step2; !(_step2 = _iterator2()).done;) {\n        var _childRoute = _step2.value;\n\n        if (_childRoute.key === activeChildRoute.key) {\n          continue;\n        }\n\n        if (keyIndex >= 0 && _childRoute.key !== action.key) {\n          continue;\n        }\n\n        var _childRouter4 = childRouters[_childRoute.routeName];\n\n        if (_childRouter4) {\n          var _route4 = _childRouter4.getStateForAction(action, _childRoute);\n\n          if (_route4 === null) {\n            return state;\n          } else if (_route4 && _route4 !== _childRoute) {\n            return StateUtils.replaceAt(state, _childRoute.key, _route4, action.preserveFocus || action.type.includes('DRAWER'));\n          }\n        }\n      }\n\n      return state;\n    },\n    getPathAndParamsForState: function getPathAndParamsForState(state) {\n      var route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n    getActionForPathAndParams: function getActionForPathAndParams(path, params) {\n      return _getActionForPathAndParams(path, params);\n    },\n    getScreenOptions: createConfigGetter(routeConfigs, stackConfig.defaultNavigationOptions)\n  };\n});","map":{"version":3,"mappings":"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","names":["NavigationActions","StackActions","createConfigGetter","getScreenForRouteName","StateUtils","validateRouteConfigMap","invariant","generateKey","createPathParser","behavesLikePushAction","action","type","NAVIGATE","PUSH","defaultActionCreators","isResetToRootStack","RESET","key","routeConfigs","stackConfig","childRouters","routeNames","Object","keys","forEach","routeName","routeConfig","screen","router","initialRouteParams","getCustomActionCreators","initialRouteName","initialChildRouter","getInitialState","route","childRouter","undefined","childState","childAction","init","params","getStateForAction","isTransitioning","index","routes","navigate","initialRouteKey","getParamsForRouteAndAction","getPathAndParamsForRoute","getActionForPathAndParams","getComponentForState","state","activeChildRoute","getComponentForRouteName","getActionCreators","navStateKey","pop","n","popToTop","push","replace","replaceWith","newKey","reset","actions","length","dismiss","back","activeChildRouter","replaceAt","SET_PARAMS","slice","reverse","childRoute","nextRouteState","newState","replaceAndPrune","immediate","lastRouteIndex","findIndex","r","childRouterNames","i","childRouterName","initChildRoute","navigatedChildRoute","routeToPush","POP_TO_TOP","REPLACE","routeIndex","COMPLETE_TRANSITION","toChildKey","lastRoute","find","indexOf","newStackActions","map","newStackAction","BACK","POP","prune","count","Math","max","concat","backRouteIndex","backRoute","keyIndex","preserveFocus","includes","getPathAndParamsForState","path","getScreenOptions","defaultNavigationOptions"],"sources":["StackRouter.js"],"sourcesContent":["import * as NavigationActions from '../NavigationActions';\nimport * as StackActions from './StackActions';\nimport createConfigGetter from './createConfigGetter';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport StateUtils from '../StateUtils';\nimport validateRouteConfigMap from './validateRouteConfigMap';\nimport invariant from '../utils/invariant';\nimport { generateKey } from './KeyGenerator';\nimport { createPathParser } from './pathUtils';\n\nfunction behavesLikePushAction(action) {\n  return (\n    action.type === NavigationActions.NAVIGATE ||\n    action.type === StackActions.PUSH\n  );\n}\n\nconst defaultActionCreators = () => ({});\n\nfunction isResetToRootStack(action) {\n  return action.type === StackActions.RESET && action.key === null;\n}\n\nexport default (routeConfigs, stackConfig = {}) => {\n  // Fail fast on invalid route definitions\n  validateRouteConfigMap(routeConfigs);\n\n  const childRouters = {};\n  const routeNames = Object.keys(routeConfigs);\n\n  // Loop through routes and find child routers\n  routeNames.forEach((routeName) => {\n    // We're not using `getScreenForRouteName` here to preserve the lazy loading\n    // behaviour of routes. This means that routes with child routers must be\n    // defined using a component directly or with an object with a screen prop.\n    const routeConfig = routeConfigs[routeName];\n    const screen =\n      routeConfig && routeConfig.screen ? routeConfig.screen : routeConfig;\n    if (screen && screen.router) {\n      // If it has a router it's a navigator.\n      childRouters[routeName] = screen.router;\n    } else {\n      // If it doesn't have router it's an ordinary React component.\n      childRouters[routeName] = null;\n    }\n  });\n\n  const { initialRouteParams } = stackConfig;\n  const getCustomActionCreators =\n    stackConfig.getCustomActionCreators || defaultActionCreators;\n\n  const initialRouteName = stackConfig.initialRouteName || routeNames[0];\n\n  const initialChildRouter = childRouters[initialRouteName];\n\n  function getInitialState(action) {\n    let route = {};\n    const childRouter = childRouters[action.routeName];\n\n    // This is a push-like action, and childRouter will be a router or null if we are responsible for this routeName\n    if (behavesLikePushAction(action) && childRouter !== undefined) {\n      let childState = {};\n      // The router is null for normal leaf routes\n      if (childRouter !== null) {\n        const childAction =\n          action.action || NavigationActions.init({ params: action.params });\n        childState = childRouter.getStateForAction(childAction);\n      }\n\n      return {\n        key: 'StackRouterRoot',\n        isTransitioning: false,\n        index: 0,\n        routes: [\n          {\n            params: action.params,\n            ...childState,\n            key: action.key || generateKey(),\n            routeName: action.routeName,\n          },\n        ],\n      };\n    }\n\n    if (initialChildRouter) {\n      route = initialChildRouter.getStateForAction(\n        NavigationActions.navigate({\n          routeName: initialRouteName,\n          params: initialRouteParams,\n        })\n      );\n    }\n    const params = (routeConfigs[initialRouteName].params ||\n      route.params ||\n      action.params ||\n      initialRouteParams) && {\n      ...(routeConfigs[initialRouteName].params || {}),\n      ...(route.params || {}),\n      ...(action.params || {}),\n      ...(initialRouteParams || {}),\n    };\n    const { initialRouteKey } = stackConfig;\n    route = {\n      ...route,\n      ...(params ? { params } : {}),\n      routeName: initialRouteName,\n      key: action.key || initialRouteKey || generateKey(),\n    };\n    return {\n      key: 'StackRouterRoot',\n      isTransitioning: false,\n      index: 0,\n      routes: [route],\n    };\n  }\n\n  function getParamsForRouteAndAction(routeName, action) {\n    let routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return { ...routeConfig.params, ...action.params };\n    } else {\n      return action.params;\n    }\n  }\n\n  const {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams,\n  } = createPathParser(childRouters, routeConfigs, stackConfig);\n\n  return {\n    childRouters,\n\n    getComponentForState(state) {\n      const activeChildRoute = state.routes[state.index];\n      const { routeName } = activeChildRoute;\n      if (childRouters[routeName]) {\n        return childRouters[routeName].getComponentForState(activeChildRoute);\n      }\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getActionCreators(route, navStateKey) {\n      return {\n        ...getCustomActionCreators(route, navStateKey),\n        pop: (n, params) =>\n          StackActions.pop({\n            n,\n            ...params,\n          }),\n        popToTop: (params) => StackActions.popToTop(params),\n        push: (routeName, params, action) =>\n          StackActions.push({\n            routeName,\n            params,\n            action,\n          }),\n        replace: (replaceWith, params, action, newKey) => {\n          if (typeof replaceWith === 'string') {\n            return StackActions.replace({\n              routeName: replaceWith,\n              params,\n              action,\n              key: route.key,\n              newKey,\n            });\n          }\n          invariant(\n            typeof replaceWith === 'object',\n            'Must replaceWith an object or a string'\n          );\n          invariant(\n            params == null,\n            'Params must not be provided to .replace() when specifying an object'\n          );\n          invariant(\n            action == null,\n            'Child action must not be provided to .replace() when specifying an object'\n          );\n          invariant(\n            newKey == null,\n            'Child action must not be provided to .replace() when specifying an object'\n          );\n          return StackActions.replace(replaceWith);\n        },\n        reset: (actions, index) =>\n          StackActions.reset({\n            actions,\n            index: index == null ? actions.length - 1 : index,\n            key: navStateKey,\n          }),\n        dismiss: () =>\n          NavigationActions.back({\n            key: navStateKey,\n          }),\n      };\n    },\n\n    getStateForAction(action, state) {\n      // Set up the initial state if needed\n      if (!state) {\n        return getInitialState(action);\n      }\n\n      const activeChildRoute = state.routes[state.index];\n\n      if (\n        !isResetToRootStack(action) &&\n        action.type !== NavigationActions.NAVIGATE\n      ) {\n        // Let the active child router handle the action\n        const activeChildRouter = childRouters[activeChildRoute.routeName];\n        if (activeChildRouter) {\n          const route = activeChildRouter.getStateForAction(\n            action,\n            activeChildRoute\n          );\n          if (route !== null && route !== activeChildRoute) {\n            return StateUtils.replaceAt(\n              state,\n              activeChildRoute.key,\n              route,\n              // the following tells replaceAt to NOT change the index to this route for the setParam action, because people don't expect param-setting actions to switch the active route\n              action.type === NavigationActions.SET_PARAMS\n            );\n          }\n        }\n      } else if (action.type === NavigationActions.NAVIGATE) {\n        // Traverse routes from the top of the stack to the bottom, so the\n        // active route has the first opportunity, then the one before it, etc.\n\n        for (let childRoute of state.routes.slice().reverse()) {\n          let childRouter = childRouters[childRoute.routeName];\n          let childAction =\n            action.routeName === childRoute.routeName && action.action\n              ? action.action\n              : action;\n\n          if (childRouter) {\n            const nextRouteState = childRouter.getStateForAction(\n              childAction,\n              childRoute\n            );\n\n            if (nextRouteState === null || nextRouteState !== childRoute) {\n              const newState = StateUtils.replaceAndPrune(\n                state,\n                nextRouteState ? nextRouteState.key : childRoute.key,\n                nextRouteState ? nextRouteState : childRoute\n              );\n              return {\n                ...newState,\n                isTransitioning:\n                  state.index !== newState.index\n                    ? action.immediate !== true\n                    : state.isTransitioning,\n              };\n            }\n          }\n        }\n      }\n\n      // Handle push and navigate actions. This must happen after the focused\n      // child router has had a chance to handle the action.\n      if (\n        behavesLikePushAction(action) &&\n        childRouters[action.routeName] !== undefined // undefined means it's not a childRouter or a screen\n      ) {\n        const childRouter = childRouters[action.routeName];\n        let route;\n\n        invariant(\n          action.type !== StackActions.PUSH || action.key == null,\n          'StackRouter does not support key on the push action'\n        );\n\n        // Before pushing a new route we first try to find one in the existing route stack\n        // More information on this: https://github.com/react-navigation/rfcs/blob/master/text/0004-less-pushy-navigate.md\n        const lastRouteIndex = state.routes.findIndex((r) => {\n          if (action.key) {\n            return r.key === action.key;\n          } else {\n            return r.routeName === action.routeName;\n          }\n        });\n\n        // An instance of this route exists already and we're dealing with a navigate action\n        if (action.type !== StackActions.PUSH && lastRouteIndex !== -1) {\n          // If index is unchanged and params are not being set, leave state identity intact\n          if (state.index === lastRouteIndex && !action.params) {\n            return null;\n          }\n\n          // Remove the now unused routes at the tail of the routes array\n          const routes = state.routes.slice(0, lastRouteIndex + 1);\n\n          // Apply params if provided, otherwise leave route identity intact\n          if (action.params) {\n            const route = state.routes[lastRouteIndex];\n            routes[lastRouteIndex] = {\n              ...route,\n              params: {\n                ...route.params,\n                ...action.params,\n              },\n            };\n          }\n          // Return state with new index. Change isTransitioning only if index has changed\n          return {\n            ...state,\n            isTransitioning:\n              state.index !== lastRouteIndex\n                ? action.immediate !== true\n                : state.isTransitioning,\n            index: lastRouteIndex,\n            routes,\n          };\n        }\n\n        if (childRouter) {\n          // Delegate to the child router with the given action, or init it\n          const childAction =\n            action.action ||\n            NavigationActions.init({\n              params: getParamsForRouteAndAction(action.routeName, action),\n            });\n          route = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            // note(brentvatne): does it make sense to wipe out the params\n            // here? or even to add params at all? need more info about what\n            // this solves\n            ...childRouter.getStateForAction(childAction),\n            routeName: action.routeName,\n            key: action.key || generateKey(),\n          };\n        } else {\n          // Create the route from scratch\n          route = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            routeName: action.routeName,\n            key: action.key || generateKey(),\n          };\n        }\n        return {\n          ...StateUtils.push(state, route),\n          isTransitioning: action.immediate !== true,\n        };\n      } else if (\n        action.type === StackActions.PUSH &&\n        childRouters[action.routeName] === undefined\n      ) {\n        // Return the state identity to bubble the action up\n        return state;\n      }\n\n      // Handle navigation to other child routers that are not yet pushed\n      if (behavesLikePushAction(action)) {\n        const childRouterNames = Object.keys(childRouters);\n        for (let i = 0; i < childRouterNames.length; i++) {\n          const childRouterName = childRouterNames[i];\n          const childRouter = childRouters[childRouterName];\n          if (childRouter) {\n            // For each child router, start with a blank state\n            const initChildRoute = childRouter.getStateForAction(\n              NavigationActions.init()\n            );\n            // Then check to see if the router handles our navigate action\n            const navigatedChildRoute = childRouter.getStateForAction(\n              action,\n              initChildRoute\n            );\n            let routeToPush = null;\n            if (navigatedChildRoute === null) {\n              // Push the route if the router has 'handled' the action and returned null\n              routeToPush = initChildRoute;\n            } else if (navigatedChildRoute !== initChildRoute) {\n              // Push the route if the state has changed in response to this navigation\n              routeToPush = navigatedChildRoute;\n            }\n            if (routeToPush) {\n              const route = {\n                ...routeToPush,\n                routeName: childRouterName,\n                key: action.key || generateKey(),\n              };\n              return {\n                ...StateUtils.push(state, route),\n                isTransitioning: action.immediate !== true,\n              };\n            }\n          }\n        }\n      }\n\n      // Handle pop-to-top behavior. Make sure this happens after children have had a chance to handle the action, so that the inner stack pops to top first.\n      if (action.type === StackActions.POP_TO_TOP) {\n        // Refuse to handle pop to top if a key is given that doesn't correspond\n        // to this router\n        if (action.key && state.key !== action.key) {\n          return state;\n        }\n\n        // If we're already at the top, then we return the state with a new\n        // identity so that the action is handled by this router.\n        if (state.index > 0) {\n          return {\n            ...state,\n            isTransitioning: action.immediate !== true,\n            index: 0,\n            routes: [state.routes[0]],\n          };\n        }\n        return state;\n      }\n\n      // Handle replace action\n      if (action.type === StackActions.REPLACE) {\n        let routeIndex;\n\n        // If the key param is undefined, set the index to the last route in the stack\n        if (action.key === undefined && state.routes.length) {\n          routeIndex = state.routes.length - 1;\n        } else {\n          routeIndex = state.routes.findIndex((r) => r.key === action.key);\n        }\n\n        // Only replace if the key matches one of our routes\n        if (routeIndex !== -1) {\n          const childRouter = childRouters[action.routeName];\n          let childState = {};\n          if (childRouter) {\n            const childAction =\n              action.action ||\n              NavigationActions.init({\n                params: getParamsForRouteAndAction(action.routeName, action),\n              });\n            childState = childRouter.getStateForAction(childAction);\n          }\n          const routes = [...state.routes];\n          routes[routeIndex] = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            // merge the child state in this order to allow params override\n            ...childState,\n            routeName: action.routeName,\n            key: action.newKey || generateKey(),\n          };\n          return { ...state, routes };\n        }\n      }\n\n      // Update transitioning state\n      if (\n        action.type === StackActions.COMPLETE_TRANSITION &&\n        (action.key == null || action.key === state.key) &&\n        action.toChildKey === state.routes[state.index].key &&\n        state.isTransitioning\n      ) {\n        return {\n          ...state,\n          isTransitioning: false,\n        };\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        const key = action.key;\n        const lastRoute = state.routes.find((route) => route.key === key);\n        if (lastRoute) {\n          const params = {\n            ...lastRoute.params,\n            ...action.params,\n          };\n          const routes = [...state.routes];\n          routes[state.routes.indexOf(lastRoute)] = {\n            ...lastRoute,\n            params,\n          };\n          return {\n            ...state,\n            routes,\n          };\n        }\n      }\n\n      if (action.type === StackActions.RESET) {\n        // Only handle reset actions that are unspecified or match this state key\n        if (action.key != null && action.key !== state.key) {\n          // Deliberately use != instead of !== so we can match null with\n          // undefined on either the state or the action\n          return state;\n        }\n        const newStackActions = action.actions;\n\n        return {\n          ...state,\n          routes: newStackActions.map((newStackAction) => {\n            const router = childRouters[newStackAction.routeName];\n\n            let childState = {};\n\n            if (router) {\n              const childAction =\n                newStackAction.action ||\n                NavigationActions.init({\n                  params: getParamsForRouteAndAction(\n                    newStackAction.routeName,\n                    newStackAction\n                  ),\n                });\n\n              childState = router.getStateForAction(childAction);\n            }\n\n            return {\n              params: getParamsForRouteAndAction(\n                newStackAction.routeName,\n                newStackAction\n              ),\n              ...childState,\n              routeName: newStackAction.routeName,\n              key: newStackAction.key || generateKey(),\n            };\n          }),\n          index: action.index,\n        };\n      }\n\n      if (\n        action.type === NavigationActions.BACK ||\n        action.type === StackActions.POP\n      ) {\n        const { key, n, immediate, prune } = action;\n\n        if (action.type === StackActions.POP && prune === false && key) {\n          const index = state.routes.findIndex((r) => r.key === key);\n\n          if (index > 0) {\n            const count = Math.max(index - (n ?? 1) + 1, 1);\n            const routes = state.routes\n              .slice(0, count)\n              .concat(state.routes.slice(index + 1));\n\n            if (routes.length) {\n              return {\n                ...state,\n                routes,\n                index: routes.length - 1,\n                isTransitioning: immediate !== true,\n              };\n            }\n          }\n        } else {\n          let backRouteIndex = state.index;\n\n          if (action.type === StackActions.POP && n != null) {\n            // determine the index to go back *from*. In this case, n=1 means to go\n            // back from state.index, as if it were a normal \"BACK\" action\n            backRouteIndex = Math.max(1, state.index - n + 1);\n          } else if (key) {\n            const backRoute = state.routes.find((route) => route.key === key);\n            backRouteIndex = state.routes.indexOf(backRoute);\n          }\n\n          if (backRouteIndex > 0) {\n            return {\n              ...state,\n              routes: state.routes.slice(0, backRouteIndex),\n              index: backRouteIndex - 1,\n              isTransitioning: immediate !== true,\n            };\n          }\n        }\n      }\n\n      // By this point in the router's state handling logic, we have handled the behavior of the active route, and handled any stack actions.\n      // If we haven't returned by now, we should allow non-active child routers to handle this action, and switch to that index if the child state (route) does change..\n\n      const keyIndex = action.key ? StateUtils.indexOf(state, action.key) : -1;\n\n      // Traverse routes from the top of the stack to the bottom, so the\n      // active route has the first opportunity, then the one before it, etc.\n      for (let childRoute of state.routes.slice().reverse()) {\n        if (childRoute.key === activeChildRoute.key) {\n          // skip over the active child because we let it attempt to handle the action earlier\n          continue;\n        }\n        // If a key is provided and in routes state then let's use that\n        // knowledge to skip extra getStateForAction calls on other child\n        // routers\n        if (keyIndex >= 0 && childRoute.key !== action.key) {\n          continue;\n        }\n        let childRouter = childRouters[childRoute.routeName];\n        if (childRouter) {\n          const route = childRouter.getStateForAction(action, childRoute);\n\n          if (route === null) {\n            return state;\n          } else if (route && route !== childRoute) {\n            return StateUtils.replaceAt(\n              state,\n              childRoute.key,\n              route,\n              // People don't expect these actions to switch the active route\n              // TODO: We should switch to action.preserveFocus: true for drawer in future\n              action.preserveFocus || action.type.includes('DRAWER')\n            );\n          }\n        }\n      }\n\n      return state;\n    },\n\n    getPathAndParamsForState(state) {\n      const route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n\n    getScreenOptions: createConfigGetter(\n      routeConfigs,\n      stackConfig.defaultNavigationOptions\n    ),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}