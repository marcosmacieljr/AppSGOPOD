{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-stack/src/views/StackView/StackViewCard.tsx\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Screen } from 'react-native-screens';\nimport { ThemeContext, ThemeColors } from 'react-navigation';\nimport createPointerEventsContainer from \"./createPointerEventsContainer\";\nvar EPS = 1e-5;\n\nfunction getAccessibilityProps(isActive) {\n  if (Platform.OS === 'ios') {\n    return {\n      accessibilityElementsHidden: !isActive\n    };\n  } else if (Platform.OS === 'android') {\n    return {\n      importantForAccessibility: isActive ? 'yes' : 'no-hide-descendants'\n    };\n  } else {\n    return {};\n  }\n}\n\nvar Card = function (_React$Component) {\n  _inherits(Card, _React$Component);\n\n  function Card() {\n    _classCallCheck(this, Card);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Card).apply(this, arguments));\n  }\n\n  _createClass(Card, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          pointerEvents = _this$props.pointerEvents,\n          style = _this$props.style,\n          position = _this$props.position,\n          transparent = _this$props.transparent,\n          _this$props$scene = _this$props.scene,\n          index = _this$props$scene.index,\n          isActive = _this$props$scene.isActive;\n      var active = Platform.select({\n        web: isActive,\n        default: transparent || isActive ? 1 : position.interpolate({\n          inputRange: [index, index + 1 - EPS, index + 1],\n          outputRange: [1, 1, 0],\n          extrapolate: 'clamp'\n        })\n      });\n      var animatedStyle = this.props.animatedStyle || {};\n\n      var shadowOpacity = animatedStyle.shadowOpacity,\n          overlayOpacity = animatedStyle.overlayOpacity,\n          containerAnimatedStyle = _objectWithoutProperties(animatedStyle, [\"shadowOpacity\", \"overlayOpacity\"]);\n\n      var flattenedStyle = StyleSheet.flatten(style) || {};\n\n      var backgroundColor = flattenedStyle.backgroundColor,\n          screenStyle = _objectWithoutProperties(flattenedStyle, [\"backgroundColor\"]);\n\n      var isDark = this.context === 'dark';\n      var baseCardStyle;\n\n      if (isDark) {\n        baseCardStyle = transparent ? styles.transparentDark : styles.cardDark;\n      } else {\n        baseCardStyle = transparent ? styles.transparentLight : styles.cardLight;\n      }\n\n      return React.createElement(Screen, {\n        pointerEvents: pointerEvents,\n        onComponentRef: this.props.onComponentRef,\n        style: [containerAnimatedStyle, screenStyle],\n        active: active,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        }\n      }, !transparent && shadowOpacity ? React.createElement(Animated.View, {\n        style: [styles.shadow, {\n          shadowOpacity: shadowOpacity\n        }],\n        pointerEvents: \"none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        }\n      }) : null, React.createElement(Animated.View, _extends({}, getAccessibilityProps(isActive), {\n        style: [baseCardStyle, backgroundColor && backgroundColor !== 'transparent' ? {\n          backgroundColor: backgroundColor\n        } : null],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        }\n      }), children), overlayOpacity ? React.createElement(Animated.View, {\n        pointerEvents: \"none\",\n        style: [isDark ? styles.overlayDark : styles.overlayLight, {\n          opacity: overlayOpacity\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        }\n      }) : null);\n    }\n  }]);\n\n  return Card;\n}(React.Component);\n\nCard.contextType = ThemeContext;\nvar styles = StyleSheet.create({\n  cardLight: {\n    flex: 1,\n    backgroundColor: ThemeColors.light.body\n  },\n  cardDark: {\n    flex: 1,\n    backgroundColor: ThemeColors.dark.body\n  },\n  overlayLight: _objectSpread({}, StyleSheet.absoluteFillObject, {\n    backgroundColor: '#000'\n  }),\n  overlayDark: _objectSpread({}, StyleSheet.absoluteFillObject, {\n    backgroundColor: '#fff'\n  }),\n  shadow: {\n    top: 0,\n    left: 0,\n    bottom: 0,\n    width: 3,\n    position: 'absolute',\n    backgroundColor: '#fff',\n    shadowOffset: {\n      width: -1,\n      height: 1\n    },\n    shadowRadius: 5,\n    shadowColor: '#000'\n  },\n  transparentLight: {\n    flex: 1,\n    backgroundColor: 'transparent'\n  },\n  transparentDark: {\n    flex: 1,\n    backgroundColor: 'transparent'\n  }\n});\nexport default createPointerEventsContainer(Card);","map":{"version":3,"mappings":"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","names":["React","Screen","ThemeContext","ThemeColors","createPointerEventsContainer","EPS","getAccessibilityProps","isActive","Platform","OS","accessibilityElementsHidden","importantForAccessibility","Card","props","children","pointerEvents","style","position","transparent","scene","index","active","select","web","default","interpolate","inputRange","outputRange","extrapolate","animatedStyle","shadowOpacity","overlayOpacity","containerAnimatedStyle","flattenedStyle","StyleSheet","flatten","backgroundColor","screenStyle","isDark","context","baseCardStyle","styles","transparentDark","cardDark","transparentLight","cardLight","onComponentRef","__source","fileName","lineNumber","Animated","View","shadow","overlayDark","overlayLight","opacity","Component","contextType","create","flex","light","body","dark","absoluteFillObject","top","left","bottom","width","shadowOffset","height","shadowRadius","shadowColor"],"sources":["StackViewCard.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  Platform,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\nimport { Screen } from 'react-native-screens';\nimport { ThemeContext, ThemeColors } from 'react-navigation';\n\nimport createPointerEventsContainer, {\n  InputProps,\n  InjectedProps,\n} from './createPointerEventsContainer';\n\ntype Props = InputProps &\n  InjectedProps & {\n    style: StyleProp<ViewStyle>;\n    animatedStyle: any;\n    position: Animated.AnimatedInterpolation;\n    transparent?: boolean;\n    children: React.ReactNode;\n  };\n\nconst EPS = 1e-5;\n\nfunction getAccessibilityProps(isActive: boolean) {\n  if (Platform.OS === 'ios') {\n    return {\n      accessibilityElementsHidden: !isActive,\n    };\n  } else if (Platform.OS === 'android') {\n    return {\n      importantForAccessibility: isActive ? 'yes' : 'no-hide-descendants',\n    };\n  } else {\n    return {};\n  }\n}\n\n/**\n * Component that renders the scene as card for the <StackView />.\n */\nclass Card extends React.Component<Props> {\n  static contextType = ThemeContext;\n  context!: React.ContextType<typeof ThemeContext>;\n\n  render() {\n    const {\n      children,\n      pointerEvents,\n      style,\n      position,\n      transparent,\n      scene: { index, isActive },\n    } = this.props;\n\n    const active: Animated.Value | number | boolean = Platform.select({\n      web: isActive,\n      // @ts-ignore\n      default:\n        transparent || isActive\n          ? 1\n          : position.interpolate({\n              inputRange: [index, index + 1 - EPS, index + 1],\n              outputRange: [1, 1, 0],\n              extrapolate: 'clamp',\n            }),\n    });\n\n    // animatedStyle can be `false` if there is no screen interpolator\n    const animatedStyle = this.props.animatedStyle || {};\n\n    const {\n      shadowOpacity,\n      overlayOpacity,\n      ...containerAnimatedStyle\n    } = animatedStyle;\n\n    let flattenedStyle = StyleSheet.flatten(style) || {};\n    let { backgroundColor, ...screenStyle } = flattenedStyle;\n    let isDark = this.context === 'dark';\n    let baseCardStyle;\n\n    if (isDark) {\n      baseCardStyle = transparent ? styles.transparentDark : styles.cardDark;\n    } else {\n      baseCardStyle = transparent ? styles.transparentLight : styles.cardLight;\n    }\n\n    return (\n      <Screen\n        pointerEvents={pointerEvents}\n        onComponentRef={this.props.onComponentRef}\n        style={[containerAnimatedStyle, screenStyle]}\n        // @ts-ignore\n        active={active}\n      >\n        {!transparent && shadowOpacity ? (\n          <Animated.View\n            style={[styles.shadow, { shadowOpacity }]}\n            pointerEvents=\"none\"\n          />\n        ) : null}\n        <Animated.View\n          {...getAccessibilityProps(isActive)}\n          style={[\n            baseCardStyle,\n            backgroundColor && backgroundColor !== 'transparent'\n              ? { backgroundColor }\n              : null,\n          ]}\n        >\n          {children}\n        </Animated.View>\n        {overlayOpacity ? (\n          <Animated.View\n            pointerEvents=\"none\"\n            style={[\n              isDark ? styles.overlayDark : styles.overlayLight,\n              { opacity: overlayOpacity },\n            ]}\n          />\n        ) : null}\n      </Screen>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  cardLight: {\n    flex: 1,\n    backgroundColor: ThemeColors.light.body,\n  },\n  cardDark: {\n    flex: 1,\n    backgroundColor: ThemeColors.dark.body,\n  },\n  overlayLight: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: '#000',\n  },\n  overlayDark: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: '#fff',\n  },\n  // TODO: what should shadow be styled like?\n  shadow: {\n    top: 0,\n    left: 0,\n    bottom: 0,\n    width: 3,\n    position: 'absolute',\n    backgroundColor: '#fff',\n    shadowOffset: { width: -1, height: 1 },\n    shadowRadius: 5,\n    shadowColor: '#000',\n  },\n  transparentLight: {\n    flex: 1,\n    backgroundColor: 'transparent',\n  },\n  transparentDark: {\n    flex: 1,\n    backgroundColor: 'transparent',\n  },\n});\n\nexport default createPointerEventsContainer(Card);\n"]},"metadata":{},"sourceType":"module"}