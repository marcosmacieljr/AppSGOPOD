{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as SQLite from 'expo-sqlite';\nvar db = SQLite.openDatabase('db.db');\nexport var executeQuery = function executeQuery(sql) {\n  var params,\n      _args = arguments;\n  return _regeneratorRuntime.async(function executeQuery$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          params = _args.length > 1 && _args[1] !== undefined ? _args[1] : [];\n          return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n            return db.transaction(function (tx) {\n              tx.executeSql(sql, params, function (_, _ref) {\n                var rows = _ref.rows;\n                return resolve(rows._array);\n              }, reject);\n            });\n          }));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var startApp = function startApp() {\n  return _regeneratorRuntime.async(function startApp$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(executeQuery('CREATE TABLE IF NOT EXISTS Users (userId, userCd);'));\n\n        case 2:\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(executeQuery('CREATE TABLE IF NOT EXISTS Forms (id integer primary key not null, stringJSON, route);'));\n\n        case 4:\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(executeQuery('CREATE TABLE IF NOT EXISTS FormUsers (id, name);'));\n\n        case 6:\n          _context2.next = 8;\n          return _regeneratorRuntime.awrap(executeQuery('CREATE TABLE IF NOT EXISTS Weather (id integer, name);'));\n\n        case 8:\n          _context2.next = 10;\n          return _regeneratorRuntime.awrap(executeQuery('CREATE TABLE IF NOT EXISTS RestrictionReason (id integer, desc);'));\n\n        case 10:\n          _context2.next = 12;\n          return _regeneratorRuntime.awrap(executeQuery('CREATE TABLE IF NOT EXISTS Logfile (id TEXT);'));\n\n        case 12:\n          _context2.next = 14;\n          return _regeneratorRuntime.awrap(executeQuery('CREATE TABLE IF NOT EXISTS Logfolder (id TEXT);'));\n\n        case 14:\n          _context2.next = 16;\n          return _regeneratorRuntime.awrap(executeQuery('INSERT INTO Logfile (id) SELECT NULL WHERE NOT EXISTS( SELECT 1 FROM Logfile );'));\n\n        case 16:\n          _context2.next = 18;\n          return _regeneratorRuntime.awrap(executeQuery('INSERT INTO Logfolder (id) SELECT NULL WHERE NOT EXISTS( SELECT 1 FROM Logfolder );'));\n\n        case 18:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var setAssetId = function setAssetId(id) {\n  return _regeneratorRuntime.async(function setAssetId$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(executeQuery('UPDATE Logfile set id=?;', [id]));\n\n        case 3:\n          _context3.next = 8;\n          break;\n\n        case 5:\n          _context3.prev = 5;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n};\nexport var getAssetId = function getAssetId() {\n  var toReturn, logFile;\n  return _regeneratorRuntime.async(function getAssetId$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          toReturn = null;\n          _context4.prev = 1;\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(executeQuery('SELECT * FROM Logfile;'));\n\n        case 4:\n          logFile = _context4.sent;\n          toReturn = logFile[0].id;\n          _context4.next = 11;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](1);\n          console.log(_context4.t0);\n\n        case 11:\n          return _context4.abrupt(\"return\", toReturn);\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[1, 8]], Promise);\n};\nexport var setAlbumId = function setAlbumId(id) {\n  return _regeneratorRuntime.async(function setAlbumId$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(executeQuery('UPDATE Logfolder set id=?;', [id]));\n\n        case 3:\n          _context5.next = 8;\n          break;\n\n        case 5:\n          _context5.prev = 5;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.log(_context5.t0);\n\n        case 8:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n};\nexport var getAlbumId = function getAlbumId() {\n  var toReturn, LogFolder;\n  return _regeneratorRuntime.async(function getAlbumId$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          toReturn = null;\n          _context6.prev = 1;\n          _context6.next = 4;\n          return _regeneratorRuntime.awrap(executeQuery('SELECT * FROM Logfolder;'));\n\n        case 4:\n          LogFolder = _context6.sent;\n          toReturn = LogFolder[0].id;\n          _context6.next = 11;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](1);\n          console.log(_context6.t0);\n\n        case 11:\n          return _context6.abrupt(\"return\", toReturn);\n\n        case 12:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, [[1, 8]], Promise);\n};","map":{"version":3,"sources":["C:/RepositorioTech/AppSGO-main/db/sqliteConnection.js"],"names":["SQLite","db","openDatabase","executeQuery","sql","params","Promise","resolve","reject","transaction","tx","executeSql","_","rows","_array","startApp","setAssetId","id","console","log","getAssetId","toReturn","logFile","setAlbumId","getAlbumId","LogFolder"],"mappings":"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","sourcesContent":["import * as SQLite from 'expo-sqlite';\n\nconst db = SQLite.openDatabase('db.db');\nexport const executeQuery = async (sql, params = []) => {\n\treturn new Promise((resolve, reject) => db.transaction(tx => {\n\t\ttx.executeSql(sql, params, (_, { rows }) => resolve(rows._array), reject)\n\t}))\n};\n\nexport const startApp = async () => {\n\t\n\t// DESCOMENTAR para quando quiser apagar as tabelas para recriar novamente\n\t// SE FOR NECESSÁRIO atualizar o expo não deixar comentada pois é um dos motivos para novos erros\n\t\n\t//await executeQuery('DROP TABLE Forms;'); \n\t//await executeQuery('DROP TABLE Users;'); \n\t\n\tawait executeQuery('CREATE TABLE IF NOT EXISTS Users (userId, userCd);');\n\tawait executeQuery('CREATE TABLE IF NOT EXISTS Forms (id integer primary key not null, stringJSON, route);');\n\tawait executeQuery('CREATE TABLE IF NOT EXISTS FormUsers (id, name);');\n\tawait executeQuery('CREATE TABLE IF NOT EXISTS Weather (id integer, name);');\n\tawait executeQuery('CREATE TABLE IF NOT EXISTS RestrictionReason (id integer, desc);');\n\tawait executeQuery('CREATE TABLE IF NOT EXISTS Logfile (id TEXT);');\n\tawait executeQuery('CREATE TABLE IF NOT EXISTS Logfolder (id TEXT);');\n    await executeQuery('INSERT INTO Logfile (id) SELECT NULL WHERE NOT EXISTS( SELECT 1 FROM Logfile );');\n\tawait executeQuery('INSERT INTO Logfolder (id) SELECT NULL WHERE NOT EXISTS( SELECT 1 FROM Logfolder );');\n}\n\n//Arquivo novo na camada de acesso ao db\nexport const setAssetId = async (id) => {\n\ttry {\n\t  await executeQuery('UPDATE Logfile set id=?;', [id]);\n\t} catch (error) {\n\t  console.log(error);\n\t}\n  }\n  \n  export const getAssetId = async () => {\n\tlet toReturn = null;\n\ttry {\n\t  const logFile = await executeQuery('SELECT * FROM Logfile;');\n\t  toReturn = logFile[0].id;\n\t} catch (error) {\n\t  console.log(error);\n\t}\n\treturn toReturn;\n  }\n  \n  export const setAlbumId = async (id) => {\n\ttry {\n\t  await executeQuery('UPDATE Logfolder set id=?;', [id]);\n\t} catch (error) {\n\t  console.log(error);\n\t}\n  }\n  \n  export const getAlbumId = async () => {\n\tlet toReturn = null;\n\ttry {\n\t  const LogFolder = await executeQuery('SELECT * FROM Logfolder;');\n\t  toReturn = LogFolder[0].id;\n\t} catch (error) {\n\t  console.log(error);\n\t}\n\treturn toReturn;\n  }"]},"metadata":{},"sourceType":"module"}