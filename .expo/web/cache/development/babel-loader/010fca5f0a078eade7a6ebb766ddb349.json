{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar InternetReachability = _createClass(function InternetReachability(configuration, listener) {\n  var _this = this;\n\n  _classCallCheck(this, InternetReachability);\n\n  _defineProperty(this, \"_configuration\", void 0);\n\n  _defineProperty(this, \"_listener\", void 0);\n\n  _defineProperty(this, \"_isInternetReachable\", undefined);\n\n  _defineProperty(this, \"_currentInternetReachabilityCheckHandler\", null);\n\n  _defineProperty(this, \"_currentTimeoutHandle\", null);\n\n  _defineProperty(this, \"_setIsInternetReachable\", function (isInternetReachable) {\n    if (_this._isInternetReachable === isInternetReachable) {\n      return;\n    }\n\n    _this._isInternetReachable = isInternetReachable;\n\n    _this._listener(_this._isInternetReachable);\n  });\n\n  _defineProperty(this, \"_setExpectsConnection\", function (expectsConnection) {\n    if (_this._currentInternetReachabilityCheckHandler !== null) {\n      _this._currentInternetReachabilityCheckHandler.cancel();\n\n      _this._currentInternetReachabilityCheckHandler = null;\n    }\n\n    if (_this._currentTimeoutHandle !== null) {\n      clearTimeout(_this._currentTimeoutHandle);\n      _this._currentTimeoutHandle = null;\n    }\n\n    if (expectsConnection && _this._configuration.reachabilityShouldRun()) {\n      if (!_this._isInternetReachable) {\n        _this._setIsInternetReachable(null);\n      }\n\n      _this._currentInternetReachabilityCheckHandler = _this._checkInternetReachability();\n    } else {\n      _this._setIsInternetReachable(false);\n    }\n  });\n\n  _defineProperty(this, \"_checkInternetReachability\", function () {\n    var responsePromise = fetch(_this._configuration.reachabilityUrl, {\n      method: 'HEAD',\n      cache: 'no-cache'\n    });\n    var timeoutHandle;\n    var timeoutPromise = new Promise(function (_, reject) {\n      timeoutHandle = setTimeout(function () {\n        return reject('timedout');\n      }, _this._configuration.reachabilityRequestTimeout);\n    });\n\n    var cancel = function cancel() {};\n\n    var cancelPromise = new Promise(function (_, reject) {\n      cancel = function cancel() {\n        return reject('canceled');\n      };\n    });\n    var promise = Promise.race([responsePromise, timeoutPromise, cancelPromise]).then(function (response) {\n      return _this._configuration.reachabilityTest(response);\n    }).then(function (result) {\n      _this._setIsInternetReachable(result);\n\n      var nextTimeoutInterval = _this._isInternetReachable ? _this._configuration.reachabilityLongTimeout : _this._configuration.reachabilityShortTimeout;\n      _this._currentTimeoutHandle = setTimeout(_this._checkInternetReachability, nextTimeoutInterval);\n    }).catch(function (error) {\n      if (error !== 'canceled') {\n        _this._setIsInternetReachable(false);\n\n        _this._currentTimeoutHandle = setTimeout(_this._checkInternetReachability, _this._configuration.reachabilityShortTimeout);\n      }\n    }).then(function () {\n      clearTimeout(timeoutHandle);\n    }, function (error) {\n      clearTimeout(timeoutHandle);\n      throw error;\n    });\n    return {\n      promise: promise,\n      cancel: cancel\n    };\n  });\n\n  _defineProperty(this, \"update\", function (state) {\n    if (typeof state.isInternetReachable === 'boolean') {\n      _this._setIsInternetReachable(state.isInternetReachable);\n    } else {\n      _this._setExpectsConnection(state.isConnected);\n    }\n  });\n\n  _defineProperty(this, \"currentState\", function () {\n    return _this._isInternetReachable;\n  });\n\n  _defineProperty(this, \"tearDown\", function () {\n    if (_this._currentInternetReachabilityCheckHandler !== null) {\n      _this._currentInternetReachabilityCheckHandler.cancel();\n\n      _this._currentInternetReachabilityCheckHandler = null;\n    }\n\n    if (_this._currentTimeoutHandle !== null) {\n      clearTimeout(_this._currentTimeoutHandle);\n      _this._currentTimeoutHandle = null;\n    }\n  });\n\n  this._configuration = configuration;\n  this._listener = listener;\n});\n\nexport { InternetReachability as default };","map":{"version":3,"mappings":"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","names":["InternetReachability","constructor","configuration","listener","_defineProperty","undefined","isInternetReachable","_isInternetReachable","_listener","expectsConnection","_currentInternetReachabilityCheckHandler","cancel","_currentTimeoutHandle","clearTimeout","_configuration","reachabilityShouldRun","_setIsInternetReachable","_checkInternetReachability","responsePromise","fetch","reachabilityUrl","method","cache","timeoutHandle","timeoutPromise","Promise","_","reject","setTimeout","reachabilityRequestTimeout","cancelPromise","promise","race","then","response","reachabilityTest","result","nextTimeoutInterval","reachabilityLongTimeout","reachabilityShortTimeout","catch","error","state","_setExpectsConnection","isConnected"],"sources":["internetReachability.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport * as Types from './types';\nimport * as PrivateTypes from './privateTypes';\n\ninterface InternetReachabilityCheckHandler {\n  promise: Promise<void>;\n  cancel: () => void;\n}\n\nexport default class InternetReachability {\n  private _configuration: Types.NetInfoConfiguration;\n  private _listener: PrivateTypes.NetInfoInternetReachabilityChangeListener;\n  private _isInternetReachable: boolean | null | undefined = undefined;\n  private _currentInternetReachabilityCheckHandler: InternetReachabilityCheckHandler | null = null;\n  private _currentTimeoutHandle: ReturnType<typeof setTimeout> | null = null;\n\n  constructor(\n    configuration: Types.NetInfoConfiguration,\n    listener: PrivateTypes.NetInfoInternetReachabilityChangeListener,\n  ) {\n    this._configuration = configuration;\n    this._listener = listener;\n  }\n\n  private _setIsInternetReachable = (\n    isInternetReachable: boolean | null,\n  ): void => {\n    if (this._isInternetReachable === isInternetReachable) {\n      return;\n    }\n\n    this._isInternetReachable = isInternetReachable;\n    this._listener(this._isInternetReachable);\n  };\n\n  private _setExpectsConnection = (expectsConnection: boolean | null): void => {\n    // Cancel any pending check\n    if (this._currentInternetReachabilityCheckHandler !== null) {\n      this._currentInternetReachabilityCheckHandler.cancel();\n      this._currentInternetReachabilityCheckHandler = null;\n    }\n    // Cancel any pending timeout\n    if (this._currentTimeoutHandle !== null) {\n      clearTimeout(this._currentTimeoutHandle);\n      this._currentTimeoutHandle = null;\n    }\n\n    if (expectsConnection && this._configuration.reachabilityShouldRun()) {\n      // If we expect a connection, start the process for finding if we have one\n      // Set the state to \"null\" if it was previously false\n      if (!this._isInternetReachable) {\n        this._setIsInternetReachable(null);\n      }\n      // Start a network request to check for internet\n      this._currentInternetReachabilityCheckHandler = this._checkInternetReachability();\n    } else {\n      // If we don't expect a connection or don't run reachability check, just change the state to \"false\"\n      this._setIsInternetReachable(false);\n    }\n  };\n\n  private _checkInternetReachability = (): InternetReachabilityCheckHandler => {\n    const responsePromise = fetch(this._configuration.reachabilityUrl, {\n      method: 'HEAD',\n      cache: 'no-cache',\n    });\n\n    // Create promise that will reject after the request timeout has been reached\n    let timeoutHandle: ReturnType<typeof setTimeout>;\n    const timeoutPromise = new Promise<Response>(\n      (_, reject): void => {\n        timeoutHandle = setTimeout(\n          (): void => reject('timedout'),\n          this._configuration.reachabilityRequestTimeout,\n        );\n      },\n    );\n\n    // Create promise that makes it possible to cancel a pending request through a reject\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    let cancel: () => void = (): void => {};\n    const cancelPromise = new Promise<Response>(\n      (_, reject): void => {\n        cancel = (): void => reject('canceled');\n      },\n    );\n\n    const promise = Promise.race([\n      responsePromise,\n      timeoutPromise,\n      cancelPromise,\n    ])\n      .then(\n        (response): Promise<boolean> => {\n          return this._configuration.reachabilityTest(response);\n        },\n      )\n      .then(\n        (result): void => {\n          this._setIsInternetReachable(result);\n          const nextTimeoutInterval = this._isInternetReachable\n            ? this._configuration.reachabilityLongTimeout\n            : this._configuration.reachabilityShortTimeout;\n          this._currentTimeoutHandle = setTimeout(\n            this._checkInternetReachability,\n            nextTimeoutInterval,\n          );\n        },\n      )\n      .catch(\n        (error: Error | 'timedout' | 'canceled'): void => {\n          if (error !== 'canceled') {\n            this._setIsInternetReachable(false);\n            this._currentTimeoutHandle = setTimeout(\n              this._checkInternetReachability,\n              this._configuration.reachabilityShortTimeout,\n            );\n          }\n        },\n      )\n      // Clear request timeout and propagate any errors\n      .then(\n        (): void => {\n          clearTimeout(timeoutHandle);\n        },\n        (error: Error): void => {\n          clearTimeout(timeoutHandle);\n          throw error;\n        },\n      );\n\n    return {\n      promise,\n      cancel,\n    };\n  };\n\n  public update = (state: PrivateTypes.NetInfoNativeModuleState): void => {\n    if (typeof state.isInternetReachable === 'boolean') {\n      this._setIsInternetReachable(state.isInternetReachable);\n    } else {\n      this._setExpectsConnection(state.isConnected);\n    }\n  };\n\n  public currentState = (): boolean | null | undefined => {\n    return this._isInternetReachable;\n  };\n\n  public tearDown = (): void => {\n    // Cancel any pending check\n    if (this._currentInternetReachabilityCheckHandler !== null) {\n      this._currentInternetReachabilityCheckHandler.cancel();\n      this._currentInternetReachabilityCheckHandler = null;\n    }\n\n    // Cancel any pending timeout\n    if (this._currentTimeoutHandle !== null) {\n      clearTimeout(this._currentTimeoutHandle);\n      this._currentTimeoutHandle = null;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}