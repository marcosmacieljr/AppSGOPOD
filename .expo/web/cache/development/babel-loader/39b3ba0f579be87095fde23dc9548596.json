{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-stack/src/views/StackView/createPointerEventsContainer.tsx\";\nimport * as React from 'react';\nvar MIN_POSITION_OFFSET = 0.01;\nexport default function createPointerEventsContainer(Component) {\n  var Container = function (_React$Component) {\n    _inherits(Container, _React$Component);\n\n    function Container() {\n      var _getPrototypeOf2;\n\n      var _this;\n\n      _classCallCheck(this, Container);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Container)).call.apply(_getPrototypeOf2, [this].concat(args)));\n      _this.pointerEvents = _this.computePointerEvents();\n      _this.component = null;\n\n      _this.handleComponentRef = function (component) {\n        _this.component = component;\n\n        if (component && typeof component.setNativeProps !== 'function') {\n          throw new Error('Component must implement method `setNativeProps`');\n        }\n      };\n\n      _this.handlePositionChange = function () {\n        if (_this.component) {\n          var pointerEvents = _this.computePointerEvents();\n\n          if (_this.pointerEvents !== pointerEvents) {\n            _this.pointerEvents = pointerEvents;\n\n            _this.component.setNativeProps({\n              pointerEvents: pointerEvents\n            });\n          }\n        }\n      };\n\n      return _this;\n    }\n\n    _createClass(Container, [{\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this.positionListener && this.positionListener.remove();\n      }\n    }, {\n      key: \"bindPosition\",\n      value: function bindPosition() {\n        this.positionListener && this.positionListener.remove();\n        this.positionListener = new AnimatedValueSubscription(this.props.realPosition, this.handlePositionChange);\n      }\n    }, {\n      key: \"computePointerEvents\",\n      value: function computePointerEvents() {\n        var _this$props = this.props,\n            navigation = _this$props.navigation,\n            realPosition = _this$props.realPosition,\n            scene = _this$props.scene;\n\n        if (scene.isStale || navigation.state.index !== scene.index) {\n          return scene.index > navigation.state.index ? 'box-only' : 'none';\n        }\n\n        var offset = realPosition.__getAnimatedValue() - navigation.state.index;\n\n        if (Math.abs(offset) > MIN_POSITION_OFFSET) {\n          return 'box-only';\n        }\n\n        return 'auto';\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        this.bindPosition();\n        this.pointerEvents = this.computePointerEvents();\n        return React.createElement(Component, _extends({}, this.props, {\n          pointerEvents: this.pointerEvents,\n          onComponentRef: this.handleComponentRef,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          }\n        }));\n      }\n    }]);\n\n    return Container;\n  }(React.Component);\n\n  return Container;\n}\n\nvar AnimatedValueSubscription = function () {\n  function AnimatedValueSubscription(value, callback) {\n    _classCallCheck(this, AnimatedValueSubscription);\n\n    this.value = value;\n    this.token = value.addListener(callback);\n  }\n\n  _createClass(AnimatedValueSubscription, [{\n    key: \"remove\",\n    value: function remove() {\n      this.value.removeListener(this.token);\n    }\n  }]);\n\n  return AnimatedValueSubscription;\n}();","map":{"version":3,"mappings":";;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAIA,IAAMC,mBAAmB,GAAG,IAA5B;AAoBA,eAAe,SAASC,4BAAT,CAGbC,SAHa,EAIgE;AAAA,MACvEC,SADuE;AAAAC;;AAAA;AAAA;;AAAA;;AAAAC;;AAAA;AAAAC;AAAA;;AAAAC;AAAAA,YAEnEC,aAFmE,GAEnDD,MAAKE,oBAAL,EAFmD;AAAAF,YAGnEG,SAHmE,GAG1C,IAH0C;;AAAAH,YAUnEI,kBAVmE,GAU9C,UAACD,SAAD,EAA4B;AACvDH,cAAKG,SAAL,GAAiBA,SAAjB;;AAEA,YAAIA,SAAS,IAAI,OAAOA,SAAS,CAACE,cAAjB,KAAoC,UAArD,EAAiE;AAC/D,gBAAM,IAAIC,KAAJ,CAAU,kDAAV,CAAN;AAEH;AAhB0E;;AAAAN,YA0BnEO,oBA1BmE,GA0B5C,YAAqB;AAMlD,YAAIP,MAAKG,SAAT,EAAoB;AAClB,cAAMF,aAAa,GAAGD,MAAKE,oBAAL,EAAtB;;AACA,cAAIF,MAAKC,aAAL,KAAuBA,aAA3B,EAA0C;AACxCD,kBAAKC,aAAL,GAAqBA,aAArB;;AACAD,kBAAKG,SAAL,CAAeE,cAAf,CAA8B;AAAEJ,2BAAa,EAAbA;AAAF,aAA9B;AAEH;AACF;AAvC0E;;AAAA;AAAA;;AAAAO;AAAAC;AAAAC,6CAMpD;AACrB,aAAKC,gBAAL,IAAyB,KAAKA,gBAAL,CAAsBC,MAAtB,EAAzB;AAPyE;AAAA;AAAAH;AAAAC,qCAkBpD;AACrB,aAAKC,gBAAL,IAAyB,KAAKA,gBAAL,CAAsBC,MAAtB,EAAzB;AACA,aAAKD,gBAAL,GAAwB,IAAIE,yBAAJ,CACtB,KAAKC,KAAL,CAAWC,YADW,EAEtB,KAAKR,oBAFiB,CAAxB;AApByE;AAAA;AAAAE;AAAAC,6CAyC5C;AAAA,0BACe,KAAKI,KADpB;AAAA,YACrBE,UADqB,eACrBA,UADqB;AAAA,YACTD,YADS,eACTA,YADS;AAAA,YACKE,KADL,eACKA,KADL;;AAG7B,YAAIA,KAAK,CAACC,OAAND,IAAiBD,UAAU,CAACG,KAAXH,CAAiBI,KAAjBJ,KAA2BC,KAAK,CAACG,KAAtD,EAA6D;AAE3D,iBAAOH,KAAK,CAACG,KAANH,GAAcD,UAAU,CAACG,KAAXH,CAAiBI,KAA/BH,GAAuC,UAAvCA,GAAoD,MAA3D;AAIF;;AAAA,YAAMI,MAAM,GAAGN,YAAY,CAACO,kBAAbP,KAAoCC,UAAU,CAACG,KAAXH,CAAiBI,KAApE;;AACA,YAAIG,IAAI,CAACC,GAALD,CAASF,MAATE,IAAmB9B,mBAAvB,EAA4C;AAI1C,iBAAO,UAAP;AAGF;;AAAA,eAAO,MAAP;AA1DyE;AAAA;AAAAgB;AAAAC,+BA6DlE;AACP,aAAKe,YAAL;AACA,aAAKxB,aAAL,GAAqB,KAAKC,oBAAL,EAArB;AAEA,eACEV,oBAACG,SAAD,eACM,KAAKmB,KADX;AAEEb,uBAAa,EAAE,KAAKA,aAFtB;AAGEyB,wBAAc,EAAE,KAAKtB,kBAHvB;AAAAuB;AAAAC;AAAAC;AAAA;AAAA,WADF;AAjEyE;AAAA;;AAAA;AAAA,IACrDrC,KAAK,CAACG,SAD+C;;AA2E7E,SAAOC,SAAP;;;IAGIiB,yB;AAIJ,qCAAYH,KAAZ,EAAmCoB,QAAnC,EAA6E;AAAAhC;;AAC3E,SAAKY,KAAL,GAAaA,KAAb;AACA,SAAKqB,KAAL,GAAarB,KAAK,CAACsB,WAANtB,CAAkBoB,QAAlBpB,CAAb;;;;;6BAGO;AACP,WAAKA,KAAL,CAAWuB,cAAX,CAA0B,KAAKF,KAA/B","names":["React","MIN_POSITION_OFFSET","createPointerEventsContainer","Component","Container","_inherits","_classCallCheck","args","_this","pointerEvents","computePointerEvents","component","handleComponentRef","setNativeProps","Error","handlePositionChange","_createClass","key","value","positionListener","remove","AnimatedValueSubscription","props","realPosition","navigation","scene","isStale","state","index","offset","__getAnimatedValue","Math","abs","bindPosition","onComponentRef","__source","fileName","lineNumber","callback","token","addListener","removeListener"],"sources":["createPointerEventsContainer.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View } from 'react-native';\nimport { NavigationStackProp, Scene } from '../../types';\n\nconst MIN_POSITION_OFFSET = 0.01;\n\nexport type PointerEvents = 'box-only' | 'none' | 'auto';\n\nexport type InputProps = {\n  scene: Scene;\n  navigation: NavigationStackProp;\n  realPosition: Animated.Value;\n};\n\nexport type InjectedProps = {\n  pointerEvents: PointerEvents;\n  onComponentRef: (ref: View | null) => void;\n};\n\n/**\n * Create a higher-order component that automatically computes the\n * `pointerEvents` property for a component whenever navigation position\n * changes.\n */\nexport default function createPointerEventsContainer<\n  Props extends InjectedProps & InputProps\n>(\n  Component: React.ComponentType<Props>\n): React.ComponentType<Pick<Props, Exclude<keyof Props, keyof InjectedProps>>> {\n  class Container extends React.Component<Props> {\n    private pointerEvents = this.computePointerEvents();\n    private component: View | null = null;\n    private positionListener: AnimatedValueSubscription | undefined;\n\n    componentWillUnmount() {\n      this.positionListener && this.positionListener.remove();\n    }\n\n    private handleComponentRef = (component: View | null) => {\n      this.component = component;\n\n      if (component && typeof component.setNativeProps !== 'function') {\n        throw new Error('Component must implement method `setNativeProps`');\n      }\n    };\n\n    private bindPosition() {\n      this.positionListener && this.positionListener.remove();\n      this.positionListener = new AnimatedValueSubscription(\n        this.props.realPosition,\n        this.handlePositionChange\n      );\n    }\n\n    private handlePositionChange = (/* { value } */) => {\n      // This should log each frame when releasing the gesture or when pressing\n      // the back button! If not, something has gone wrong with the animated\n      // value subscription\n      // console.log(value);\n\n      if (this.component) {\n        const pointerEvents = this.computePointerEvents();\n        if (this.pointerEvents !== pointerEvents) {\n          this.pointerEvents = pointerEvents;\n          this.component.setNativeProps({ pointerEvents });\n        }\n      }\n    };\n\n    private computePointerEvents() {\n      const { navigation, realPosition, scene } = this.props;\n\n      if (scene.isStale || navigation.state.index !== scene.index) {\n        // The scene isn't focused.\n        return scene.index > navigation.state.index ? 'box-only' : 'none';\n      }\n\n      // @ts-ignore\n      const offset = realPosition.__getAnimatedValue() - navigation.state.index;\n      if (Math.abs(offset) > MIN_POSITION_OFFSET) {\n        // The positon is still away from scene's index.\n        // Scene's children should not receive touches until the position\n        // is close enough to scene's index.\n        return 'box-only';\n      }\n\n      return 'auto';\n    }\n\n    render() {\n      this.bindPosition();\n      this.pointerEvents = this.computePointerEvents();\n\n      return (\n        <Component\n          {...this.props}\n          pointerEvents={this.pointerEvents}\n          onComponentRef={this.handleComponentRef}\n        />\n      );\n    }\n  }\n\n  return Container as any;\n}\n\nclass AnimatedValueSubscription {\n  private value: Animated.Value;\n  private token: string;\n\n  constructor(value: Animated.Value, callback: Animated.ValueListenerCallback) {\n    this.value = value;\n    this.token = value.addListener(callback);\n  }\n\n  remove() {\n    this.value.removeListener(this.token);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}