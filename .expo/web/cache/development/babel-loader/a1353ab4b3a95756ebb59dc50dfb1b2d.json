{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Repositorio\\\\SgoApp\\\\APP\\\\components\\\\Button.js\";\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { styles } from \"../styles/styles\";\nexport function ButtonP(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var mounted = true;\n\n  var onPressButton = function onPressButton() {\n    return _regeneratorRuntime.async(function onPressButton$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setLoading(true);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(props.onPress(callback));\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var callback = function callback() {\n    return _regeneratorRuntime.async(function callback$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            setLoading(false);\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (isLoading) {\n    return React.createElement(ActivityIndicator, {\n      size: \"large\",\n      color: \"#0174DF\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 10\n      }\n    });\n  } else {\n    return React.createElement(Button, {\n      styles: styles.buttonP,\n      title: props.title,\n      onPress: onPressButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 10\n      }\n    });\n  }\n}\nexport function ButtonG(props) {\n  return React.createElement(TouchableOpacity, {\n    onPress: props.onPress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 6\n    }\n  }, React.createElement(View, {\n    style: styles.buttonView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonG,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 8\n    }\n  }, props.title)));\n}","map":{"version":3,"sources":["C:/Repositorio/SgoApp/APP/components/Button.js"],"names":["React","useState","styles","ButtonP","props","isLoading","setLoading","mounted","onPressButton","onPress","callback","buttonP","title","ButtonG","buttonView","buttonG"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;;AAEA,SAASC,MAAT;AAEA,OAAO,SAASC,OAAT,CAAkBC,KAAlB,EAAyB;AAAA,kBACCH,QAAQ,CAAC,KAAD,CADT;AAAA;AAAA,MACxBI,SADwB;AAAA,MACbC,UADa;;AAE5B,MAAIC,OAAO,GAAG,IAAd;;AAEH,MAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA;AAAA;AAAA;AAAA;AACrBF,YAAAA,UAAU,CAAC,IAAD,CAAV;AADqB;AAAA,6CAEfF,KAAK,CAACK,OAAN,CAAcC,QAAd,CAFe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAKG,MAAMA,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA;AAAA;AAAA;AACbJ,YAAAA,UAAU,CAAC,KAAD,CAAV;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAIH,MAAGD,SAAH,EAAa;AACZ,WACO,oBAAC,iBAAD;AAAmB,MAAA,IAAI,EAAC,OAAxB;AAAgC,MAAA,KAAK,EAAC,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADP;AAGG,GAJJ,MAIU;AACN,WACI,oBAAC,MAAD;AAAQ,MAAA,MAAM,EAAEH,MAAM,CAACS,OAAvB;AAAgC,MAAA,KAAK,EAAEP,KAAK,CAACQ,KAA7C;AAAoD,MAAA,OAAO,EAAEJ,aAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGA;AACJ;AAED,OAAO,SAASK,OAAT,CAAkBT,KAAlB,EAAyB;AAC/B,SACI,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAEA,KAAK,CAACK,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEP,MAAM,CAACY,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEZ,MAAM,CAACa,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8BX,KAAK,CAACQ,KAApC,CADD,CADD,CADJ;AAOA","sourcesContent":["import React, { useState } from 'react';\r\nimport { Text, View, Button, TouchableOpacity, ActivityIndicator } from 'react-native';\r\nimport { styles } from '../styles/styles';\r\n\r\nexport function ButtonP (props) {\r\n\tconst [isLoading, setLoading] = useState(false);\r\n    let mounted = true;\r\n\r\n\tconst onPressButton = async () => {\r\n\t\tsetLoading(true);\r\n\t\tawait props.onPress(callback);\r\n    };\r\n\r\n    const callback = async () => {\r\n        setLoading(false);\r\n    }\r\n\r\n\tif(isLoading){\r\n\t\treturn (\r\n    \t    <ActivityIndicator size=\"large\" color=\"#0174DF\" />\r\n    \t);\r\n    } else {\r\n    \treturn (\r\n    \t    <Button styles={styles.buttonP} title={props.title} onPress={onPressButton} />\r\n    \t);\r\n    }\r\n}\r\n\r\nexport function ButtonG (props) {\r\n\treturn (\r\n    \t<TouchableOpacity onPress={props.onPress}>\r\n    \t\t<View style={styles.buttonView}>\r\n    \t\t\t<Text style={styles.buttonG}>{props.title}</Text>\r\n    \t\t</View>\r\n    \t</TouchableOpacity>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}