{"ast":null,"code":"import _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { EventEmitter, UnavailabilityError } from 'expo-modules-core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { v4 as uuidv4 } from 'uuid';\nimport ExponentFileSystem from \"./ExponentFileSystem\";\nimport { EncodingType, FileSystemSessionType, FileSystemUploadType } from \"./FileSystem.types\";\n\nif (!ExponentFileSystem) {\n  console.warn(\"No native ExponentFileSystem module found, are you sure the expo-file-system's module is linked properly?\");\n}\n\nvar _unused = new EventEmitter(ExponentFileSystem);\n\nexport { EncodingType, FileSystemSessionType, FileSystemUploadType };\n\nfunction normalizeEndingSlash(p) {\n  if (p != null) {\n    return p.replace(/\\/*$/, '') + '/';\n  }\n\n  return null;\n}\n\nexport var documentDirectory = normalizeEndingSlash(ExponentFileSystem.documentDirectory);\nexport var cacheDirectory = normalizeEndingSlash(ExponentFileSystem.cacheDirectory);\nvar bundledAssets = ExponentFileSystem.bundledAssets,\n    bundleDirectory = ExponentFileSystem.bundleDirectory;\nexport { bundledAssets, bundleDirectory };\nexport function getInfoAsync(fileUri) {\n  var options,\n      _args = arguments;\n  return _regeneratorRuntime.async(function getInfoAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n          if (ExponentFileSystem.getInfoAsync) {\n            _context.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'getInfoAsync');\n\n        case 3:\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.getInfoAsync(fileUri, options));\n\n        case 5:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function readAsStringAsync(fileUri, options) {\n  return _regeneratorRuntime.async(function readAsStringAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (ExponentFileSystem.readAsStringAsync) {\n            _context2.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'readAsStringAsync');\n\n        case 2:\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.readAsStringAsync(fileUri, options || {}));\n\n        case 4:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getContentUriAsync(fileUri) {\n  return _regeneratorRuntime.async(function getContentUriAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!(Platform.OS === 'android')) {\n            _context3.next = 8;\n            break;\n          }\n\n          if (ExponentFileSystem.getContentUriAsync) {\n            _context3.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'getContentUriAsync');\n\n        case 3:\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.getContentUriAsync(fileUri));\n\n        case 5:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 8:\n          return _context3.abrupt(\"return\", new Promise(function (resolve, reject) {\n            resolve(fileUri);\n          }));\n\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function writeAsStringAsync(fileUri, contents) {\n  var options,\n      _args4 = arguments;\n  return _regeneratorRuntime.async(function writeAsStringAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          options = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};\n\n          if (ExponentFileSystem.writeAsStringAsync) {\n            _context4.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'writeAsStringAsync');\n\n        case 3:\n          _context4.next = 5;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.writeAsStringAsync(fileUri, contents, options));\n\n        case 5:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function deleteAsync(fileUri) {\n  var options,\n      _args5 = arguments;\n  return _regeneratorRuntime.async(function deleteAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          options = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};\n\n          if (ExponentFileSystem.deleteAsync) {\n            _context5.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'deleteAsync');\n\n        case 3:\n          _context5.next = 5;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.deleteAsync(fileUri, options));\n\n        case 5:\n          return _context5.abrupt(\"return\", _context5.sent);\n\n        case 6:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function deleteLegacyDocumentDirectoryAndroid() {\n  var legacyDocumentDirectory;\n  return _regeneratorRuntime.async(function deleteLegacyDocumentDirectoryAndroid$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          if (!(Platform.OS !== 'android' || documentDirectory == null)) {\n            _context6.next = 2;\n            break;\n          }\n\n          return _context6.abrupt(\"return\");\n\n        case 2:\n          legacyDocumentDirectory = documentDirectory + \"ExperienceData/\";\n          _context6.next = 5;\n          return _regeneratorRuntime.awrap(deleteAsync(legacyDocumentDirectory, {\n            idempotent: true\n          }));\n\n        case 5:\n          return _context6.abrupt(\"return\", _context6.sent);\n\n        case 6:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function moveAsync(options) {\n  return _regeneratorRuntime.async(function moveAsync$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          if (ExponentFileSystem.moveAsync) {\n            _context7.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'moveAsync');\n\n        case 2:\n          _context7.next = 4;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.moveAsync(options));\n\n        case 4:\n          return _context7.abrupt(\"return\", _context7.sent);\n\n        case 5:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function copyAsync(options) {\n  return _regeneratorRuntime.async(function copyAsync$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          if (ExponentFileSystem.copyAsync) {\n            _context8.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'copyAsync');\n\n        case 2:\n          _context8.next = 4;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.copyAsync(options));\n\n        case 4:\n          return _context8.abrupt(\"return\", _context8.sent);\n\n        case 5:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function makeDirectoryAsync(fileUri) {\n  var options,\n      _args9 = arguments;\n  return _regeneratorRuntime.async(function makeDirectoryAsync$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          options = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};\n\n          if (ExponentFileSystem.makeDirectoryAsync) {\n            _context9.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'makeDirectoryAsync');\n\n        case 3:\n          _context9.next = 5;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.makeDirectoryAsync(fileUri, options));\n\n        case 5:\n          return _context9.abrupt(\"return\", _context9.sent);\n\n        case 6:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function readDirectoryAsync(fileUri) {\n  return _regeneratorRuntime.async(function readDirectoryAsync$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          if (ExponentFileSystem.readDirectoryAsync) {\n            _context10.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'readDirectoryAsync');\n\n        case 2:\n          _context10.next = 4;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.readDirectoryAsync(fileUri, {}));\n\n        case 4:\n          return _context10.abrupt(\"return\", _context10.sent);\n\n        case 5:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getFreeDiskStorageAsync() {\n  return _regeneratorRuntime.async(function getFreeDiskStorageAsync$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          if (ExponentFileSystem.getFreeDiskStorageAsync) {\n            _context11.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'getFreeDiskStorageAsync');\n\n        case 2:\n          _context11.next = 4;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.getFreeDiskStorageAsync());\n\n        case 4:\n          return _context11.abrupt(\"return\", _context11.sent);\n\n        case 5:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getTotalDiskCapacityAsync() {\n  return _regeneratorRuntime.async(function getTotalDiskCapacityAsync$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          if (ExponentFileSystem.getTotalDiskCapacityAsync) {\n            _context12.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'getTotalDiskCapacityAsync');\n\n        case 2:\n          _context12.next = 4;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.getTotalDiskCapacityAsync());\n\n        case 4:\n          return _context12.abrupt(\"return\", _context12.sent);\n\n        case 5:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function downloadAsync(uri, fileUri) {\n  var options,\n      _args13 = arguments;\n  return _regeneratorRuntime.async(function downloadAsync$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          options = _args13.length > 2 && _args13[2] !== undefined ? _args13[2] : {};\n\n          if (ExponentFileSystem.downloadAsync) {\n            _context13.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'downloadAsync');\n\n        case 3:\n          _context13.next = 5;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.downloadAsync(uri, fileUri, _objectSpread({\n            sessionType: FileSystemSessionType.BACKGROUND\n          }, options)));\n\n        case 5:\n          return _context13.abrupt(\"return\", _context13.sent);\n\n        case 6:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function uploadAsync(url, fileUri) {\n  var options,\n      _args14 = arguments;\n  return _regeneratorRuntime.async(function uploadAsync$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          options = _args14.length > 2 && _args14[2] !== undefined ? _args14[2] : {};\n\n          if (ExponentFileSystem.uploadAsync) {\n            _context14.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'uploadAsync');\n\n        case 3:\n          _context14.next = 5;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.uploadAsync(url, fileUri, _objectSpread(_objectSpread({\n            sessionType: FileSystemSessionType.BACKGROUND,\n            uploadType: FileSystemUploadType.BINARY_CONTENT\n          }, options), {}, {\n            httpMethod: (options.httpMethod || 'POST').toUpperCase()\n          })));\n\n        case 5:\n          return _context14.abrupt(\"return\", _context14.sent);\n\n        case 6:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function createDownloadResumable(uri, fileUri, options, callback, resumeData) {\n  return new DownloadResumable(uri, fileUri, options, callback, resumeData);\n}\nexport function createUploadTask(url, fileUri, options, callback) {\n  return new UploadTask(url, fileUri, options, callback);\n}\nexport var FileSystemCancellableNetworkTask = function () {\n  function FileSystemCancellableNetworkTask() {\n    _classCallCheck(this, FileSystemCancellableNetworkTask);\n\n    this._uuid = uuidv4();\n    this.taskWasCanceled = false;\n    this.emitter = new EventEmitter(ExponentFileSystem);\n  }\n\n  _createClass(FileSystemCancellableNetworkTask, [{\n    key: \"cancelAsync\",\n    value: function cancelAsync() {\n      return _regeneratorRuntime.async(function cancelAsync$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              if (ExponentFileSystem.networkTaskCancelAsync) {\n                _context15.next = 2;\n                break;\n              }\n\n              throw new UnavailabilityError('expo-file-system', 'networkTaskCancelAsync');\n\n            case 2:\n              this.removeSubscription();\n              this.taskWasCanceled = true;\n              _context15.next = 6;\n              return _regeneratorRuntime.awrap(ExponentFileSystem.networkTaskCancelAsync(this.uuid));\n\n            case 6:\n              return _context15.abrupt(\"return\", _context15.sent);\n\n            case 7:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"isTaskCancelled\",\n    value: function isTaskCancelled() {\n      if (this.taskWasCanceled) {\n        console.warn('This task was already canceled.');\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"uuid\",\n    get: function get() {\n      return this._uuid;\n    }\n  }, {\n    key: \"addSubscription\",\n    value: function addSubscription() {\n      var _this = this;\n\n      if (this.subscription) {\n        return;\n      }\n\n      this.subscription = this.emitter.addListener(this.getEventName(), function (event) {\n        if (event.uuid === _this.uuid) {\n          var callback = _this.getCallback();\n\n          if (callback) {\n            callback(event.data);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription() {\n      if (!this.subscription) {\n        return;\n      }\n\n      this.emitter.removeSubscription(this.subscription);\n      this.subscription = null;\n    }\n  }]);\n\n  return FileSystemCancellableNetworkTask;\n}();\nexport var UploadTask = function (_FileSystemCancellabl) {\n  _inherits(UploadTask, _FileSystemCancellabl);\n\n  var _super = _createSuper(UploadTask);\n\n  function UploadTask(url, fileUri, options, callback) {\n    var _options$httpMethod;\n\n    var _this2;\n\n    _classCallCheck(this, UploadTask);\n\n    _this2 = _super.call(this);\n    _this2.url = url;\n    _this2.fileUri = fileUri;\n    _this2.callback = callback;\n    var httpMethod = (options == null ? void 0 : (_options$httpMethod = options.httpMethod) == null ? void 0 : _options$httpMethod.toUpperCase()) || 'POST';\n    _this2.options = _objectSpread(_objectSpread({\n      sessionType: FileSystemSessionType.BACKGROUND,\n      uploadType: FileSystemUploadType.BINARY_CONTENT\n    }, options), {}, {\n      httpMethod: httpMethod\n    });\n    return _this2;\n  }\n\n  _createClass(UploadTask, [{\n    key: \"getEventName\",\n    value: function getEventName() {\n      return 'expo-file-system.uploadProgress';\n    }\n  }, {\n    key: \"getCallback\",\n    value: function getCallback() {\n      return this.callback;\n    }\n  }, {\n    key: \"uploadAsync\",\n    value: function uploadAsync() {\n      var result;\n      return _regeneratorRuntime.async(function uploadAsync$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              if (ExponentFileSystem.uploadTaskStartAsync) {\n                _context16.next = 2;\n                break;\n              }\n\n              throw new UnavailabilityError('expo-file-system', 'uploadTaskStartAsync');\n\n            case 2:\n              if (!this.isTaskCancelled()) {\n                _context16.next = 4;\n                break;\n              }\n\n              return _context16.abrupt(\"return\");\n\n            case 4:\n              this.addSubscription();\n              _context16.next = 7;\n              return _regeneratorRuntime.awrap(ExponentFileSystem.uploadTaskStartAsync(this.url, this.fileUri, this.uuid, this.options));\n\n            case 7:\n              result = _context16.sent;\n              this.removeSubscription();\n              return _context16.abrupt(\"return\", result);\n\n            case 10:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return UploadTask;\n}(FileSystemCancellableNetworkTask);\nexport var DownloadResumable = function (_FileSystemCancellabl2) {\n  _inherits(DownloadResumable, _FileSystemCancellabl2);\n\n  var _super2 = _createSuper(DownloadResumable);\n\n  function DownloadResumable(url, _fileUri) {\n    var _this3;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var callback = arguments.length > 3 ? arguments[3] : undefined;\n    var resumeData = arguments.length > 4 ? arguments[4] : undefined;\n\n    _classCallCheck(this, DownloadResumable);\n\n    _this3 = _super2.call(this);\n    _this3.url = url;\n    _this3._fileUri = _fileUri;\n    _this3.options = options;\n    _this3.callback = callback;\n    _this3.resumeData = resumeData;\n    return _this3;\n  }\n\n  _createClass(DownloadResumable, [{\n    key: \"fileUri\",\n    get: function get() {\n      return this._fileUri;\n    }\n  }, {\n    key: \"getEventName\",\n    value: function getEventName() {\n      return 'expo-file-system.downloadProgress';\n    }\n  }, {\n    key: \"getCallback\",\n    value: function getCallback() {\n      return this.callback;\n    }\n  }, {\n    key: \"downloadAsync\",\n    value: function downloadAsync() {\n      return _regeneratorRuntime.async(function downloadAsync$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              if (ExponentFileSystem.downloadResumableStartAsync) {\n                _context17.next = 2;\n                break;\n              }\n\n              throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n\n            case 2:\n              if (!this.isTaskCancelled()) {\n                _context17.next = 4;\n                break;\n              }\n\n              return _context17.abrupt(\"return\");\n\n            case 4:\n              this.addSubscription();\n              _context17.next = 7;\n              return _regeneratorRuntime.awrap(ExponentFileSystem.downloadResumableStartAsync(this.url, this._fileUri, this.uuid, this.options, this.resumeData));\n\n            case 7:\n              return _context17.abrupt(\"return\", _context17.sent);\n\n            case 8:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"pauseAsync\",\n    value: function pauseAsync() {\n      var pauseResult;\n      return _regeneratorRuntime.async(function pauseAsync$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n              if (ExponentFileSystem.downloadResumablePauseAsync) {\n                _context18.next = 2;\n                break;\n              }\n\n              throw new UnavailabilityError('expo-file-system', 'downloadResumablePauseAsync');\n\n            case 2:\n              if (!this.isTaskCancelled()) {\n                _context18.next = 4;\n                break;\n              }\n\n              return _context18.abrupt(\"return\", {\n                fileUri: this._fileUri,\n                options: this.options,\n                url: this.url\n              });\n\n            case 4:\n              _context18.next = 6;\n              return _regeneratorRuntime.awrap(ExponentFileSystem.downloadResumablePauseAsync(this.uuid));\n\n            case 6:\n              pauseResult = _context18.sent;\n              this.removeSubscription();\n\n              if (!pauseResult) {\n                _context18.next = 13;\n                break;\n              }\n\n              this.resumeData = pauseResult.resumeData;\n              return _context18.abrupt(\"return\", this.savable());\n\n            case 13:\n              throw new Error('Unable to generate a savable pause state');\n\n            case 14:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"resumeAsync\",\n    value: function resumeAsync() {\n      return _regeneratorRuntime.async(function resumeAsync$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              if (ExponentFileSystem.downloadResumableStartAsync) {\n                _context19.next = 2;\n                break;\n              }\n\n              throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n\n            case 2:\n              if (!this.isTaskCancelled()) {\n                _context19.next = 4;\n                break;\n              }\n\n              return _context19.abrupt(\"return\");\n\n            case 4:\n              this.addSubscription();\n              _context19.next = 7;\n              return _regeneratorRuntime.awrap(ExponentFileSystem.downloadResumableStartAsync(this.url, this.fileUri, this.uuid, this.options, this.resumeData));\n\n            case 7:\n              return _context19.abrupt(\"return\", _context19.sent);\n\n            case 8:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"savable\",\n    value: function savable() {\n      return {\n        url: this.url,\n        fileUri: this.fileUri,\n        options: this.options,\n        resumeData: this.resumeData\n      };\n    }\n  }]);\n\n  return DownloadResumable;\n}(FileSystemCancellableNetworkTask);\nvar baseReadAsStringAsync = readAsStringAsync;\nvar baseWriteAsStringAsync = writeAsStringAsync;\nvar baseDeleteAsync = deleteAsync;\nvar baseMoveAsync = moveAsync;\nvar baseCopyAsync = copyAsync;\nexport var StorageAccessFramework;\n\n(function (StorageAccessFramework) {\n  function getUriForDirectoryInRoot(folderName) {\n    return \"content://com.android.externalstorage.documents/tree/primary:\" + folderName + \"/document/primary:\" + folderName;\n  }\n\n  StorageAccessFramework.getUriForDirectoryInRoot = getUriForDirectoryInRoot;\n\n  function requestDirectoryPermissionsAsync() {\n    var initialFileUrl,\n        _args20 = arguments;\n    return _regeneratorRuntime.async(function requestDirectoryPermissionsAsync$(_context20) {\n      while (1) {\n        switch (_context20.prev = _context20.next) {\n          case 0:\n            initialFileUrl = _args20.length > 0 && _args20[0] !== undefined ? _args20[0] : null;\n\n            if (ExponentFileSystem.requestDirectoryPermissionsAsync) {\n              _context20.next = 3;\n              break;\n            }\n\n            throw new UnavailabilityError('expo-file-system', 'StorageAccessFramework.requestDirectoryPermissionsAsync');\n\n          case 3:\n            _context20.next = 5;\n            return _regeneratorRuntime.awrap(ExponentFileSystem.requestDirectoryPermissionsAsync(initialFileUrl));\n\n          case 5:\n            return _context20.abrupt(\"return\", _context20.sent);\n\n          case 6:\n          case \"end\":\n            return _context20.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  StorageAccessFramework.requestDirectoryPermissionsAsync = requestDirectoryPermissionsAsync;\n\n  function readDirectoryAsync(dirUri) {\n    return _regeneratorRuntime.async(function readDirectoryAsync$(_context21) {\n      while (1) {\n        switch (_context21.prev = _context21.next) {\n          case 0:\n            if (ExponentFileSystem.readSAFDirectoryAsync) {\n              _context21.next = 2;\n              break;\n            }\n\n            throw new UnavailabilityError('expo-file-system', 'StorageAccessFramework.readDirectoryAsync');\n\n          case 2:\n            _context21.next = 4;\n            return _regeneratorRuntime.awrap(ExponentFileSystem.readSAFDirectoryAsync(dirUri, {}));\n\n          case 4:\n            return _context21.abrupt(\"return\", _context21.sent);\n\n          case 5:\n          case \"end\":\n            return _context21.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  StorageAccessFramework.readDirectoryAsync = readDirectoryAsync;\n\n  function makeDirectoryAsync(parentUri, dirName) {\n    return _regeneratorRuntime.async(function makeDirectoryAsync$(_context22) {\n      while (1) {\n        switch (_context22.prev = _context22.next) {\n          case 0:\n            if (ExponentFileSystem.makeSAFDirectoryAsync) {\n              _context22.next = 2;\n              break;\n            }\n\n            throw new UnavailabilityError('expo-file-system', 'StorageAccessFramework.makeDirectoryAsync');\n\n          case 2:\n            _context22.next = 4;\n            return _regeneratorRuntime.awrap(ExponentFileSystem.makeSAFDirectoryAsync(parentUri, dirName));\n\n          case 4:\n            return _context22.abrupt(\"return\", _context22.sent);\n\n          case 5:\n          case \"end\":\n            return _context22.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  StorageAccessFramework.makeDirectoryAsync = makeDirectoryAsync;\n\n  function createFileAsync(parentUri, fileName, mimeType) {\n    return _regeneratorRuntime.async(function createFileAsync$(_context23) {\n      while (1) {\n        switch (_context23.prev = _context23.next) {\n          case 0:\n            if (ExponentFileSystem.createSAFFileAsync) {\n              _context23.next = 2;\n              break;\n            }\n\n            throw new UnavailabilityError('expo-file-system', 'StorageAccessFramework.createFileAsync');\n\n          case 2:\n            _context23.next = 4;\n            return _regeneratorRuntime.awrap(ExponentFileSystem.createSAFFileAsync(parentUri, fileName, mimeType));\n\n          case 4:\n            return _context23.abrupt(\"return\", _context23.sent);\n\n          case 5:\n          case \"end\":\n            return _context23.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  StorageAccessFramework.createFileAsync = createFileAsync;\n  StorageAccessFramework.writeAsStringAsync = baseWriteAsStringAsync;\n  StorageAccessFramework.readAsStringAsync = baseReadAsStringAsync;\n  StorageAccessFramework.deleteAsync = baseDeleteAsync;\n  StorageAccessFramework.moveAsync = baseMoveAsync;\n  StorageAccessFramework.copyAsync = baseCopyAsync;\n})(StorageAccessFramework || (StorageAccessFramework = {}));","map":{"version":3,"mappings":"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","names":["EventEmitter","UnavailabilityError","v4","uuidv4","ExponentFileSystem","EncodingType","FileSystemSessionType","FileSystemUploadType","console","warn","_unused","normalizeEndingSlash","p","replace","documentDirectory","cacheDirectory","bundledAssets","bundleDirectory","getInfoAsync","fileUri","options","readAsStringAsync","getContentUriAsync","Platform","OS","Promise","resolve","reject","writeAsStringAsync","contents","deleteAsync","deleteLegacyDocumentDirectoryAndroid","legacyDocumentDirectory","idempotent","moveAsync","copyAsync","makeDirectoryAsync","readDirectoryAsync","getFreeDiskStorageAsync","getTotalDiskCapacityAsync","downloadAsync","uri","sessionType","BACKGROUND","uploadAsync","url","uploadType","BINARY_CONTENT","httpMethod","toUpperCase","createDownloadResumable","callback","resumeData","DownloadResumable","createUploadTask","UploadTask","FileSystemCancellableNetworkTask","_uuid","taskWasCanceled","emitter","networkTaskCancelAsync","removeSubscription","uuid","subscription","addListener","getEventName","event","getCallback","data","uploadTaskStartAsync","isTaskCancelled","addSubscription","result","_fileUri","downloadResumableStartAsync","downloadResumablePauseAsync","pauseResult","savable","Error","baseReadAsStringAsync","baseWriteAsStringAsync","baseDeleteAsync","baseMoveAsync","baseCopyAsync","StorageAccessFramework","getUriForDirectoryInRoot","folderName","requestDirectoryPermissionsAsync","initialFileUrl","dirUri","readSAFDirectoryAsync","parentUri","dirName","makeSAFDirectoryAsync","createFileAsync","fileName","mimeType","createSAFFileAsync"],"sourceRoot":"","sources":["../src/FileSystem.ts"],"sourcesContent":["import { EventEmitter, Subscription, UnavailabilityError } from 'expo-modules-core';\nimport { Platform } from 'react-native';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport ExponentFileSystem from './ExponentFileSystem';\nimport {\n  DownloadOptions,\n  DownloadPauseState,\n  DownloadProgressCallback,\n  FileSystemNetworkTaskProgressCallback,\n  DownloadProgressData,\n  UploadProgressData,\n  DownloadResult,\n  EncodingType,\n  FileInfo,\n  FileSystemAcceptedUploadHttpMethod,\n  FileSystemDownloadResult,\n  FileSystemRequestDirectoryPermissionsResult,\n  FileSystemSessionType,\n  FileSystemUploadOptions,\n  FileSystemUploadResult,\n  FileSystemUploadType,\n  ProgressEvent,\n  ReadingOptions,\n  WritingOptions,\n} from './FileSystem.types';\n\nif (!ExponentFileSystem) {\n  console.warn(\n    \"No native ExponentFileSystem module found, are you sure the expo-file-system's module is linked properly?\"\n  );\n}\n// Prevent webpack from pruning this.\nconst _unused = new EventEmitter(ExponentFileSystem); // eslint-disable-line\n\nexport {\n  DownloadOptions,\n  DownloadPauseState,\n  DownloadProgressCallback,\n  DownloadProgressData,\n  DownloadResult,\n  EncodingType,\n  FileInfo,\n  FileSystemDownloadResult,\n  FileSystemRequestDirectoryPermissionsResult,\n  FileSystemAcceptedUploadHttpMethod,\n  FileSystemSessionType,\n  FileSystemUploadOptions,\n  FileSystemUploadResult,\n  FileSystemUploadType,\n  FileSystemNetworkTaskProgressCallback,\n  ReadingOptions,\n  WritingOptions,\n};\n\nfunction normalizeEndingSlash(p: string | null): string | null {\n  if (p != null) {\n    return p.replace(/\\/*$/, '') + '/';\n  }\n  return null;\n}\n\nexport const documentDirectory = normalizeEndingSlash(ExponentFileSystem.documentDirectory);\nexport const cacheDirectory = normalizeEndingSlash(ExponentFileSystem.cacheDirectory);\n\nexport const { bundledAssets, bundleDirectory } = ExponentFileSystem;\n\nexport async function getInfoAsync(\n  fileUri: string,\n  options: { md5?: boolean; size?: boolean } = {}\n): Promise<FileInfo> {\n  if (!ExponentFileSystem.getInfoAsync) {\n    throw new UnavailabilityError('expo-file-system', 'getInfoAsync');\n  }\n  return await ExponentFileSystem.getInfoAsync(fileUri, options);\n}\n\nexport async function readAsStringAsync(\n  fileUri: string,\n  options?: ReadingOptions\n): Promise<string> {\n  if (!ExponentFileSystem.readAsStringAsync) {\n    throw new UnavailabilityError('expo-file-system', 'readAsStringAsync');\n  }\n  return await ExponentFileSystem.readAsStringAsync(fileUri, options || {});\n}\n\nexport async function getContentUriAsync(fileUri: string): Promise<string> {\n  if (Platform.OS === 'android') {\n    if (!ExponentFileSystem.getContentUriAsync) {\n      throw new UnavailabilityError('expo-file-system', 'getContentUriAsync');\n    }\n    return await ExponentFileSystem.getContentUriAsync(fileUri);\n  } else {\n    return new Promise(function (resolve, reject) {\n      resolve(fileUri);\n    });\n  }\n}\n\nexport async function writeAsStringAsync(\n  fileUri: string,\n  contents: string,\n  options: WritingOptions = {}\n): Promise<void> {\n  if (!ExponentFileSystem.writeAsStringAsync) {\n    throw new UnavailabilityError('expo-file-system', 'writeAsStringAsync');\n  }\n  return await ExponentFileSystem.writeAsStringAsync(fileUri, contents, options);\n}\n\nexport async function deleteAsync(\n  fileUri: string,\n  options: { idempotent?: boolean } = {}\n): Promise<void> {\n  if (!ExponentFileSystem.deleteAsync) {\n    throw new UnavailabilityError('expo-file-system', 'deleteAsync');\n  }\n  return await ExponentFileSystem.deleteAsync(fileUri, options);\n}\n\nexport async function deleteLegacyDocumentDirectoryAndroid(): Promise<void> {\n  if (Platform.OS !== 'android' || documentDirectory == null) {\n    return;\n  }\n  const legacyDocumentDirectory = `${documentDirectory}ExperienceData/`;\n  return await deleteAsync(legacyDocumentDirectory, { idempotent: true });\n}\n\nexport async function moveAsync(options: { from: string; to: string }): Promise<void> {\n  if (!ExponentFileSystem.moveAsync) {\n    throw new UnavailabilityError('expo-file-system', 'moveAsync');\n  }\n  return await ExponentFileSystem.moveAsync(options);\n}\n\nexport async function copyAsync(options: { from: string; to: string }): Promise<void> {\n  if (!ExponentFileSystem.copyAsync) {\n    throw new UnavailabilityError('expo-file-system', 'copyAsync');\n  }\n  return await ExponentFileSystem.copyAsync(options);\n}\n\nexport async function makeDirectoryAsync(\n  fileUri: string,\n  options: { intermediates?: boolean } = {}\n): Promise<void> {\n  if (!ExponentFileSystem.makeDirectoryAsync) {\n    throw new UnavailabilityError('expo-file-system', 'makeDirectoryAsync');\n  }\n  return await ExponentFileSystem.makeDirectoryAsync(fileUri, options);\n}\n\nexport async function readDirectoryAsync(fileUri: string): Promise<string[]> {\n  if (!ExponentFileSystem.readDirectoryAsync) {\n    throw new UnavailabilityError('expo-file-system', 'readDirectoryAsync');\n  }\n  return await ExponentFileSystem.readDirectoryAsync(fileUri, {});\n}\n\nexport async function getFreeDiskStorageAsync(): Promise<number> {\n  if (!ExponentFileSystem.getFreeDiskStorageAsync) {\n    throw new UnavailabilityError('expo-file-system', 'getFreeDiskStorageAsync');\n  }\n  return await ExponentFileSystem.getFreeDiskStorageAsync();\n}\n\nexport async function getTotalDiskCapacityAsync(): Promise<number> {\n  if (!ExponentFileSystem.getTotalDiskCapacityAsync) {\n    throw new UnavailabilityError('expo-file-system', 'getTotalDiskCapacityAsync');\n  }\n  return await ExponentFileSystem.getTotalDiskCapacityAsync();\n}\n\nexport async function downloadAsync(\n  uri: string,\n  fileUri: string,\n  options: DownloadOptions = {}\n): Promise<FileSystemDownloadResult> {\n  if (!ExponentFileSystem.downloadAsync) {\n    throw new UnavailabilityError('expo-file-system', 'downloadAsync');\n  }\n\n  return await ExponentFileSystem.downloadAsync(uri, fileUri, {\n    sessionType: FileSystemSessionType.BACKGROUND,\n    ...options,\n  });\n}\n\nexport async function uploadAsync(\n  url: string,\n  fileUri: string,\n  options: FileSystemUploadOptions = {}\n): Promise<FileSystemUploadResult> {\n  if (!ExponentFileSystem.uploadAsync) {\n    throw new UnavailabilityError('expo-file-system', 'uploadAsync');\n  }\n\n  return await ExponentFileSystem.uploadAsync(url, fileUri, {\n    sessionType: FileSystemSessionType.BACKGROUND,\n    uploadType: FileSystemUploadType.BINARY_CONTENT,\n    ...options,\n    httpMethod: (options.httpMethod || 'POST').toUpperCase(),\n  });\n}\n\nexport function createDownloadResumable(\n  uri: string,\n  fileUri: string,\n  options?: DownloadOptions,\n  callback?: FileSystemNetworkTaskProgressCallback<DownloadProgressData>,\n  resumeData?: string\n): DownloadResumable {\n  return new DownloadResumable(uri, fileUri, options, callback, resumeData);\n}\n\nexport function createUploadTask(\n  url: string,\n  fileUri: string,\n  options?: FileSystemUploadOptions,\n  callback?: FileSystemNetworkTaskProgressCallback<UploadProgressData>\n): UploadTask {\n  return new UploadTask(url, fileUri, options, callback);\n}\n\nexport abstract class FileSystemCancellableNetworkTask<\n  T extends DownloadProgressData | UploadProgressData\n> {\n  private _uuid = uuidv4();\n  protected taskWasCanceled = false;\n  private emitter = new EventEmitter(ExponentFileSystem);\n  private subscription?: Subscription | null;\n\n  public async cancelAsync(): Promise<void> {\n    if (!ExponentFileSystem.networkTaskCancelAsync) {\n      throw new UnavailabilityError('expo-file-system', 'networkTaskCancelAsync');\n    }\n\n    this.removeSubscription();\n    this.taskWasCanceled = true;\n    return await ExponentFileSystem.networkTaskCancelAsync(this.uuid);\n  }\n\n  protected isTaskCancelled(): boolean {\n    if (this.taskWasCanceled) {\n      console.warn('This task was already canceled.');\n      return true;\n    }\n\n    return false;\n  }\n\n  protected get uuid(): string {\n    return this._uuid;\n  }\n\n  protected abstract getEventName(): string;\n\n  protected abstract getCallback(): FileSystemNetworkTaskProgressCallback<T> | undefined;\n\n  protected addSubscription() {\n    if (this.subscription) {\n      return;\n    }\n\n    this.subscription = this.emitter.addListener(this.getEventName(), (event: ProgressEvent<T>) => {\n      if (event.uuid === this.uuid) {\n        const callback = this.getCallback();\n        if (callback) {\n          callback(event.data);\n        }\n      }\n    });\n  }\n\n  protected removeSubscription() {\n    if (!this.subscription) {\n      return;\n    }\n    this.emitter.removeSubscription(this.subscription);\n    this.subscription = null;\n  }\n}\n\nexport class UploadTask extends FileSystemCancellableNetworkTask<UploadProgressData> {\n  private options: FileSystemUploadOptions;\n\n  constructor(\n    private url: string,\n    private fileUri: string,\n    options?: FileSystemUploadOptions,\n    private callback?: FileSystemNetworkTaskProgressCallback<UploadProgressData>\n  ) {\n    super();\n\n    const httpMethod = (options?.httpMethod?.toUpperCase() ||\n      'POST') as FileSystemAcceptedUploadHttpMethod;\n\n    this.options = {\n      sessionType: FileSystemSessionType.BACKGROUND,\n      uploadType: FileSystemUploadType.BINARY_CONTENT,\n      ...options,\n      httpMethod,\n    };\n  }\n\n  protected getEventName(): string {\n    return 'expo-file-system.uploadProgress';\n  }\n  protected getCallback(): FileSystemNetworkTaskProgressCallback<UploadProgressData> | undefined {\n    return this.callback;\n  }\n\n  public async uploadAsync(): Promise<FileSystemUploadResult | undefined> {\n    if (!ExponentFileSystem.uploadTaskStartAsync) {\n      throw new UnavailabilityError('expo-file-system', 'uploadTaskStartAsync');\n    }\n\n    if (this.isTaskCancelled()) {\n      return;\n    }\n\n    this.addSubscription();\n    const result = await ExponentFileSystem.uploadTaskStartAsync(\n      this.url,\n      this.fileUri,\n      this.uuid,\n      this.options\n    );\n    this.removeSubscription();\n\n    return result;\n  }\n}\n\nexport class DownloadResumable extends FileSystemCancellableNetworkTask<DownloadProgressData> {\n  constructor(\n    private url: string,\n    private _fileUri: string,\n    private options: DownloadOptions = {},\n    private callback?: FileSystemNetworkTaskProgressCallback<DownloadProgressData>,\n    private resumeData?: string\n  ) {\n    super();\n  }\n\n  public get fileUri(): string {\n    return this._fileUri;\n  }\n\n  protected getEventName(): string {\n    return 'expo-file-system.downloadProgress';\n  }\n\n  protected getCallback(): FileSystemNetworkTaskProgressCallback<DownloadProgressData> | undefined {\n    return this.callback;\n  }\n\n  async downloadAsync(): Promise<FileSystemDownloadResult | undefined> {\n    if (!ExponentFileSystem.downloadResumableStartAsync) {\n      throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n    }\n\n    if (this.isTaskCancelled()) {\n      return;\n    }\n\n    this.addSubscription();\n    return await ExponentFileSystem.downloadResumableStartAsync(\n      this.url,\n      this._fileUri,\n      this.uuid,\n      this.options,\n      this.resumeData\n    );\n  }\n\n  async pauseAsync(): Promise<DownloadPauseState> {\n    if (!ExponentFileSystem.downloadResumablePauseAsync) {\n      throw new UnavailabilityError('expo-file-system', 'downloadResumablePauseAsync');\n    }\n\n    if (this.isTaskCancelled()) {\n      return {\n        fileUri: this._fileUri,\n        options: this.options,\n        url: this.url,\n      };\n    }\n\n    const pauseResult = await ExponentFileSystem.downloadResumablePauseAsync(this.uuid);\n    this.removeSubscription();\n    if (pauseResult) {\n      this.resumeData = pauseResult.resumeData;\n      return this.savable();\n    } else {\n      throw new Error('Unable to generate a savable pause state');\n    }\n  }\n\n  async resumeAsync(): Promise<FileSystemDownloadResult | undefined> {\n    if (!ExponentFileSystem.downloadResumableStartAsync) {\n      throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n    }\n\n    if (this.isTaskCancelled()) {\n      return;\n    }\n\n    this.addSubscription();\n    return await ExponentFileSystem.downloadResumableStartAsync(\n      this.url,\n      this.fileUri,\n      this.uuid,\n      this.options,\n      this.resumeData\n    );\n  }\n\n  savable(): DownloadPauseState {\n    return {\n      url: this.url,\n      fileUri: this.fileUri,\n      options: this.options,\n      resumeData: this.resumeData,\n    };\n  }\n}\n\nconst baseReadAsStringAsync = readAsStringAsync;\nconst baseWriteAsStringAsync = writeAsStringAsync;\nconst baseDeleteAsync = deleteAsync;\nconst baseMoveAsync = moveAsync;\nconst baseCopyAsync = copyAsync;\n/**\n * Android only\n */\nexport namespace StorageAccessFramework {\n  export function getUriForDirectoryInRoot(folderName: string) {\n    return `content://com.android.externalstorage.documents/tree/primary:${folderName}/document/primary:${folderName}`;\n  }\n\n  export async function requestDirectoryPermissionsAsync(\n    initialFileUrl: string | null = null\n  ): Promise<FileSystemRequestDirectoryPermissionsResult> {\n    if (!ExponentFileSystem.requestDirectoryPermissionsAsync) {\n      throw new UnavailabilityError(\n        'expo-file-system',\n        'StorageAccessFramework.requestDirectoryPermissionsAsync'\n      );\n    }\n\n    return await ExponentFileSystem.requestDirectoryPermissionsAsync(initialFileUrl);\n  }\n\n  export async function readDirectoryAsync(dirUri: string): Promise<string[]> {\n    if (!ExponentFileSystem.readSAFDirectoryAsync) {\n      throw new UnavailabilityError(\n        'expo-file-system',\n        'StorageAccessFramework.readDirectoryAsync'\n      );\n    }\n    return await ExponentFileSystem.readSAFDirectoryAsync(dirUri, {});\n  }\n\n  export async function makeDirectoryAsync(parentUri: string, dirName: string): Promise<string> {\n    if (!ExponentFileSystem.makeSAFDirectoryAsync) {\n      throw new UnavailabilityError(\n        'expo-file-system',\n        'StorageAccessFramework.makeDirectoryAsync'\n      );\n    }\n    return await ExponentFileSystem.makeSAFDirectoryAsync(parentUri, dirName);\n  }\n\n  export async function createFileAsync(\n    parentUri: string,\n    fileName: string,\n    mimeType: string\n  ): Promise<string> {\n    if (!ExponentFileSystem.createSAFFileAsync) {\n      throw new UnavailabilityError('expo-file-system', 'StorageAccessFramework.createFileAsync');\n    }\n    return await ExponentFileSystem.createSAFFileAsync(parentUri, fileName, mimeType);\n  }\n\n  export const writeAsStringAsync = baseWriteAsStringAsync;\n  export const readAsStringAsync = baseReadAsStringAsync;\n  export const deleteAsync = baseDeleteAsync;\n  export const moveAsync = baseMoveAsync;\n  export const copyAsync = baseCopyAsync;\n}\n"]},"metadata":{},"sourceType":"module"}