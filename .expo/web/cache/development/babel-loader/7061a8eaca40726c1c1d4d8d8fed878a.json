{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { styles } from \"../styles/styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function ButtonP(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var mounted = true;\n\n  var onPressButton = function onPressButton() {\n    return _regeneratorRuntime.async(function onPressButton$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setLoading(true);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(props.onPress(callback));\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var callback = function callback() {\n    return _regeneratorRuntime.async(function callback$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            setLoading(false);\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (isLoading) {\n    return _jsx(ActivityIndicator, {\n      size: \"large\",\n      color: \"#0174DF\"\n    });\n  } else {\n    return _jsx(Button, {\n      styles: styles.buttonP,\n      title: props.title,\n      onPress: onPressButton\n    });\n  }\n}\nexport function ButtonG(props) {\n  return _jsx(TouchableOpacity, {\n    onPress: props.onPress,\n    children: _jsx(View, {\n      style: styles.buttonView,\n      children: _jsx(Text, {\n        style: styles.buttonG,\n        children: props.title\n      })\n    })\n  });\n}\nexport function ButtonAnteriorPOD(props) {\n  return _jsx(TouchableOpacity, {\n    onPress: props.onPress,\n    children: _jsx(View, {\n      style: styles.buttonAnteriorPOD,\n      children: _jsx(Text, {\n        style: styles.buttonG,\n        children: props.title\n      })\n    })\n  });\n}\nexport function ButtonPosteriorPOD(props) {\n  return _jsx(TouchableOpacity, {\n    onPress: props.onPress,\n    children: _jsx(View, {\n      style: styles.buttonPosteriorPOD,\n      children: _jsx(Text, {\n        style: styles.buttonG,\n        children: props.title\n      })\n    })\n  });\n}","map":{"version":3,"sources":["C:/RepositorioTech/AppSGO-main/components/Button.js"],"names":["React","useState","styles","ButtonP","props","isLoading","setLoading","mounted","onPressButton","onPress","callback","buttonP","title","ButtonG","buttonView","buttonG","ButtonAnteriorPOD","buttonAnteriorPOD","ButtonPosteriorPOD","buttonPosteriorPOD"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;;AAEA,SAASC,MAAT;;AAEA,OAAO,SAASC,OAAT,CAAkBC,KAAlB,EAAyB;AAC/B,kBAAgCH,QAAQ,CAAC,KAAD,CAAxC;AAAA;AAAA,MAAOI,SAAP;AAAA,MAAkBC,UAAlB;;AACG,MAAIC,OAAO,GAAG,IAAd;;AAEH,MAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA;AAAA;AAAA;AAAA;AACrBF,YAAAA,UAAU,CAAC,IAAD,CAAV;AADqB;AAAA,6CAEfF,KAAK,CAACK,OAAN,CAAcC,QAAd,CAFe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAKG,MAAMA,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA;AAAA;AAAA;AACbJ,YAAAA,UAAU,CAAC,KAAD,CAAV;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAIH,MAAGD,SAAH,EAAa;AACZ,WACO,KAAC,iBAAD;AAAmB,MAAA,IAAI,EAAC,OAAxB;AAAgC,MAAA,KAAK,EAAC;AAAtC,MADP;AAGG,GAJJ,MAIU;AACN,WACI,KAAC,MAAD;AAAQ,MAAA,MAAM,EAAEH,MAAM,CAACS,OAAvB;AAAgC,MAAA,KAAK,EAAEP,KAAK,CAACQ,KAA7C;AAAoD,MAAA,OAAO,EAAEJ;AAA7D,MADJ;AAGA;AACJ;AAED,OAAO,SAASK,OAAT,CAAkBT,KAAlB,EAAyB;AAC/B,SACI,KAAC,gBAAD;AAAkB,IAAA,OAAO,EAAEA,KAAK,CAACK,OAAjC;AAAA,cACC,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEP,MAAM,CAACY,UAApB;AAAA,gBACC,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEZ,MAAM,CAACa,OAApB;AAAA,kBAA8BX,KAAK,CAACQ;AAApC;AADD;AADD,IADJ;AAOA;AAED,OAAO,SAASI,iBAAT,CAA4BZ,KAA5B,EAAmC;AACzC,SACI,KAAC,gBAAD;AAAkB,IAAA,OAAO,EAAEA,KAAK,CAACK,OAAjC;AAAA,cACC,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEP,MAAM,CAACe,iBAApB;AAAA,gBACC,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEf,MAAM,CAACa,OAApB;AAAA,kBAA8BX,KAAK,CAACQ;AAApC;AADD;AADD,IADJ;AAOA;AAED,OAAO,SAASM,kBAAT,CAA6Bd,KAA7B,EAAoC;AAC1C,SACI,KAAC,gBAAD;AAAkB,IAAA,OAAO,EAAEA,KAAK,CAACK,OAAjC;AAAA,cACC,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEP,MAAM,CAACiB,kBAApB;AAAA,gBACC,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEjB,MAAM,CAACa,OAApB;AAAA,kBAA8BX,KAAK,CAACQ;AAApC;AADD;AADD,IADJ;AAOA","sourcesContent":["import React, { useState } from 'react';\nimport { Text, View, Button, TouchableOpacity, ActivityIndicator } from 'react-native';\nimport { styles } from '../styles/styles';\n\nexport function ButtonP (props) {\n\tconst [isLoading, setLoading] = useState(false);\n    let mounted = true;\n\n\tconst onPressButton = async () => {\n\t\tsetLoading(true);\n\t\tawait props.onPress(callback);\n    };\n\n    const callback = async () => {\n        setLoading(false);\n    }\n\n\tif(isLoading){\n\t\treturn (\n    \t    <ActivityIndicator size=\"large\" color=\"#0174DF\" />\n    \t);\n    } else {\n    \treturn (\n    \t    <Button styles={styles.buttonP} title={props.title} onPress={onPressButton} />\n    \t);\n    }\n}\n\nexport function ButtonG (props) {\n\treturn (\n    \t<TouchableOpacity onPress={props.onPress}>\n    \t\t<View style={styles.buttonView}>\n    \t\t\t<Text style={styles.buttonG}>{props.title}</Text>\n    \t\t</View>\n    \t</TouchableOpacity>\n    );\n}\n\nexport function ButtonAnteriorPOD (props) {\n\treturn (\n    \t<TouchableOpacity onPress={props.onPress}>\n    \t\t<View style={styles.buttonAnteriorPOD}>\n    \t\t\t<Text style={styles.buttonG}>{props.title}</Text>\n    \t\t</View>\n    \t</TouchableOpacity>\n    );\n}\n\nexport function ButtonPosteriorPOD (props) {\n\treturn (\n    \t<TouchableOpacity onPress={props.onPress}>\n    \t\t<View style={styles.buttonPosteriorPOD}>\n    \t\t\t<Text style={styles.buttonG}>{props.title}</Text>\n    \t\t</View>\n    \t</TouchableOpacity>\n    );\n}"]},"metadata":{},"sourceType":"module"}