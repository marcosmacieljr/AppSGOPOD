{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { ViewPropTypes as RNViewPropTypes } from \"react-native-web/dist/index\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ViewPropTypes = RNViewPropTypes || View.propTypes;\n\nvar Autocomplete = function (_Component) {\n  _inherits(Autocomplete, _Component);\n\n  var _super = _createSuper(Autocomplete);\n\n  function Autocomplete(props) {\n    var _this;\n\n    _classCallCheck(this, Autocomplete);\n\n    _this = _super.call(this, props);\n    _this.resultList = null;\n    _this.textInput = null;\n    _this.onRefListView = _this.onRefListView.bind(_assertThisInitialized(_this));\n    _this.onRefTextInput = _this.onRefTextInput.bind(_assertThisInitialized(_this));\n    _this.onEndEditing = _this.onEndEditing.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Autocomplete, [{\n    key: \"onEndEditing\",\n    value: function onEndEditing(e) {\n      this.props.onEndEditing && this.props.onEndEditing(e);\n    }\n  }, {\n    key: \"onRefListView\",\n    value: function onRefListView(resultList) {\n      this.resultList = resultList;\n    }\n  }, {\n    key: \"onRefTextInput\",\n    value: function onRefTextInput(textInput) {\n      this.textInput = textInput;\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      var textInput = this.textInput;\n      textInput && textInput.blur();\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      var textInput = this.textInput;\n      textInput && textInput.focus();\n    }\n  }, {\n    key: \"isFocused\",\n    value: function isFocused() {\n      var textInput = this.textInput;\n      return textInput && textInput.isFocused();\n    }\n  }, {\n    key: \"renderResultList\",\n    value: function renderResultList() {\n      var _this$props = this.props,\n          data = _this$props.data,\n          listStyle = _this$props.listStyle,\n          renderItem = _this$props.renderItem,\n          keyExtractor = _this$props.keyExtractor,\n          renderSeparator = _this$props.renderSeparator,\n          keyboardShouldPersistTaps = _this$props.keyboardShouldPersistTaps,\n          flatListProps = _this$props.flatListProps,\n          onEndReached = _this$props.onEndReached,\n          onEndReachedThreshold = _this$props.onEndReachedThreshold;\n      return _jsx(FlatList, _objectSpread({\n        ref: this.onRefListView,\n        data: data,\n        keyboardShouldPersistTaps: keyboardShouldPersistTaps,\n        renderItem: renderItem,\n        keyExtractor: keyExtractor,\n        renderSeparator: renderSeparator,\n        onEndReached: onEndReached,\n        onEndReachedThreshold: onEndReachedThreshold,\n        style: [styles.list, listStyle]\n      }, flatListProps));\n    }\n  }, {\n    key: \"renderTextInput\",\n    value: function renderTextInput() {\n      var _this$props2 = this.props,\n          renderTextInput = _this$props2.renderTextInput,\n          style = _this$props2.style;\n\n      var props = _objectSpread({\n        style: [styles.input, style],\n        ref: this.onRefTextInput,\n        onEndEditing: this.onEndEditing\n      }, this.props);\n\n      return renderTextInput(props);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          data = _this$props3.data,\n          containerStyle = _this$props3.containerStyle,\n          hideResults = _this$props3.hideResults,\n          inputContainerStyle = _this$props3.inputContainerStyle,\n          listContainerStyle = _this$props3.listContainerStyle,\n          onShowResults = _this$props3.onShowResults,\n          onStartShouldSetResponderCapture = _this$props3.onStartShouldSetResponderCapture;\n      var showResults = data.length > 0;\n      onShowResults && onShowResults(showResults);\n      return _jsxs(View, {\n        style: [styles.container, containerStyle],\n        children: [_jsx(View, {\n          style: [styles.inputContainer, inputContainerStyle],\n          children: this.renderTextInput()\n        }), !hideResults && _jsx(View, {\n          style: listContainerStyle,\n          onStartShouldSetResponderCapture: onStartShouldSetResponderCapture,\n          children: showResults && this.renderResultList()\n        })]\n      });\n    }\n  }]);\n\n  return Autocomplete;\n}(Component);\n\nAutocomplete.propTypes = _objectSpread(_objectSpread({}, TextInput.propTypes), {}, {\n  containerStyle: ViewPropTypes.style,\n  data: PropTypes.array,\n  hideResults: PropTypes.bool,\n  inputContainerStyle: ViewPropTypes.style,\n  keyboardShouldPersistTaps: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  listContainerStyle: ViewPropTypes.style,\n  listStyle: ViewPropTypes.style,\n  onShowResults: PropTypes.func,\n  onStartShouldSetResponderCapture: PropTypes.func,\n  renderItem: PropTypes.func,\n  keyExtractor: PropTypes.func,\n  renderSeparator: PropTypes.func,\n  renderTextInput: PropTypes.func,\n  flatListProps: PropTypes.object\n});\nAutocomplete.defaultProps = {\n  data: [],\n  keyboardShouldPersistTaps: 'always',\n  onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture() {\n    return false;\n  },\n  renderItem: function renderItem(_ref) {\n    var item = _ref.item;\n    return _jsx(Text, {\n      children: item\n    });\n  },\n  renderSeparator: null,\n  renderTextInput: function renderTextInput(props) {\n    return _jsx(TextInput, _objectSpread({}, props));\n  },\n  flatListProps: {}\n};\nvar border = {\n  borderColor: '#b9b9b9',\n  borderRadius: 1,\n  borderWidth: 1\n};\nvar androidStyles = {\n  container: {\n    flex: 1\n  },\n  inputContainer: _objectSpread(_objectSpread({}, border), {}, {\n    marginBottom: 0\n  }),\n  list: _objectSpread(_objectSpread({}, border), {}, {\n    backgroundColor: 'white',\n    borderTopWidth: 0,\n    margin: 10,\n    marginTop: 0\n  })\n};\nvar iosStyles = {\n  container: {\n    zIndex: 1\n  },\n  inputContainer: _objectSpread({}, border),\n  input: {\n    backgroundColor: 'white',\n    height: 40,\n    paddingLeft: 3\n  },\n  list: _objectSpread(_objectSpread({}, border), {}, {\n    backgroundColor: 'white',\n    borderTopWidth: 0,\n    left: 0,\n    position: 'absolute',\n    right: 0\n  })\n};\nvar styles = StyleSheet.create(_objectSpread({\n  input: {\n    backgroundColor: 'white',\n    height: 40,\n    paddingLeft: 3\n  }\n}, Platform.select({\n  android: _objectSpread({}, androidStyles),\n  ios: _objectSpread({}, iosStyles)\n})));\nexport default Autocomplete;","map":{"version":3,"sources":["C:/RepositorioAPPSGO/APP-main/node_modules/react-native-autocomplete-input/index.js"],"names":["React","Component","PropTypes","ViewPropTypes","RNViewPropTypes","View","propTypes","Autocomplete","props","resultList","textInput","onRefListView","bind","onRefTextInput","onEndEditing","e","blur","focus","isFocused","data","listStyle","renderItem","keyExtractor","renderSeparator","keyboardShouldPersistTaps","flatListProps","onEndReached","onEndReachedThreshold","styles","list","renderTextInput","style","input","ref","containerStyle","hideResults","inputContainerStyle","listContainerStyle","onShowResults","onStartShouldSetResponderCapture","showResults","length","container","inputContainer","renderResultList","TextInput","array","bool","oneOfType","string","func","object","defaultProps","item","border","borderColor","borderRadius","borderWidth","androidStyles","flex","marginBottom","backgroundColor","borderTopWidth","margin","marginTop","iosStyles","zIndex","height","paddingLeft","left","position","right","StyleSheet","create","Platform","select","android","ios"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  FlatList,\n  Platform,\n  StyleSheet,\n  Text,\n  TextInput,\n  View,\n  ViewPropTypes as RNViewPropTypes\n} from 'react-native';\n\n// Keep this line for downwards compatibility with RN.\n// eslint-disable-next-line react/forbid-foreign-prop-types\nconst ViewPropTypes = RNViewPropTypes || View.propTypes;\n\nclass Autocomplete extends Component {\n  static propTypes = {\n    ...TextInput.propTypes,\n    /**\n     * These styles will be applied to the container which\n     * surrounds the autocomplete component.\n     */\n    containerStyle: ViewPropTypes.style,\n    /**\n     * Assign an array of data objects which should be\n     * rendered in respect to the entered text.\n     */\n    data: PropTypes.array,\n    /**\n     * Set to `true` to hide the suggestion list.\n     */\n    hideResults: PropTypes.bool,\n    /*\n     * These styles will be applied to the container which surrounds\n     * the textInput component.\n     */\n    inputContainerStyle: ViewPropTypes.style,\n    /*\n     * Set `keyboardShouldPersistTaps` to true if RN version is <= 0.39.\n     */\n    keyboardShouldPersistTaps: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool\n    ]),\n    /*\n     * These styles will be applied to the container which surrounds\n     * the result list.\n     */\n    listContainerStyle: ViewPropTypes.style,\n    /**\n     * These style will be applied to the result list.\n     */\n    listStyle: ViewPropTypes.style,\n    /**\n     * `onShowResults` will be called when list is going to\n     * show/hide results.\n     */\n    onShowResults: PropTypes.func,\n    /**\n     * method for intercepting swipe on ListView. Used for ScrollView support on Android\n     */\n    onStartShouldSetResponderCapture: PropTypes.func,\n    /**\n     * `renderItem` will be called to render the data objects\n     * which will be displayed in the result view below the\n     * text input.\n     */\n    renderItem: PropTypes.func,\n    keyExtractor: PropTypes.func,\n    /**\n     * `renderSeparator` will be called to render the list separators\n     * which will be displayed between the list elements in the result view\n     * below the text input.\n     */\n    renderSeparator: PropTypes.func,\n    /**\n     * renders custom TextInput. All props passed to this function.\n     */\n    renderTextInput: PropTypes.func,\n    flatListProps: PropTypes.object\n  };\n\n  static defaultProps = {\n    data: [],\n    keyboardShouldPersistTaps: 'always',\n    onStartShouldSetResponderCapture: () => false,\n    renderItem: ({ item }) => <Text>{item}</Text>,\n    renderSeparator: null,\n    renderTextInput: props => <TextInput {...props} />,\n    flatListProps: {}\n  };\n\n  constructor(props) {\n    super(props);\n    this.resultList = null;\n    this.textInput = null;\n\n    this.onRefListView = this.onRefListView.bind(this);\n    this.onRefTextInput = this.onRefTextInput.bind(this);\n    this.onEndEditing = this.onEndEditing.bind(this);\n  }\n\n  onEndEditing(e) {\n    this.props.onEndEditing && this.props.onEndEditing(e);\n  }\n\n  onRefListView(resultList) {\n    this.resultList = resultList;\n  }\n\n  onRefTextInput(textInput) {\n    this.textInput = textInput;\n  }\n\n  /**\n   * Proxy `blur()` to autocomplete's text input.\n   */\n  blur() {\n    const { textInput } = this;\n    textInput && textInput.blur();\n  }\n\n  /**\n   * Proxy `focus()` to autocomplete's text input.\n   */\n  focus() {\n    const { textInput } = this;\n    textInput && textInput.focus();\n  }\n\n  /**\n   * Proxy `isFocused()` to autocomplete's text input.\n   */\n  isFocused() {\n    const { textInput } = this;\n    return textInput && textInput.isFocused();\n  }\n\n  renderResultList() {\n    const {\n      data,\n      listStyle,\n      renderItem,\n      keyExtractor,\n      renderSeparator,\n      keyboardShouldPersistTaps,\n      flatListProps,\n      onEndReached,\n      onEndReachedThreshold\n    } = this.props;\n\n    return (\n      <FlatList\n        ref={this.onRefListView}\n        data={data}\n        keyboardShouldPersistTaps={keyboardShouldPersistTaps}\n        renderItem={renderItem}\n        keyExtractor={keyExtractor}\n        renderSeparator={renderSeparator}\n        onEndReached={onEndReached}\n        onEndReachedThreshold={onEndReachedThreshold}\n        style={[styles.list, listStyle]}\n        {...flatListProps}\n      />\n    );\n  }\n\n  renderTextInput() {\n    const { renderTextInput, style } = this.props;\n    const props = {\n      style: [styles.input, style],\n      ref: this.onRefTextInput,\n      onEndEditing: this.onEndEditing,\n      ...this.props\n    };\n\n    return renderTextInput(props);\n  }\n\n  render() {\n    const {\n      data,\n      containerStyle,\n      hideResults,\n      inputContainerStyle,\n      listContainerStyle,\n      onShowResults,\n      onStartShouldSetResponderCapture\n    } = this.props;\n    const showResults = data.length > 0;\n\n    // Notify listener if the suggestion will be shown.\n    onShowResults && onShowResults(showResults);\n\n    return (\n      <View style={[styles.container, containerStyle]}>\n        <View style={[styles.inputContainer, inputContainerStyle]}>\n          {this.renderTextInput()}\n        </View>\n        {!hideResults && (\n          <View\n            style={listContainerStyle}\n            onStartShouldSetResponderCapture={onStartShouldSetResponderCapture}\n          >\n            {showResults && this.renderResultList()}\n          </View>\n        )}\n      </View>\n    );\n  }\n}\n\nconst border = {\n  borderColor: '#b9b9b9',\n  borderRadius: 1,\n  borderWidth: 1\n};\n\nconst androidStyles = {\n  container: {\n    flex: 1\n  },\n  inputContainer: {\n    ...border,\n    marginBottom: 0\n  },\n  list: {\n    ...border,\n    backgroundColor: 'white',\n    borderTopWidth: 0,\n    margin: 10,\n    marginTop: 0\n  }\n};\n\nconst iosStyles = {\n  container: {\n    zIndex: 1\n  },\n  inputContainer: {\n    ...border\n  },\n  input: {\n    backgroundColor: 'white',\n    height: 40,\n    paddingLeft: 3\n  },\n  list: {\n    ...border,\n    backgroundColor: 'white',\n    borderTopWidth: 0,\n    left: 0,\n    position: 'absolute',\n    right: 0\n  }\n};\n\nconst styles = StyleSheet.create({\n  input: {\n    backgroundColor: 'white',\n    height: 40,\n    paddingLeft: 3\n  },\n  ...Platform.select({\n    android: { ...androidStyles },\n    ios: { ...iosStyles }\n  })\n});\n\nexport default Autocomplete;\n"]},"metadata":{},"sourceType":"module"}