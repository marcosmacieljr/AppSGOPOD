{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-stack/src/views/StackView/StackViewLayout.tsx\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { SceneView, StackActions, NavigationActions, NavigationProvider, ThemeContext, withOrientation } from 'react-navigation';\nimport { ScreenContainer } from 'react-native-screens';\nimport { PanGestureHandler, State as GestureState } from 'react-native-gesture-handler';\nimport Card from \"./StackViewCard\";\nimport Header from \"../Header/Header\";\nimport TransitionConfigs from \"./StackViewTransitionConfigs\";\nimport HeaderStyleInterpolator from \"../Header/HeaderStyleInterpolator\";\nimport StackGestureContext from \"../../utils/StackGestureContext\";\nimport clamp from \"../../utils/clamp\";\nimport { supportsImprovedSpringAnimation } from \"../../utils/ReactNativeFeatures\";\nvar IPHONE_XS_HEIGHT = 812;\nvar IPHONE_XR_HEIGHT = 896;\n\nvar _Dimensions$get = Dimensions.get('window'),\n    WINDOW_WIDTH = _Dimensions$get.width,\n    WINDOW_HEIGHT = _Dimensions$get.height;\n\nvar IS_IPHONE_X = Platform.OS === 'ios' && !Platform.isPad && !Platform.isTVOS && (WINDOW_HEIGHT === IPHONE_XS_HEIGHT || WINDOW_WIDTH === IPHONE_XS_HEIGHT || WINDOW_HEIGHT === IPHONE_XR_HEIGHT || WINDOW_WIDTH === IPHONE_XR_HEIGHT);\nvar EaseInOut = Easing.inOut(Easing.ease);\nvar HEADER_LAYOUT_PRESET = ['center', 'left'];\nvar HEADER_TRANSITION_PRESET = ['fade-in-place', 'uikit'];\nvar HEADER_BACKGROUND_TRANSITION_PRESET = ['toggle', 'fade', 'translate'];\nvar ANIMATION_DURATION = 500;\nvar POSITION_THRESHOLD = 1 / 2;\nvar GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nvar GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\nvar USE_NATIVE_DRIVER = Platform.OS === 'android' || Platform.OS === 'ios';\n\nvar getDefaultHeaderHeight = function getDefaultHeaderHeight(isLandscape) {\n  if (Platform.OS === 'ios') {\n    if (isLandscape && !Platform.isPad) {\n      return 32;\n    } else if (IS_IPHONE_X) {\n      return 88;\n    } else {\n      return 64;\n    }\n  } else if (Platform.OS === 'android') {\n    return 56;\n  } else {\n    return 64;\n  }\n};\n\nvar StackViewLayout = function (_React$Component) {\n  _inherits(StackViewLayout, _React$Component);\n\n  function StackViewLayout(props) {\n    var _this;\n\n    _classCallCheck(this, StackViewLayout);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StackViewLayout).call(this, props));\n    _this.immediateIndex = null;\n\n    _this.handleFloatingHeaderLayout = function (e) {\n      var height = e.nativeEvent.layout.height;\n\n      if (height !== _this.state.floatingHeaderHeight) {\n        _this.setState({\n          floatingHeaderHeight: height\n        });\n      }\n    };\n\n    _this.handlePanGestureStateChange = function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n\n      if (nativeEvent.oldState === GestureState.ACTIVE) {\n        if (_this.positionSwitch.__getValue() === 1) {\n          return;\n        }\n\n        if (_this.isMotionVertical()) {\n          _this.handleReleaseVertical(nativeEvent);\n        } else {\n          _this.handleReleaseHorizontal(nativeEvent);\n        }\n      } else if (nativeEvent.state === GestureState.ACTIVE) {\n        _this.props.onGestureBegin && _this.props.onGestureBegin();\n\n        _this.positionSwitch.setValue(0);\n      }\n    };\n\n    _this.renderCard = function (scene) {\n      var _this$props = _this.props,\n          transitionProps = _this$props.transitionProps,\n          cardShadowEnabled = _this$props.cardShadowEnabled,\n          cardOverlayEnabled = _this$props.cardOverlayEnabled,\n          transparentCard = _this$props.transparentCard,\n          cardStyle = _this$props.cardStyle;\n      var _ref2 = _this.transitionConfig,\n          screenInterpolator = _ref2.screenInterpolator;\n      var style = screenInterpolator && screenInterpolator(_objectSpread({}, transitionProps, {\n        shadowEnabled: cardShadowEnabled,\n        cardOverlayEnabled: cardOverlayEnabled,\n        position: _this.position,\n        scene: scene\n      }));\n      var options = scene.descriptor.options;\n      var hasHeader = options.header !== null && options.headerShown !== false;\n\n      var headerMode = _this.getHeaderMode();\n\n      var floatingContainerStyle = StyleSheet.absoluteFill;\n\n      if (hasHeader && headerMode === 'float' && !options.headerTransparent) {\n        floatingContainerStyle = _objectSpread({}, Platform.select({\n          web: {},\n          default: StyleSheet.absoluteFillObject\n        }), {\n          paddingTop: _this.state.floatingHeaderHeight\n        });\n      }\n\n      return React.createElement(Card, _extends({}, transitionProps, {\n        key: \"card_\" + scene.key,\n        position: _this.position,\n        realPosition: transitionProps.position,\n        animatedStyle: style,\n        transparent: transparentCard,\n        style: [floatingContainerStyle, cardStyle],\n        scene: scene,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 975\n        }\n      }), _this.renderInnerScene(scene));\n    };\n\n    _this.panGestureRef = React.createRef();\n    _this.gestureX = new Animated.Value(0);\n    _this.gestureY = new Animated.Value(0);\n    _this.positionSwitch = new Animated.Value(1);\n\n    if (Animated.subtract) {\n      _this.gestureSwitch = Animated.subtract(1, _this.positionSwitch);\n    } else {\n      _this.gestureSwitch = Animated.add(1, Animated.multiply(-1, _this.positionSwitch));\n    }\n\n    _this.gestureEvent = Animated.event([{\n      nativeEvent: {\n        translationX: _this.gestureX,\n        translationY: _this.gestureY\n      }\n    }], {\n      useNativeDriver: USE_NATIVE_DRIVER\n    });\n    _this.state = {\n      floatingHeaderHeight: getDefaultHeaderHeight(props.isLandscape)\n    };\n    return _this;\n  }\n\n  _createClass(StackViewLayout, [{\n    key: \"renderHeader\",\n    value: function renderHeader(scene, headerMode) {\n      var options = scene.descriptor.options;\n      var header = options.header,\n          headerShown = options.headerShown;\n\n      if (__DEV__ && typeof header === 'string') {\n        throw new Error(\"Invalid header value: \\\"\" + header + \"\\\". The header option must be a valid React component or null, not a string.\");\n      }\n\n      if ((header === null || headerShown === false) && headerMode === 'screen') {\n        return null;\n      }\n\n      if (React.isValidElement(header)) {\n        return header;\n      }\n\n      var renderHeader = header || function (props) {\n        return React.createElement(Header, _extends({}, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217\n          }\n        }));\n      };\n\n      var _ref3 = this.transitionConfig,\n          headerLeftInterpolator = _ref3.headerLeftInterpolator,\n          headerTitleInterpolator = _ref3.headerTitleInterpolator,\n          headerRightInterpolator = _ref3.headerRightInterpolator,\n          headerBackgroundInterpolator = _ref3.headerBackgroundInterpolator;\n      var backgroundTransitionPresetInterpolator = this.getHeaderBackgroundTransitionPreset();\n\n      if (backgroundTransitionPresetInterpolator) {\n        headerBackgroundInterpolator = backgroundTransitionPresetInterpolator;\n      }\n\n      var _this$props2 = this.props,\n          transitionProps = _this$props2.transitionProps,\n          passProps = _objectWithoutProperties(_this$props2, [\"transitionProps\"]);\n\n      return React.createElement(NavigationProvider, {\n        value: scene.descriptor.navigation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        }\n      }, renderHeader(_objectSpread({}, passProps, transitionProps, {\n        position: this.position,\n        scene: scene,\n        mode: headerMode,\n        transitionPreset: this.getHeaderTransitionPreset(),\n        layoutPreset: this.getHeaderLayoutPreset(),\n        backTitleVisible: this.getHeaderBackTitleVisible(),\n        leftInterpolator: headerLeftInterpolator,\n        titleInterpolator: headerTitleInterpolator,\n        rightInterpolator: headerRightInterpolator,\n        backgroundInterpolator: headerBackgroundInterpolator\n      })));\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(resetToIndex, duration) {\n      if (Platform.OS === 'ios' && supportsImprovedSpringAnimation()) {\n        Animated.spring(this.props.transitionProps.position, {\n          toValue: resetToIndex,\n          stiffness: 6000,\n          damping: 100,\n          mass: 3,\n          overshootClamping: true,\n          restDisplacementThreshold: 0.01,\n          restSpeedThreshold: 0.01,\n          useNativeDriver: USE_NATIVE_DRIVER\n        }).start();\n      } else {\n        Animated.timing(this.props.transitionProps.position, {\n          toValue: resetToIndex,\n          duration: duration,\n          easing: EaseInOut,\n          useNativeDriver: USE_NATIVE_DRIVER\n        }).start();\n      }\n    }\n  }, {\n    key: \"goBack\",\n    value: function goBack(backFromIndex, duration) {\n      var _this2 = this;\n\n      var _this$props$transitio = this.props.transitionProps,\n          navigation = _this$props$transitio.navigation,\n          position = _this$props$transitio.position,\n          scenes = _this$props$transitio.scenes;\n      var toValue = Math.max(backFromIndex - 1, 0);\n      this.immediateIndex = toValue;\n\n      var onCompleteAnimation = function onCompleteAnimation() {\n        _this2.immediateIndex = null;\n        var backFromScene = scenes.find(function (s) {\n          return s.index === toValue + 1;\n        });\n\n        if (backFromScene) {\n          navigation.dispatch(NavigationActions.back({\n            key: backFromScene.route.key,\n            immediate: true\n          }));\n          navigation.dispatch(StackActions.completeTransition());\n        }\n      };\n\n      if (Platform.OS === 'ios' && supportsImprovedSpringAnimation()) {\n        Animated.spring(position, {\n          toValue: toValue,\n          stiffness: 7000,\n          damping: 300,\n          mass: 3,\n          overshootClamping: true,\n          restDisplacementThreshold: 0.01,\n          restSpeedThreshold: 0.01,\n          useNativeDriver: USE_NATIVE_DRIVER\n        }).start(onCompleteAnimation);\n      } else {\n        Animated.timing(position, {\n          toValue: toValue,\n          duration: duration,\n          easing: EaseInOut,\n          useNativeDriver: USE_NATIVE_DRIVER\n        }).start(onCompleteAnimation);\n      }\n    }\n  }, {\n    key: \"prepareAnimated\",\n    value: function prepareAnimated() {\n      if (this.props === this.prevProps) {\n        return;\n      }\n\n      this.prevProps = this.props;\n      this.prepareGesture();\n      this.preparePosition();\n      this.prepareTransitionConfig();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.prepareAnimated();\n      var transitionProps = this.props.transitionProps;\n      var index = transitionProps.navigation.state.index,\n          scenes = transitionProps.scenes;\n      var headerMode = this.getHeaderMode();\n      var floatingHeader = null;\n\n      if (headerMode === 'float') {\n        var scene = transitionProps.scene;\n        floatingHeader = React.createElement(View, {\n          style: styles.floatingHeader,\n          pointerEvents: \"box-none\",\n          onLayout: this.handleFloatingHeaderLayout,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 356\n          }\n        }, this.renderHeader(scene, headerMode));\n      }\n\n      return React.createElement(PanGestureHandler, _extends({}, this.gestureActivationCriteria(), {\n        ref: this.panGestureRef,\n        onGestureEvent: this.gestureEvent,\n        onHandlerStateChange: this.handlePanGestureStateChange,\n        enabled: index > 0 && this.isGestureEnabled(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        }\n      }), React.createElement(Animated.View, {\n        style: [styles.container, this.context === 'light' ? this.transitionConfig.containerStyleLight : this.transitionConfig.containerStyleDark, this.transitionConfig.containerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374\n        }\n      }, React.createElement(StackGestureContext.Provider, {\n        value: this.panGestureRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383\n        }\n      }, React.createElement(ScreenContainer, {\n        style: styles.scenes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384\n        }\n      }, scenes.map(this.renderCard)), floatingHeader)));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var prevState = prevProps.transitionProps.navigation.state;\n      var state = this.props.transitionProps.navigation.state;\n\n      if (prevState.index !== state.index) {\n        this.maybeCancelGesture();\n      }\n    }\n  }, {\n    key: \"getGestureResponseDistance\",\n    value: function getGestureResponseDistance() {\n      var scene = this.props.transitionProps.scene;\n      var options = scene.descriptor.options;\n      var _options$gestureRespo = options.gestureResponseDistance,\n          userGestureResponseDistance = _options$gestureRespo === void 0 ? {} : _options$gestureRespo;\n      return this.isModal() ? userGestureResponseDistance.vertical || GESTURE_RESPONSE_DISTANCE_VERTICAL : userGestureResponseDistance.horizontal || GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n    }\n  }, {\n    key: \"gestureActivationCriteria\",\n    value: function gestureActivationCriteria() {\n      var layout = this.props.transitionProps.layout;\n      var gestureResponseDistance = this.getGestureResponseDistance();\n      var isMotionInverted = this.isMotionInverted();\n\n      if (this.isMotionVertical()) {\n        var height = layout.height.__getValue();\n\n        return {\n          maxDeltaX: 15,\n          minOffsetY: isMotionInverted ? -5 : 5,\n          hitSlop: isMotionInverted ? {\n            top: -height + gestureResponseDistance\n          } : {\n            bottom: -height + gestureResponseDistance\n          }\n        };\n      } else {\n        var width = layout.width.__getValue();\n\n        var hitSlop = -width + gestureResponseDistance;\n        return {\n          minOffsetX: isMotionInverted ? -5 : 5,\n          maxDeltaY: 20,\n          hitSlop: isMotionInverted ? {\n            left: hitSlop\n          } : {\n            right: hitSlop\n          }\n        };\n      }\n    }\n  }, {\n    key: \"isGestureEnabled\",\n    value: function isGestureEnabled() {\n      var gesturesEnabled = this.props.transitionProps.scene.descriptor.options.gesturesEnabled;\n      return typeof gesturesEnabled === 'boolean' ? gesturesEnabled : Platform.OS === 'ios';\n    }\n  }, {\n    key: \"isMotionVertical\",\n    value: function isMotionVertical() {\n      return this.isModal();\n    }\n  }, {\n    key: \"isModal\",\n    value: function isModal() {\n      return this.props.mode === 'modal';\n    }\n  }, {\n    key: \"isMotionInverted\",\n    value: function isMotionInverted() {\n      var scene = this.props.transitionProps.scene;\n      var options = scene.descriptor.options;\n      var gestureDirection = options.gestureDirection;\n\n      if (this.isModal()) {\n        return gestureDirection === 'inverted';\n      } else {\n        return typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : I18nManager.isRTL;\n      }\n    }\n  }, {\n    key: \"computeHorizontalGestureValue\",\n    value: function computeHorizontalGestureValue(_ref4) {\n      var translationX = _ref4.translationX;\n      var _this$props$transitio2 = this.props.transitionProps,\n          navigation = _this$props$transitio2.navigation,\n          layout = _this$props$transitio2.layout;\n      var index = navigation.state.index;\n\n      var distance = layout.width.__getValue();\n\n      var x = this.isMotionInverted() ? -1 * translationX : translationX;\n      var value = index - x / distance;\n      return clamp(index - 1, value, index);\n    }\n  }, {\n    key: \"computeVerticalGestureValue\",\n    value: function computeVerticalGestureValue(_ref5) {\n      var translationY = _ref5.translationY;\n      var _this$props$transitio3 = this.props.transitionProps,\n          navigation = _this$props$transitio3.navigation,\n          layout = _this$props$transitio3.layout;\n      var index = navigation.state.index;\n\n      var distance = layout.height.__getValue();\n\n      var y = this.isMotionInverted() ? -1 * translationY : translationY;\n      var value = index - y / distance;\n      return clamp(index - 1, value, index);\n    }\n  }, {\n    key: \"maybeCancelGesture\",\n    value: function maybeCancelGesture() {\n      this.positionSwitch.setValue(1);\n    }\n  }, {\n    key: \"prepareGesture\",\n    value: function prepareGesture() {\n      if (!this.isGestureEnabled()) {\n        if (this.positionSwitch.__getValue() !== 1) {\n          this.positionSwitch.setValue(1);\n        }\n\n        this.gesturePosition = undefined;\n        return;\n      }\n\n      if (this.props.transitionProps.layout.width.__getValue() === 0 || this.props.transitionProps.layout.height.__getValue() === 0) {\n        return;\n      }\n\n      if (this.isMotionVertical()) {\n        this.prepareGestureVertical();\n      } else {\n        this.prepareGestureHorizontal();\n      }\n    }\n  }, {\n    key: \"prepareGestureHorizontal\",\n    value: function prepareGestureHorizontal() {\n      var index = this.props.transitionProps.navigation.state.index;\n\n      if (this.isMotionInverted()) {\n        this.gesturePosition = Animated.add(index, Animated.divide(this.gestureX, this.props.transitionProps.layout.width)).interpolate({\n          inputRange: [index - 1, index],\n          outputRange: [index - 1, index],\n          extrapolate: 'clamp'\n        });\n      } else {\n        this.gesturePosition = Animated.add(index, Animated.multiply(-1, Animated.divide(this.gestureX, this.props.transitionProps.layout.width))).interpolate({\n          inputRange: [index - 1, index],\n          outputRange: [index - 1, index],\n          extrapolate: 'clamp'\n        });\n      }\n    }\n  }, {\n    key: \"prepareGestureVertical\",\n    value: function prepareGestureVertical() {\n      var index = this.props.transitionProps.navigation.state.index;\n\n      if (this.isMotionInverted()) {\n        this.gesturePosition = Animated.add(index, Animated.divide(this.gestureY, this.props.transitionProps.layout.height)).interpolate({\n          inputRange: [index - 1, index],\n          outputRange: [index - 1, index],\n          extrapolate: 'clamp'\n        });\n      } else {\n        this.gesturePosition = Animated.add(index, Animated.multiply(-1, Animated.divide(this.gestureY, this.props.transitionProps.layout.height))).interpolate({\n          inputRange: [index - 1, index],\n          outputRange: [index - 1, index],\n          extrapolate: 'clamp'\n        });\n      }\n    }\n  }, {\n    key: \"handleReleaseHorizontal\",\n    value: function handleReleaseHorizontal(nativeEvent) {\n      var _this$props$transitio4 = this.props.transitionProps,\n          navigation = _this$props$transitio4.navigation,\n          position = _this$props$transitio4.position,\n          layout = _this$props$transitio4.layout;\n      var index = navigation.state.index;\n      var immediateIndex = this.immediateIndex == null ? index : this.immediateIndex;\n\n      var distance = layout.width.__getValue();\n\n      var movementDirection = this.isMotionInverted() ? -1 : 1;\n      var movedDistance = movementDirection * nativeEvent.translationX;\n      var gestureVelocity = movementDirection * nativeEvent.velocityX;\n      var defaultVelocity = distance / ANIMATION_DURATION;\n      var velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);\n      var resetDuration = this.isMotionInverted() ? (distance - movedDistance) / velocity : movedDistance / velocity;\n      var goBackDuration = this.isMotionInverted() ? movedDistance / velocity : (distance - movedDistance) / velocity;\n      var value = this.computeHorizontalGestureValue(nativeEvent);\n      position.setValue(value);\n      this.positionSwitch.setValue(1);\n\n      if (gestureVelocity < -50) {\n        this.props.onGestureCanceled && this.props.onGestureCanceled();\n        this.reset(immediateIndex, resetDuration);\n        return;\n      }\n\n      if (gestureVelocity > 50) {\n        this.props.onGestureEnd && this.props.onGestureEnd();\n        this.goBack(immediateIndex, goBackDuration);\n        return;\n      }\n\n      if (value <= index - POSITION_THRESHOLD) {\n        this.props.onGestureEnd && this.props.onGestureEnd();\n        this.goBack(immediateIndex, goBackDuration);\n      } else {\n        this.props.onGestureCanceled && this.props.onGestureCanceled();\n        this.reset(immediateIndex, resetDuration);\n      }\n    }\n  }, {\n    key: \"handleReleaseVertical\",\n    value: function handleReleaseVertical(nativeEvent) {\n      var _this$props$transitio5 = this.props.transitionProps,\n          navigation = _this$props$transitio5.navigation,\n          position = _this$props$transitio5.position,\n          layout = _this$props$transitio5.layout;\n      var index = navigation.state.index;\n      var immediateIndex = this.immediateIndex == null ? index : this.immediateIndex;\n\n      var distance = layout.height.__getValue();\n\n      var isMotionInverted = this.isMotionInverted();\n      var movementDirection = isMotionInverted ? -1 : 1;\n      var movedDistance = movementDirection * nativeEvent.translationY;\n      var gestureVelocity = movementDirection * nativeEvent.velocityY;\n      var defaultVelocity = distance / ANIMATION_DURATION;\n      var velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);\n      var resetDuration = isMotionInverted ? (distance - movedDistance) / velocity : movedDistance / velocity;\n      var goBackDuration = isMotionInverted ? movedDistance / velocity : (distance - movedDistance) / velocity;\n      var value = this.computeVerticalGestureValue(nativeEvent);\n      position.setValue(value);\n      this.positionSwitch.setValue(1);\n\n      if (gestureVelocity < -50) {\n        this.props.onGestureCanceled && this.props.onGestureCanceled();\n        this.reset(immediateIndex, resetDuration);\n        return;\n      }\n\n      if (gestureVelocity > 50) {\n        this.props.onGestureEnd && this.props.onGestureEnd();\n        this.goBack(immediateIndex, goBackDuration);\n        return;\n      }\n\n      if (value <= index - POSITION_THRESHOLD) {\n        this.props.onGestureEnd && this.props.onGestureEnd();\n        this.goBack(immediateIndex, goBackDuration);\n      } else {\n        this.props.onGestureCanceled && this.props.onGestureCanceled();\n        this.reset(immediateIndex, resetDuration);\n      }\n    }\n  }, {\n    key: \"getHeaderMode\",\n    value: function getHeaderMode() {\n      if (this.props.headerMode) {\n        return this.props.headerMode;\n      }\n\n      if (Platform.OS === 'android' || this.props.mode === 'modal') {\n        return 'screen';\n      }\n\n      return 'float';\n    }\n  }, {\n    key: \"getHeaderBackgroundTransitionPreset\",\n    value: function getHeaderBackgroundTransitionPreset() {\n      var headerBackgroundTransitionPreset = this.props.headerBackgroundTransitionPreset;\n\n      if (headerBackgroundTransitionPreset) {\n        if (HEADER_BACKGROUND_TRANSITION_PRESET.includes(headerBackgroundTransitionPreset)) {\n          if (headerBackgroundTransitionPreset === 'fade') {\n            return HeaderStyleInterpolator.forBackgroundWithFade;\n          } else if (headerBackgroundTransitionPreset === 'translate') {\n            return HeaderStyleInterpolator.forBackgroundWithTranslation;\n          } else if (headerBackgroundTransitionPreset === 'toggle') {\n            return HeaderStyleInterpolator.forBackgroundWithInactiveHidden;\n          }\n        } else if (__DEV__) {\n          console.error(\"Invalid configuration applied for headerBackgroundTransitionPreset - expected one of \" + HEADER_BACKGROUND_TRANSITION_PRESET.join(', ') + \" but received \" + JSON.stringify(headerBackgroundTransitionPreset));\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getHeaderLayoutPreset\",\n    value: function getHeaderLayoutPreset() {\n      var headerLayoutPreset = this.props.headerLayoutPreset;\n\n      if (headerLayoutPreset) {\n        if (__DEV__) {\n          if (this.getHeaderTransitionPreset() === 'uikit' && headerLayoutPreset === 'left' && Platform.OS === 'ios') {\n            console.warn(\"headerTransitionPreset with the value 'uikit' is incompatible with headerLayoutPreset 'left'\");\n          }\n        }\n\n        if (HEADER_LAYOUT_PRESET.includes(headerLayoutPreset)) {\n          return headerLayoutPreset;\n        }\n\n        if (__DEV__) {\n          console.error(\"Invalid configuration applied for headerLayoutPreset - expected one of \" + HEADER_LAYOUT_PRESET.join(', ') + \" but received \" + JSON.stringify(headerLayoutPreset));\n        }\n      }\n\n      if (Platform.OS !== 'ios') {\n        return 'left';\n      } else {\n        return 'center';\n      }\n    }\n  }, {\n    key: \"getHeaderTransitionPreset\",\n    value: function getHeaderTransitionPreset() {\n      if (Platform.OS !== 'ios' || this.getHeaderMode() === 'screen') {\n        return 'fade-in-place';\n      }\n\n      var headerTransitionPreset = this.props.headerTransitionPreset;\n\n      if (headerTransitionPreset) {\n        if (HEADER_TRANSITION_PRESET.includes(headerTransitionPreset)) {\n          return headerTransitionPreset;\n        }\n\n        if (__DEV__) {\n          console.error(\"Invalid configuration applied for headerTransitionPreset - expected one of \" + HEADER_TRANSITION_PRESET.join(', ') + \" but received \" + JSON.stringify(headerTransitionPreset));\n        }\n      }\n\n      return 'fade-in-place';\n    }\n  }, {\n    key: \"getHeaderBackTitleVisible\",\n    value: function getHeaderBackTitleVisible() {\n      var headerBackTitleVisible = this.props.headerBackTitleVisible;\n      var layoutPreset = this.getHeaderLayoutPreset();\n      var enabledByDefault = !(layoutPreset === 'left' || Platform.OS !== 'ios');\n      return typeof headerBackTitleVisible === 'boolean' ? headerBackTitleVisible : enabledByDefault;\n    }\n  }, {\n    key: \"renderInnerScene\",\n    value: function renderInnerScene(scene) {\n      var _scene$descriptor = scene.descriptor,\n          navigation = _scene$descriptor.navigation,\n          getComponent = _scene$descriptor.getComponent;\n      var SceneComponent = getComponent();\n      var screenProps = this.props.screenProps;\n      var headerMode = this.getHeaderMode();\n\n      if (headerMode === 'screen') {\n        return React.createElement(View, {\n          style: styles.container,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 887\n          }\n        }, React.createElement(View, {\n          style: styles.scenes,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 888\n          }\n        }, React.createElement(SceneView, {\n          screenProps: screenProps,\n          navigation: navigation,\n          component: SceneComponent,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 889\n          }\n        })), this.renderHeader(scene, headerMode));\n      }\n\n      return React.createElement(SceneView, {\n        screenProps: screenProps,\n        navigation: navigation,\n        component: SceneComponent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 900\n        }\n      });\n    }\n  }, {\n    key: \"prepareTransitionConfig\",\n    value: function prepareTransitionConfig() {\n      this.transitionConfig = TransitionConfigs.getTransitionConfig(this.props.transitionConfig, _objectSpread({}, this.props.transitionProps, {\n        position: this.position\n      }), this.props.lastTransitionProps, this.isModal());\n    }\n  }, {\n    key: \"preparePosition\",\n    value: function preparePosition() {\n      if (this.gesturePosition) {\n        this.position = Animated.add(Animated.multiply(this.props.transitionProps.position, this.positionSwitch), Animated.multiply(this.gesturePosition, this.gestureSwitch));\n      } else {\n        this.position = this.props.transitionProps.position;\n      }\n    }\n  }]);\n\n  return StackViewLayout;\n}(React.Component);\n\nStackViewLayout.contextType = ThemeContext;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n    overflow: 'hidden'\n  },\n  scenes: {\n    flex: 1\n  },\n  floatingHeader: {\n    position: Platform.select({\n      default: 'absolute',\n      web: 'fixed'\n    }),\n    left: 0,\n    top: 0,\n    right: 0\n  }\n});\nexport default withOrientation(StackViewLayout);","map":{"version":3,"mappings":"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","names":["React","SceneView","StackActions","NavigationActions","NavigationProvider","ThemeContext","withOrientation","ScreenContainer","PanGestureHandler","State","GestureState","Card","Header","TransitionConfigs","HeaderStyleInterpolator","StackGestureContext","clamp","supportsImprovedSpringAnimation","IPHONE_XS_HEIGHT","IPHONE_XR_HEIGHT","Dimensions","get","WINDOW_WIDTH","width","WINDOW_HEIGHT","height","IS_IPHONE_X","Platform","OS","isPad","isTVOS","EaseInOut","Easing","inOut","ease","HEADER_LAYOUT_PRESET","HEADER_TRANSITION_PRESET","HEADER_BACKGROUND_TRANSITION_PRESET","ANIMATION_DURATION","POSITION_THRESHOLD","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","USE_NATIVE_DRIVER","getDefaultHeaderHeight","isLandscape","StackViewLayout","props","_classCallCheck","_this","immediateIndex","handleFloatingHeaderLayout","e","nativeEvent","layout","state","floatingHeaderHeight","setState","handlePanGestureStateChange","oldState","ACTIVE","positionSwitch","__getValue","isMotionVertical","handleReleaseVertical","handleReleaseHorizontal","onGestureBegin","setValue","renderCard","scene","transitionProps","cardShadowEnabled","cardOverlayEnabled","transparentCard","cardStyle","transitionConfig","screenInterpolator","style","shadowEnabled","position","options","descriptor","hasHeader","header","headerShown","headerMode","getHeaderMode","floatingContainerStyle","StyleSheet","absoluteFill","headerTransparent","select","web","default","absoluteFillObject","paddingTop","key","realPosition","animatedStyle","transparent","__source","fileName","lineNumber","renderInnerScene","panGestureRef","createRef","gestureX","Animated","Value","gestureY","subtract","gestureSwitch","add","multiply","gestureEvent","event","translationX","translationY","useNativeDriver","__DEV__","Error","isValidElement","renderHeader","headerLeftInterpolator","headerTitleInterpolator","headerRightInterpolator","headerBackgroundInterpolator","backgroundTransitionPresetInterpolator","getHeaderBackgroundTransitionPreset","passProps","value","navigation","mode","transitionPreset","getHeaderTransitionPreset","layoutPreset","getHeaderLayoutPreset","backTitleVisible","getHeaderBackTitleVisible","leftInterpolator","titleInterpolator","rightInterpolator","backgroundInterpolator","resetToIndex","duration","spring","toValue","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","start","timing","easing","backFromIndex","scenes","Math","max","onCompleteAnimation","_this2","backFromScene","find","s","index","dispatch","back","route","immediate","completeTransition","prevProps","prepareGesture","preparePosition","prepareTransitionConfig","prepareAnimated","floatingHeader","View","styles","pointerEvents","onLayout","gestureActivationCriteria","ref","onGestureEvent","onHandlerStateChange","enabled","isGestureEnabled","container","context","containerStyleLight","containerStyleDark","containerStyle","Provider","map","prevState","maybeCancelGesture","gestureResponseDistance","userGestureResponseDistance","isModal","vertical","horizontal","getGestureResponseDistance","isMotionInverted","maxDeltaX","minOffsetY","hitSlop","top","bottom","minOffsetX","maxDeltaY","left","right","gesturesEnabled","gestureDirection","I18nManager","isRTL","distance","x","y","gesturePosition","undefined","prepareGestureVertical","prepareGestureHorizontal","divide","interpolate","inputRange","outputRange","extrapolate","movementDirection","movedDistance","gestureVelocity","velocityX","defaultVelocity","velocity","abs","resetDuration","goBackDuration","computeHorizontalGestureValue","onGestureCanceled","reset","onGestureEnd","goBack","velocityY","computeVerticalGestureValue","headerBackgroundTransitionPreset","includes","forBackgroundWithFade","forBackgroundWithTranslation","forBackgroundWithInactiveHidden","console","error","join","JSON","stringify","headerLayoutPreset","warn","headerTransitionPreset","headerBackTitleVisible","enabledByDefault","getComponent","SceneComponent","screenProps","component","getTransitionConfig","lastTransitionProps","Component","contextType","create","flex","flexDirection","overflow"],"sources":["StackViewLayout.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  Platform,\n  View,\n  I18nManager,\n  Easing,\n  Dimensions,\n  ViewStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport {\n  SceneView,\n  StackActions,\n  NavigationActions,\n  NavigationProvider,\n  ThemeContext,\n  withOrientation,\n} from 'react-navigation';\nimport { ScreenContainer } from 'react-native-screens';\nimport {\n  PanGestureHandler,\n  State as GestureState,\n  PanGestureHandlerGestureEvent,\n  GestureHandlerGestureEventNativeEvent,\n  PanGestureHandlerEventExtra,\n} from 'react-native-gesture-handler';\n\nimport Card from './StackViewCard';\nimport Header from '../Header/Header';\nimport TransitionConfigs from './StackViewTransitionConfigs';\nimport HeaderStyleInterpolator from '../Header/HeaderStyleInterpolator';\nimport StackGestureContext from '../../utils/StackGestureContext';\nimport clamp from '../../utils/clamp';\nimport { supportsImprovedSpringAnimation } from '../../utils/ReactNativeFeatures';\nimport {\n  Scene,\n  HeaderMode,\n  TransitionProps,\n  TransitionConfig,\n  HeaderTransitionConfig,\n  HeaderProps,\n  NavigationStackConfig,\n} from '../../types';\n\ntype Props = NavigationStackConfig & {\n  isLandscape: boolean;\n  transitionProps: TransitionProps;\n  lastTransitionProps?: TransitionProps;\n  transitionConfig?: (\n    transitionProps: TransitionProps,\n    prevTransitionProps?: TransitionProps,\n    isModal?: boolean\n  ) => TransitionConfig;\n  onGestureBegin?: () => void;\n  onGestureEnd?: () => void;\n  onGestureCanceled?: () => void;\n  screenProps?: unknown;\n};\n\ntype State = {\n  floatingHeaderHeight: number;\n};\n\nconst IPHONE_XS_HEIGHT = 812; // iPhone X and XS\nconst IPHONE_XR_HEIGHT = 896; // iPhone XR and XS Max\nconst { width: WINDOW_WIDTH, height: WINDOW_HEIGHT } = Dimensions.get('window');\nconst IS_IPHONE_X =\n  Platform.OS === 'ios' &&\n  // @ts-ignore\n  !Platform.isPad &&\n  // @ts-ignore\n  !Platform.isTVOS &&\n  (WINDOW_HEIGHT === IPHONE_XS_HEIGHT ||\n    WINDOW_WIDTH === IPHONE_XS_HEIGHT ||\n    WINDOW_HEIGHT === IPHONE_XR_HEIGHT ||\n    WINDOW_WIDTH === IPHONE_XR_HEIGHT);\n\nconst EaseInOut = Easing.inOut(Easing.ease);\n\n/**\n * Enumerate possible values for validation\n */\nconst HEADER_LAYOUT_PRESET = ['center', 'left'];\nconst HEADER_TRANSITION_PRESET = ['fade-in-place', 'uikit'];\nconst HEADER_BACKGROUND_TRANSITION_PRESET = ['toggle', 'fade', 'translate'];\n\n/**\n * The max duration of the card animation in milliseconds after released gesture.\n * The actual duration should be always less then that because the rest distance\n * is always less then the full distance of the layout.\n */\nconst ANIMATION_DURATION = 500;\n\n/**\n * The gesture distance threshold to trigger the back behavior. For instance,\n * `1/2` means that moving greater than 1/2 of the width of the screen will\n * trigger a back action\n */\nconst POSITION_THRESHOLD = 1 / 2;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst USE_NATIVE_DRIVER = Platform.OS === 'android' || Platform.OS === 'ios';\n\nconst getDefaultHeaderHeight = (isLandscape: boolean) => {\n  if (Platform.OS === 'ios') {\n    // @ts-ignore\n    if (isLandscape && !Platform.isPad) {\n      return 32;\n    } else if (IS_IPHONE_X) {\n      return 88;\n    } else {\n      return 64;\n    }\n  } else if (Platform.OS === 'android') {\n    return 56;\n  } else {\n    return 64;\n  }\n};\n\nclass StackViewLayout extends React.Component<Props, State> {\n  static contextType = ThemeContext;\n\n  context!: React.ContextType<typeof ThemeContext>;\n\n  private panGestureRef: React.RefObject<PanGestureHandler>;\n  private gestureX: Animated.Value;\n  private gestureY: Animated.Value;\n  private positionSwitch: Animated.Value;\n  private gestureSwitch: Animated.AnimatedInterpolation;\n  private gestureEvent: (...args: any[]) => void;\n  private gesturePosition: Animated.AnimatedInterpolation | undefined;\n\n  // @ts-ignore\n  private position: Animated.Value;\n\n  /**\n   * immediateIndex is used to represent the expected index that we will be on after a\n   * transition. To achieve a smooth animation when swiping back, the action to go back\n   * doesn't actually fire until the transition completes. The immediateIndex is used during\n   * the transition so that gestures can be handled correctly. This is a work-around for\n   * cases when the user quickly swipes back several times.\n   */\n  private immediateIndex: number | null = null;\n  private transitionConfig:\n    | HeaderTransitionConfig & TransitionConfig\n    | undefined;\n  private prevProps: Props | undefined;\n\n  constructor(props: Props) {\n    super(props);\n    this.panGestureRef = React.createRef();\n    this.gestureX = new Animated.Value(0);\n    this.gestureY = new Animated.Value(0);\n    this.positionSwitch = new Animated.Value(1);\n    if (Animated.subtract) {\n      this.gestureSwitch = Animated.subtract(1, this.positionSwitch);\n    } else {\n      this.gestureSwitch = Animated.add(\n        1,\n        Animated.multiply(-1, this.positionSwitch)\n      );\n    }\n    this.gestureEvent = Animated.event(\n      [\n        {\n          nativeEvent: {\n            translationX: this.gestureX,\n            translationY: this.gestureY,\n          },\n        },\n      ],\n      {\n        useNativeDriver: USE_NATIVE_DRIVER,\n      }\n    );\n\n    this.state = {\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      floatingHeaderHeight: getDefaultHeaderHeight(props.isLandscape),\n    };\n  }\n\n  private renderHeader(scene: Scene, headerMode: HeaderMode) {\n    const { options } = scene.descriptor;\n    const { header, headerShown } = options;\n\n    if (__DEV__ && typeof header === 'string') {\n      throw new Error(\n        `Invalid header value: \"${header}\". The header option must be a valid React component or null, not a string.`\n      );\n    }\n\n    if ((header === null || headerShown === false) && headerMode === 'screen') {\n      return null;\n    }\n\n    // check if it's a react element\n    if (React.isValidElement(header)) {\n      return header;\n    }\n\n    // Handle the case where the header option is a function, and provide the default\n    const renderHeader =\n      // @ts-ignore TS warns about missing props, but they are in default props\n      header || ((props: HeaderProps) => <Header {...props} />);\n\n    let {\n      headerLeftInterpolator,\n      headerTitleInterpolator,\n      headerRightInterpolator,\n      headerBackgroundInterpolator,\n    } = this.transitionConfig as HeaderTransitionConfig;\n\n    const backgroundTransitionPresetInterpolator = this.getHeaderBackgroundTransitionPreset();\n    if (backgroundTransitionPresetInterpolator) {\n      headerBackgroundInterpolator = backgroundTransitionPresetInterpolator;\n    }\n\n    const { transitionProps, ...passProps } = this.props;\n\n    return (\n      <NavigationProvider value={scene.descriptor.navigation}>\n        {renderHeader({\n          ...passProps,\n          ...transitionProps,\n          position: this.position,\n          scene,\n          mode: headerMode,\n          transitionPreset: this.getHeaderTransitionPreset(),\n          layoutPreset: this.getHeaderLayoutPreset(),\n          backTitleVisible: this.getHeaderBackTitleVisible(),\n          leftInterpolator: headerLeftInterpolator,\n          titleInterpolator: headerTitleInterpolator,\n          rightInterpolator: headerRightInterpolator,\n          backgroundInterpolator: headerBackgroundInterpolator,\n        })}\n      </NavigationProvider>\n    );\n  }\n\n  private reset(resetToIndex: number, duration: number) {\n    if (Platform.OS === 'ios' && supportsImprovedSpringAnimation()) {\n      // @ts-ignore\n      Animated.spring(this.props.transitionProps.position, {\n        toValue: resetToIndex,\n        stiffness: 6000,\n        damping: 100,\n        mass: 3,\n        overshootClamping: true,\n        restDisplacementThreshold: 0.01,\n        restSpeedThreshold: 0.01,\n        useNativeDriver: USE_NATIVE_DRIVER,\n      }).start();\n    } else {\n      // @ts-ignore\n      Animated.timing(this.props.transitionProps.position, {\n        toValue: resetToIndex,\n        duration,\n        easing: EaseInOut,\n        useNativeDriver: USE_NATIVE_DRIVER,\n      }).start();\n    }\n  }\n\n  private goBack(backFromIndex: number, duration: number) {\n    const { navigation, position, scenes } = this.props.transitionProps;\n    const toValue = Math.max(backFromIndex - 1, 0);\n\n    // set temporary index for gesture handler to respect until the action is\n    // dispatched at the end of the transition.\n    this.immediateIndex = toValue;\n\n    const onCompleteAnimation = () => {\n      this.immediateIndex = null;\n      const backFromScene = scenes.find(s => s.index === toValue + 1);\n      if (backFromScene) {\n        navigation.dispatch(\n          NavigationActions.back({\n            key: backFromScene.route.key,\n            immediate: true,\n          })\n        );\n        navigation.dispatch(StackActions.completeTransition());\n      }\n    };\n\n    if (Platform.OS === 'ios' && supportsImprovedSpringAnimation()) {\n      // @ts-ignore\n      Animated.spring(position, {\n        toValue,\n        stiffness: 7000,\n        damping: 300,\n        mass: 3,\n        overshootClamping: true,\n        restDisplacementThreshold: 0.01,\n        restSpeedThreshold: 0.01,\n        useNativeDriver: USE_NATIVE_DRIVER,\n      }).start(onCompleteAnimation);\n    } else {\n      // @ts-ignore\n      Animated.timing(position, {\n        toValue,\n        duration,\n        easing: EaseInOut,\n        useNativeDriver: USE_NATIVE_DRIVER,\n      }).start(onCompleteAnimation);\n    }\n  }\n\n  private handleFloatingHeaderLayout = (e: LayoutChangeEvent) => {\n    const { height } = e.nativeEvent.layout;\n    if (height !== this.state.floatingHeaderHeight) {\n      this.setState({ floatingHeaderHeight: height });\n    }\n  };\n\n  private prepareAnimated() {\n    if (this.props === this.prevProps) {\n      return;\n    }\n    this.prevProps = this.props;\n\n    this.prepareGesture();\n    this.preparePosition();\n    this.prepareTransitionConfig();\n  }\n\n  render() {\n    this.prepareAnimated();\n\n    const { transitionProps } = this.props;\n    const {\n      navigation: {\n        state: { index },\n      },\n      scenes,\n    } = transitionProps;\n\n    const headerMode = this.getHeaderMode();\n    let floatingHeader = null;\n    if (headerMode === 'float') {\n      const { scene } = transitionProps;\n      floatingHeader = (\n        <View\n          style={styles.floatingHeader}\n          pointerEvents=\"box-none\"\n          onLayout={this.handleFloatingHeaderLayout}\n        >\n          {this.renderHeader(scene, headerMode)}\n        </View>\n      );\n    }\n\n    return (\n      <PanGestureHandler\n        {...this.gestureActivationCriteria()}\n        ref={this.panGestureRef}\n        onGestureEvent={this.gestureEvent}\n        onHandlerStateChange={this.handlePanGestureStateChange}\n        enabled={index > 0 && this.isGestureEnabled()}\n      >\n        <Animated.View\n          style={[\n            styles.container,\n            this.context === 'light'\n              ? this.transitionConfig!.containerStyleLight\n              : this.transitionConfig!.containerStyleDark,\n            this.transitionConfig!.containerStyle,\n          ]}\n        >\n          <StackGestureContext.Provider value={this.panGestureRef}>\n            <ScreenContainer style={styles.scenes}>\n              {scenes.map(this.renderCard)}\n            </ScreenContainer>\n            {floatingHeader}\n          </StackGestureContext.Provider>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { state: prevState } = prevProps.transitionProps.navigation;\n    const { state } = this.props.transitionProps.navigation;\n    if (prevState.index !== state.index) {\n      this.maybeCancelGesture();\n    }\n  }\n\n  private getGestureResponseDistance() {\n    const { scene } = this.props.transitionProps;\n    const { options } = scene.descriptor;\n    const {\n      gestureResponseDistance: userGestureResponseDistance = {} as {\n        vertical?: number;\n        horizontal?: number;\n      },\n    } = options;\n\n    // Doesn't make sense for a response distance of 0, so this works fine\n    return this.isModal()\n      ? userGestureResponseDistance.vertical ||\n          GESTURE_RESPONSE_DISTANCE_VERTICAL\n      : userGestureResponseDistance.horizontal ||\n          GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n  }\n\n  private gestureActivationCriteria() {\n    const { layout } = this.props.transitionProps;\n    const gestureResponseDistance = this.getGestureResponseDistance();\n    const isMotionInverted = this.isMotionInverted();\n\n    if (this.isMotionVertical()) {\n      // @ts-ignore\n      const height: number = layout.height.__getValue();\n\n      return {\n        maxDeltaX: 15,\n        minOffsetY: isMotionInverted ? -5 : 5,\n        hitSlop: isMotionInverted\n          ? { top: -height + gestureResponseDistance }\n          : { bottom: -height + gestureResponseDistance },\n      };\n    } else {\n      // @ts-ignore\n      const width: number = layout.width.__getValue();\n      const hitSlop = -width + gestureResponseDistance;\n\n      return {\n        minOffsetX: isMotionInverted ? -5 : 5,\n        maxDeltaY: 20,\n        hitSlop: isMotionInverted ? { left: hitSlop } : { right: hitSlop },\n      };\n    }\n  }\n\n  private isGestureEnabled() {\n    const gesturesEnabled = this.props.transitionProps.scene.descriptor.options\n      .gesturesEnabled;\n    return typeof gesturesEnabled === 'boolean'\n      ? gesturesEnabled\n      : Platform.OS === 'ios';\n  }\n\n  private isMotionVertical() {\n    return this.isModal();\n  }\n\n  private isModal() {\n    return this.props.mode === 'modal';\n  }\n\n  // This only currently applies to the horizontal gesture!\n  private isMotionInverted() {\n    const {\n      transitionProps: { scene },\n    } = this.props;\n    const { options } = scene.descriptor;\n    const { gestureDirection } = options;\n\n    if (this.isModal()) {\n      return gestureDirection === 'inverted';\n    } else {\n      return typeof gestureDirection === 'string'\n        ? gestureDirection === 'inverted'\n        : I18nManager.isRTL;\n    }\n  }\n\n  private computeHorizontalGestureValue({\n    translationX,\n  }: {\n    translationX: number;\n  }) {\n    const {\n      transitionProps: { navigation, layout },\n    } = this.props;\n\n    const { index } = navigation.state;\n\n    // TODO: remove this __getValue!\n    // @ts-ignore\n    const distance: number = layout.width.__getValue();\n\n    const x = this.isMotionInverted() ? -1 * translationX : translationX;\n\n    const value = index - x / distance;\n    return clamp(index - 1, value, index);\n  }\n\n  private computeVerticalGestureValue({\n    translationY,\n  }: {\n    translationY: number;\n  }) {\n    const {\n      transitionProps: { navigation, layout },\n    } = this.props;\n\n    const { index } = navigation.state;\n\n    // TODO: remove this __getValue!\n    // @ts-ignore\n    const distance: number = layout.height.__getValue();\n\n    const y = this.isMotionInverted() ? -1 * translationY : translationY;\n    const value = index - y / distance;\n    return clamp(index - 1, value, index);\n  }\n\n  private handlePanGestureStateChange = ({\n    nativeEvent,\n  }: PanGestureHandlerGestureEvent) => {\n    // @ts-ignore\n    if (nativeEvent.oldState === GestureState.ACTIVE) {\n      // Gesture was cancelled! For example, some navigation state update\n      // arrived while the gesture was active that cancelled it out\n      // @ts-ignore\n      if (this.positionSwitch.__getValue() === 1) {\n        return;\n      }\n\n      if (this.isMotionVertical()) {\n        this.handleReleaseVertical(nativeEvent);\n      } else {\n        this.handleReleaseHorizontal(nativeEvent);\n      }\n    } else if (nativeEvent.state === GestureState.ACTIVE) {\n      this.props.onGestureBegin && this.props.onGestureBegin();\n\n      // Switch to using gesture position\n      this.positionSwitch.setValue(0);\n\n      // By enabling the gesture switch and ignoring the position here we\n      // end up with a quick jump to the initial value and then back to the\n      // gesture. While this isn't ideal, it's preferred over preventing new\n      // gestures during the animation (all gestures should be interruptible)\n      // and we will properly fix it (interruptible and from the correct position)\n      // when we integrate reanimated. If you prefer to prevent gestures during\n      // transitions, then fork this library, comment the positionSwitch value set above,\n      // and uncomment the following two lines.\n      // if (!this.props.transitionProps.position._animation) {\n      //   this.positionSwitch.setValue(0);\n      // }\n    }\n  };\n\n  // note: this will not animated so nicely because the position is unaware\n  // of the gesturePosition, so if we are in the middle of swiping the screen away\n  // and back is programatically fired then we will reset to the initial position\n  // and animate from there\n  private maybeCancelGesture() {\n    this.positionSwitch.setValue(1);\n  }\n\n  private prepareGesture() {\n    if (!this.isGestureEnabled()) {\n      // @ts-ignore\n      if (this.positionSwitch.__getValue() !== 1) {\n        this.positionSwitch.setValue(1);\n      }\n      this.gesturePosition = undefined;\n      return;\n    }\n\n    // We can't run the gesture if width or height layout is unavailable\n    if (\n      // @ts-ignore\n      this.props.transitionProps.layout.width.__getValue() === 0 ||\n      // @ts-ignore\n      this.props.transitionProps.layout.height.__getValue() === 0\n    ) {\n      return;\n    }\n\n    if (this.isMotionVertical()) {\n      this.prepareGestureVertical();\n    } else {\n      this.prepareGestureHorizontal();\n    }\n  }\n\n  private prepareGestureHorizontal() {\n    const { index } = this.props.transitionProps.navigation.state;\n\n    if (this.isMotionInverted()) {\n      this.gesturePosition = Animated.add(\n        index,\n        Animated.divide(this.gestureX, this.props.transitionProps.layout.width)\n      ).interpolate({\n        inputRange: [index - 1, index],\n        outputRange: [index - 1, index],\n        extrapolate: 'clamp',\n      });\n    } else {\n      this.gesturePosition = Animated.add(\n        index,\n        Animated.multiply(\n          -1,\n          Animated.divide(\n            this.gestureX,\n            this.props.transitionProps.layout.width\n          )\n        )\n      ).interpolate({\n        inputRange: [index - 1, index],\n        outputRange: [index - 1, index],\n        extrapolate: 'clamp',\n      });\n    }\n  }\n\n  private prepareGestureVertical() {\n    const { index } = this.props.transitionProps.navigation.state;\n\n    if (this.isMotionInverted()) {\n      this.gesturePosition = Animated.add(\n        index,\n        Animated.divide(this.gestureY, this.props.transitionProps.layout.height)\n      ).interpolate({\n        inputRange: [index - 1, index],\n        outputRange: [index - 1, index],\n        extrapolate: 'clamp',\n      });\n    } else {\n      this.gesturePosition = Animated.add(\n        index,\n        Animated.multiply(\n          -1,\n          Animated.divide(\n            this.gestureY,\n            this.props.transitionProps.layout.height\n          )\n        )\n      ).interpolate({\n        inputRange: [index - 1, index],\n        outputRange: [index - 1, index],\n        extrapolate: 'clamp',\n      });\n    }\n  }\n\n  private handleReleaseHorizontal(\n    nativeEvent: GestureHandlerGestureEventNativeEvent &\n      PanGestureHandlerEventExtra\n  ) {\n    const {\n      transitionProps: { navigation, position, layout },\n    } = this.props;\n    const { index } = navigation.state;\n    const immediateIndex =\n      this.immediateIndex == null ? index : this.immediateIndex;\n\n    // Calculate animate duration according to gesture speed and moved distance\n    // @ts-ignore\n    const distance = layout.width.__getValue();\n    const movementDirection = this.isMotionInverted() ? -1 : 1;\n    const movedDistance = movementDirection * nativeEvent.translationX;\n    const gestureVelocity = movementDirection * nativeEvent.velocityX;\n    const defaultVelocity = distance / ANIMATION_DURATION;\n    const velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);\n    const resetDuration = this.isMotionInverted()\n      ? (distance - movedDistance) / velocity\n      : movedDistance / velocity;\n    const goBackDuration = this.isMotionInverted()\n      ? movedDistance / velocity\n      : (distance - movedDistance) / velocity;\n\n    // Get the current position value and reset to using the statically driven\n    // (rather than gesture driven) position.\n    const value = this.computeHorizontalGestureValue(nativeEvent);\n    position.setValue(value);\n    this.positionSwitch.setValue(1);\n\n    // If the speed of the gesture release is significant, use that as the indication\n    // of intent\n    if (gestureVelocity < -50) {\n      this.props.onGestureCanceled && this.props.onGestureCanceled();\n      this.reset(immediateIndex, resetDuration);\n      return;\n    }\n    if (gestureVelocity > 50) {\n      this.props.onGestureEnd && this.props.onGestureEnd();\n      this.goBack(immediateIndex, goBackDuration);\n      return;\n    }\n\n    // Then filter based on the distance the screen was moved. Over a third of the way swiped,\n    // and the back will happen.\n    if (value <= index - POSITION_THRESHOLD) {\n      this.props.onGestureEnd && this.props.onGestureEnd();\n      this.goBack(immediateIndex, goBackDuration);\n    } else {\n      this.props.onGestureCanceled && this.props.onGestureCanceled();\n      this.reset(immediateIndex, resetDuration);\n    }\n  }\n\n  private handleReleaseVertical(\n    nativeEvent: GestureHandlerGestureEventNativeEvent &\n      PanGestureHandlerEventExtra\n  ) {\n    const {\n      transitionProps: { navigation, position, layout },\n    } = this.props;\n    const { index } = navigation.state;\n    const immediateIndex =\n      this.immediateIndex == null ? index : this.immediateIndex;\n\n    // Calculate animate duration according to gesture speed and moved distance\n    // @ts-ignore\n    const distance = layout.height.__getValue();\n    const isMotionInverted = this.isMotionInverted();\n    const movementDirection = isMotionInverted ? -1 : 1;\n    const movedDistance = movementDirection * nativeEvent.translationY;\n    const gestureVelocity = movementDirection * nativeEvent.velocityY;\n    const defaultVelocity = distance / ANIMATION_DURATION;\n    const velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);\n    const resetDuration = isMotionInverted\n      ? (distance - movedDistance) / velocity\n      : movedDistance / velocity;\n    const goBackDuration = isMotionInverted\n      ? movedDistance / velocity\n      : (distance - movedDistance) / velocity;\n\n    const value = this.computeVerticalGestureValue(nativeEvent);\n    position.setValue(value);\n    this.positionSwitch.setValue(1);\n\n    // If the speed of the gesture release is significant, use that as the indication\n    // of intent\n    if (gestureVelocity < -50) {\n      this.props.onGestureCanceled && this.props.onGestureCanceled();\n      this.reset(immediateIndex, resetDuration);\n      return;\n    }\n    if (gestureVelocity > 50) {\n      this.props.onGestureEnd && this.props.onGestureEnd();\n      this.goBack(immediateIndex, goBackDuration);\n      return;\n    }\n\n    // Then filter based on the distance the screen was moved. Over a third of the way swiped,\n    // and the back will happen.\n    if (value <= index - POSITION_THRESHOLD) {\n      this.props.onGestureEnd && this.props.onGestureEnd();\n      this.goBack(immediateIndex, goBackDuration);\n    } else {\n      this.props.onGestureCanceled && this.props.onGestureCanceled();\n      this.reset(immediateIndex, resetDuration);\n    }\n  }\n\n  private getHeaderMode() {\n    if (this.props.headerMode) {\n      return this.props.headerMode;\n    }\n    if (Platform.OS === 'android' || this.props.mode === 'modal') {\n      return 'screen';\n    }\n    // On web, the float header mode will enable body scrolling and stick the header\n    // to the top of the URL bar when it shrinks and expands.\n    return 'float';\n  }\n\n  private getHeaderBackgroundTransitionPreset() {\n    const { headerBackgroundTransitionPreset } = this.props;\n    if (headerBackgroundTransitionPreset) {\n      if (\n        HEADER_BACKGROUND_TRANSITION_PRESET.includes(\n          headerBackgroundTransitionPreset\n        )\n      ) {\n        if (headerBackgroundTransitionPreset === 'fade') {\n          return HeaderStyleInterpolator.forBackgroundWithFade;\n        } else if (headerBackgroundTransitionPreset === 'translate') {\n          return HeaderStyleInterpolator.forBackgroundWithTranslation;\n        } else if (headerBackgroundTransitionPreset === 'toggle') {\n          return HeaderStyleInterpolator.forBackgroundWithInactiveHidden;\n        }\n      } else if (__DEV__) {\n        console.error(\n          `Invalid configuration applied for headerBackgroundTransitionPreset - expected one of ${HEADER_BACKGROUND_TRANSITION_PRESET.join(\n            ', '\n          )} but received ${JSON.stringify(headerBackgroundTransitionPreset)}`\n        );\n      }\n    }\n\n    return null;\n  }\n\n  private getHeaderLayoutPreset() {\n    const { headerLayoutPreset } = this.props;\n    if (headerLayoutPreset) {\n      if (__DEV__) {\n        if (\n          this.getHeaderTransitionPreset() === 'uikit' &&\n          headerLayoutPreset === 'left' &&\n          Platform.OS === 'ios'\n        ) {\n          console.warn(\n            `headerTransitionPreset with the value 'uikit' is incompatible with headerLayoutPreset 'left'`\n          );\n        }\n      }\n      if (HEADER_LAYOUT_PRESET.includes(headerLayoutPreset)) {\n        return headerLayoutPreset;\n      }\n\n      if (__DEV__) {\n        console.error(\n          `Invalid configuration applied for headerLayoutPreset - expected one of ${HEADER_LAYOUT_PRESET.join(\n            ', '\n          )} but received ${JSON.stringify(headerLayoutPreset)}`\n        );\n      }\n    }\n\n    if (Platform.OS !== 'ios') {\n      return 'left';\n    } else {\n      return 'center';\n    }\n  }\n\n  private getHeaderTransitionPreset() {\n    // On Android or with header mode screen, we always just use in-place,\n    // we ignore the option entirely (at least until we have other presets)\n    if (Platform.OS !== 'ios' || this.getHeaderMode() === 'screen') {\n      return 'fade-in-place';\n    }\n\n    const { headerTransitionPreset } = this.props;\n    if (headerTransitionPreset) {\n      if (HEADER_TRANSITION_PRESET.includes(headerTransitionPreset)) {\n        return headerTransitionPreset;\n      }\n\n      if (__DEV__) {\n        console.error(\n          `Invalid configuration applied for headerTransitionPreset - expected one of ${HEADER_TRANSITION_PRESET.join(\n            ', '\n          )} but received ${JSON.stringify(headerTransitionPreset)}`\n        );\n      }\n    }\n\n    return 'fade-in-place';\n  }\n\n  private getHeaderBackTitleVisible() {\n    const { headerBackTitleVisible } = this.props;\n    const layoutPreset = this.getHeaderLayoutPreset();\n\n    // Even when we align to center on Android, people should need to opt-in to\n    // showing the back title\n    const enabledByDefault = !(\n      layoutPreset === 'left' || Platform.OS !== 'ios'\n    );\n\n    return typeof headerBackTitleVisible === 'boolean'\n      ? headerBackTitleVisible\n      : enabledByDefault;\n  }\n\n  private renderInnerScene(scene: Scene) {\n    const { navigation, getComponent } = scene.descriptor;\n    const SceneComponent = getComponent();\n\n    const { screenProps } = this.props;\n    const headerMode = this.getHeaderMode();\n    if (headerMode === 'screen') {\n      return (\n        <View style={styles.container}>\n          <View style={styles.scenes}>\n            <SceneView\n              screenProps={screenProps}\n              navigation={navigation}\n              component={SceneComponent}\n            />\n          </View>\n          {this.renderHeader(scene, headerMode)}\n        </View>\n      );\n    }\n    return (\n      <SceneView\n        screenProps={screenProps}\n        navigation={navigation}\n        component={SceneComponent}\n      />\n    );\n  }\n\n  private prepareTransitionConfig() {\n    this.transitionConfig = TransitionConfigs.getTransitionConfig(\n      this.props.transitionConfig,\n      {\n        ...this.props.transitionProps,\n        position: this.position,\n      },\n      this.props.lastTransitionProps,\n      this.isModal()\n    );\n  }\n\n  private preparePosition() {\n    if (this.gesturePosition) {\n      // FIXME: this doesn't seem right, there is setValue called in some places\n      // @ts-ignore\n      this.position = Animated.add(\n        Animated.multiply(\n          this.props.transitionProps.position,\n          this.positionSwitch\n        ),\n        Animated.multiply(this.gesturePosition, this.gestureSwitch)\n      );\n    } else {\n      this.position = this.props.transitionProps.position;\n    }\n  }\n\n  private renderCard = (scene: Scene) => {\n    const {\n      transitionProps,\n      cardShadowEnabled,\n      cardOverlayEnabled,\n      transparentCard,\n      cardStyle,\n    } = this.props;\n\n    const { screenInterpolator } = this.transitionConfig as TransitionConfig;\n    const style =\n      screenInterpolator &&\n      screenInterpolator({\n        ...transitionProps,\n        shadowEnabled: cardShadowEnabled,\n        cardOverlayEnabled,\n        position: this.position,\n        scene,\n      });\n\n    // When using a floating header, we need to add some top\n    // padding on the scene.\n    const { options } = scene.descriptor;\n    const hasHeader = options.header !== null && options.headerShown !== false;\n    const headerMode = this.getHeaderMode();\n\n    let floatingContainerStyle: ViewStyle = StyleSheet.absoluteFill as ViewStyle;\n\n    if (hasHeader && headerMode === 'float' && !options.headerTransparent) {\n      floatingContainerStyle = {\n        ...Platform.select({\n          web: {} as ViewStyle,\n          default: StyleSheet.absoluteFillObject,\n        }),\n        paddingTop: this.state.floatingHeaderHeight,\n      };\n    }\n\n    return (\n      <Card\n        {...transitionProps}\n        key={`card_${scene.key}`}\n        position={this.position}\n        realPosition={transitionProps.position}\n        animatedStyle={style}\n        transparent={transparentCard}\n        style={[floatingContainerStyle, cardStyle]}\n        scene={scene}\n      >\n        {this.renderInnerScene(scene)}\n      </Card>\n    );\n  };\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    // Header is physically rendered after scenes so that Header won't be\n    // covered by the shadows of the scenes.\n    // That said, we'd have use `flexDirection: 'column-reverse'` to move\n    // Header above the scenes.\n    flexDirection: 'column-reverse',\n    overflow: 'hidden',\n  },\n  scenes: {\n    flex: 1,\n  },\n  floatingHeader: {\n    // @ts-ignore\n    position: Platform.select({ default: 'absolute', web: 'fixed' }),\n    left: 0,\n    top: 0,\n    right: 0,\n  },\n});\n\nexport default withOrientation(StackViewLayout);\n"]},"metadata":{},"sourceType":"module"}