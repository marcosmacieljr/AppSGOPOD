{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-stack/src/views/StackView/StackView.tsx\";\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { StackActions } from 'react-navigation';\nimport StackViewLayout from \"./StackViewLayout\";\nimport Transitioner from \"../Transitioner\";\nimport TransitionConfigs from \"./StackViewTransitionConfigs\";\nvar USE_NATIVE_DRIVER = Platform.OS === 'android' || Platform.OS === 'ios';\nvar DefaultNavigationConfig = {\n  mode: 'card',\n  cardShadowEnabled: true,\n  cardOverlayEnabled: false\n};\n\nvar StackView = function (_React$Component) {\n  _inherits(StackView, _React$Component);\n\n  function StackView() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StackView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StackView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.configureTransition = function (transitionProps, prevTransitionProps) {\n      return _objectSpread({\n        useNativeDriver: USE_NATIVE_DRIVER\n      }, TransitionConfigs.getTransitionConfig(_this.props.navigationConfig.transitionConfig, transitionProps, prevTransitionProps, _this.props.navigationConfig.mode === 'modal').transitionSpec);\n    };\n\n    _this.getShadowEnabled = function () {\n      var navigationConfig = _this.props.navigationConfig;\n      return navigationConfig && navigationConfig.hasOwnProperty('cardShadowEnabled') ? navigationConfig.cardShadowEnabled : DefaultNavigationConfig.cardShadowEnabled;\n    };\n\n    _this.getCardOverlayEnabled = function () {\n      var navigationConfig = _this.props.navigationConfig;\n      return navigationConfig && navigationConfig.hasOwnProperty('cardOverlayEnabled') ? navigationConfig.cardOverlayEnabled : DefaultNavigationConfig.cardOverlayEnabled;\n    };\n\n    _this.renderStackviewLayout = function (transitionProps, lastTransitionProps) {\n      var _this$props = _this.props,\n          screenProps = _this$props.screenProps,\n          navigationConfig = _this$props.navigationConfig;\n      return React.createElement(StackViewLayout, _extends({}, navigationConfig, {\n        cardShadowEnabled: _this.getShadowEnabled(),\n        cardOverlayEnabled: _this.getCardOverlayEnabled(),\n        onGestureBegin: _this.props.onGestureBegin,\n        onGestureCanceled: _this.props.onGestureCanceled,\n        onGestureEnd: _this.props.onGestureEnd,\n        screenProps: screenProps,\n        transitionProps: transitionProps,\n        lastTransitionProps: lastTransitionProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        }\n      }));\n    };\n\n    _this.handleTransitionEnd = function (transition, lastTransition) {\n      var _this$props2 = _this.props,\n          navigationConfig = _this$props2.navigationConfig,\n          navigation = _this$props2.navigation,\n          _this$props2$onTransi = _this$props2.onTransitionEnd,\n          onTransitionEnd = _this$props2$onTransi === void 0 ? navigationConfig.onTransitionEnd : _this$props2$onTransi;\n      var transitionDestKey = transition.scene.route.key;\n      var isCurrentKey = navigation.state.routes[navigation.state.index].key === transitionDestKey;\n\n      if (transition.navigation.state.isTransitioning && isCurrentKey) {\n        navigation.dispatch(StackActions.completeTransition({\n          key: navigation.state.key,\n          toChildKey: transitionDestKey\n        }));\n      }\n\n      onTransitionEnd && onTransitionEnd(transition, lastTransition);\n    };\n\n    return _this;\n  }\n\n  _createClass(StackView, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Transitioner, {\n        render: this.renderStackviewLayout,\n        configureTransition: this.configureTransition,\n        screenProps: this.props.screenProps,\n        navigation: this.props.navigation,\n        descriptors: this.props.descriptors,\n        onTransitionStart: this.props.onTransitionStart || this.props.navigationConfig.onTransitionStart,\n        onTransitionEnd: this.handleTransitionEnd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        }\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var navigation = this.props.navigation;\n\n      if (navigation.state.isTransitioning) {\n        navigation.dispatch(StackActions.completeTransition({\n          key: navigation.state.key\n        }));\n      }\n    }\n  }]);\n\n  return StackView;\n}(React.Component);\n\nexport default StackView;","map":{"version":3,"mappings":"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","names":["React","StackActions","StackViewLayout","Transitioner","TransitionConfigs","USE_NATIVE_DRIVER","Platform","OS","DefaultNavigationConfig","mode","cardShadowEnabled","cardOverlayEnabled","StackView","configureTransition","transitionProps","prevTransitionProps","useNativeDriver","getTransitionConfig","_this","props","navigationConfig","transitionConfig","transitionSpec","getShadowEnabled","hasOwnProperty","getCardOverlayEnabled","renderStackviewLayout","lastTransitionProps","screenProps","onGestureBegin","onGestureCanceled","onGestureEnd","__source","fileName","lineNumber","handleTransitionEnd","transition","lastTransition","navigation","onTransitionEnd","transitionDestKey","scene","route","key","isCurrentKey","state","routes","index","isTransitioning","dispatch","completeTransition","toChildKey","render","descriptors","onTransitionStart","Component"],"sources":["StackView.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Platform } from 'react-native';\nimport { StackActions } from 'react-navigation';\nimport StackViewLayout from './StackViewLayout';\nimport Transitioner from '../Transitioner';\nimport TransitionConfigs from './StackViewTransitionConfigs';\nimport {\n  NavigationStackProp,\n  SceneDescriptorMap,\n  NavigationStackConfig,\n  TransitionProps,\n  Scene,\n} from '../../types';\n\ntype Props = {\n  navigation: NavigationStackProp;\n  descriptors: SceneDescriptorMap;\n  navigationConfig: NavigationStackConfig;\n  onTransitionStart?: () => void;\n  onGestureBegin?: () => void;\n  onGestureCanceled?: () => void;\n  onGestureEnd?: () => void;\n  screenProps?: unknown;\n};\n\nconst USE_NATIVE_DRIVER = Platform.OS === 'android' || Platform.OS === 'ios';\n\n// NOTE(brentvatne): this was previously in defaultProps, but that is deceiving\n// because the entire object will be clobbered by navigationConfig that is\n// passed in.\nconst DefaultNavigationConfig = {\n  mode: 'card' as const,\n  cardShadowEnabled: true,\n  cardOverlayEnabled: false,\n};\n\nclass StackView extends React.Component<Props> {\n  render() {\n    return (\n      <Transitioner\n        render={this.renderStackviewLayout}\n        configureTransition={this.configureTransition}\n        screenProps={this.props.screenProps}\n        navigation={this.props.navigation}\n        descriptors={this.props.descriptors}\n        onTransitionStart={\n          this.props.onTransitionStart ||\n          this.props.navigationConfig.onTransitionStart\n        }\n        onTransitionEnd={this.handleTransitionEnd}\n      />\n    );\n  }\n\n  componentDidMount() {\n    const { navigation } = this.props;\n    if (navigation.state.isTransitioning) {\n      navigation.dispatch(\n        StackActions.completeTransition({\n          key: navigation.state.key,\n        })\n      );\n    }\n  }\n\n  private configureTransition = (\n    transitionProps: TransitionProps,\n    prevTransitionProps?: TransitionProps\n  ) => {\n    return {\n      useNativeDriver: USE_NATIVE_DRIVER,\n      ...TransitionConfigs.getTransitionConfig(\n        this.props.navigationConfig.transitionConfig,\n        transitionProps,\n        prevTransitionProps,\n        this.props.navigationConfig.mode === 'modal'\n      ).transitionSpec,\n    };\n  };\n\n  private getShadowEnabled = () => {\n    const { navigationConfig } = this.props;\n    return navigationConfig &&\n      navigationConfig.hasOwnProperty('cardShadowEnabled')\n      ? navigationConfig.cardShadowEnabled\n      : DefaultNavigationConfig.cardShadowEnabled;\n  };\n\n  private getCardOverlayEnabled = () => {\n    const { navigationConfig } = this.props;\n    return navigationConfig &&\n      navigationConfig.hasOwnProperty('cardOverlayEnabled')\n      ? navigationConfig.cardOverlayEnabled\n      : DefaultNavigationConfig.cardOverlayEnabled;\n  };\n\n  private renderStackviewLayout = (\n    transitionProps: TransitionProps,\n    lastTransitionProps?: TransitionProps\n  ) => {\n    const { screenProps, navigationConfig } = this.props;\n    return (\n      <StackViewLayout\n        {...navigationConfig}\n        cardShadowEnabled={this.getShadowEnabled()}\n        cardOverlayEnabled={this.getCardOverlayEnabled()}\n        onGestureBegin={this.props.onGestureBegin}\n        onGestureCanceled={this.props.onGestureCanceled}\n        onGestureEnd={this.props.onGestureEnd}\n        screenProps={screenProps}\n        transitionProps={transitionProps}\n        lastTransitionProps={lastTransitionProps}\n      />\n    );\n  };\n\n  private handleTransitionEnd = (\n    transition: { scene: Scene; navigation: NavigationStackProp },\n    lastTransition?: { scene: Scene; navigation: NavigationStackProp }\n  ) => {\n    const {\n      navigationConfig,\n      navigation,\n      // @ts-ignore\n      onTransitionEnd = navigationConfig.onTransitionEnd,\n    } = this.props;\n    const transitionDestKey = transition.scene.route.key;\n    const isCurrentKey =\n      navigation.state.routes[navigation.state.index].key === transitionDestKey;\n    if (transition.navigation.state.isTransitioning && isCurrentKey) {\n      navigation.dispatch(\n        StackActions.completeTransition({\n          key: navigation.state.key,\n          toChildKey: transitionDestKey,\n        })\n      );\n    }\n    onTransitionEnd && onTransitionEnd(transition, lastTransition);\n  };\n}\n\nexport default StackView;\n"]},"metadata":{},"sourceType":"module"}