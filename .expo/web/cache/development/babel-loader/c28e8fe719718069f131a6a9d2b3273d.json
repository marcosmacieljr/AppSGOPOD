{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-stack/src/views/Header/HeaderBackButton.tsx\";\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { ThemeContext, ThemeColors } from 'react-navigation';\nimport TouchableItem from \"../TouchableItem\";\nimport defaultBackImage from \"../assets/back-icon.png\";\nimport BackButtonWeb from \"./BackButtonWeb\";\n\nvar HeaderBackButton = function (_React$PureComponent) {\n  _inherits(HeaderBackButton, _React$PureComponent);\n\n  function HeaderBackButton() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, HeaderBackButton);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HeaderBackButton)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {};\n\n    _this.handleTextLayout = function (e) {\n      if (_this.state.initialTextWidth) {\n        return;\n      }\n\n      _this.setState({\n        initialTextWidth: e.nativeEvent.layout.x + e.nativeEvent.layout.width\n      });\n    };\n\n    _this.getTitleText = function () {\n      var _this$props = _this.props,\n          width = _this$props.width,\n          title = _this$props.title,\n          truncatedTitle = _this$props.truncatedTitle;\n      var initialTextWidth = _this.state.initialTextWidth;\n\n      if (title === null) {\n        return null;\n      } else if (!title) {\n        return truncatedTitle;\n      } else if (initialTextWidth && width && initialTextWidth > width) {\n        return truncatedTitle;\n      } else {\n        return title;\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(HeaderBackButton, [{\n    key: \"renderBackImage\",\n    value: function renderBackImage() {\n      var _this$props2 = this.props,\n          backImage = _this$props2.backImage,\n          backTitleVisible = _this$props2.backTitleVisible;\n      var tintColor = this.props.tintColor;\n\n      if (!tintColor && Platform.OS === 'android') {\n        tintColor = ThemeColors[this.context].label;\n      }\n\n      var title = this.getTitleText();\n\n      if (React.isValidElement(backImage)) {\n        return backImage;\n      } else if (backImage) {\n        return backImage({\n          tintColor: tintColor,\n          title: title\n        });\n      } else {\n        return React.createElement(Image, {\n          style: [styles.icon, !!backTitleVisible && styles.iconWithTitle, !!tintColor && {\n            tintColor: tintColor\n          }],\n          source: defaultBackImage,\n          fadeDuration: 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          }\n        });\n      }\n    }\n  }, {\n    key: \"maybeRenderTitle\",\n    value: function maybeRenderTitle() {\n      var _this$props3 = this.props,\n          allowFontScaling = _this$props3.allowFontScaling,\n          backTitleVisible = _this$props3.backTitleVisible,\n          titleStyle = _this$props3.titleStyle,\n          tintColor = _this$props3.tintColor;\n      var backTitleText = this.getTitleText();\n\n      if (!backTitleVisible || backTitleText === null) {\n        return null;\n      }\n\n      return React.createElement(Text, {\n        accessible: false,\n        onLayout: this.handleTextLayout,\n        style: [styles.title, !!tintColor && {\n          color: tintColor\n        }, titleStyle],\n        numberOfLines: 1,\n        allowFontScaling: !!allowFontScaling,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        }\n      }, this.getTitleText());\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          onPress = _this$props4.onPress,\n          pressColorAndroid = _this$props4.pressColorAndroid,\n          title = _this$props4.title,\n          disabled = _this$props4.disabled;\n      var button = React.createElement(TouchableItem, {\n        disabled: disabled,\n        accessible: true,\n        accessibilityRole: \"button\",\n        accessibilityComponentType: \"button\",\n        accessibilityLabel: title ? title + \", back\" : 'Go back',\n        accessibilityTraits: \"button\",\n        testID: \"header-back\",\n        delayPressIn: 0,\n        onPress: disabled ? undefined : onPress,\n        pressColor: pressColorAndroid,\n        style: [styles.container, disabled && styles.disabled],\n        borderless: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        }\n      }, React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        }\n      }, this.renderBackImage(), this.maybeRenderTitle()));\n\n      if (Platform.OS === 'ios') {\n        return button;\n      } else {\n        return React.createElement(View, {\n          style: styles.androidButtonWrapper,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154\n          }\n        }, button);\n      }\n    }\n  }]);\n\n  return HeaderBackButton;\n}(React.PureComponent);\n\nHeaderBackButton.defaultProps = {\n  pressColorAndroid: 'rgba(0, 0, 0, .32)',\n  tintColor: Platform.select({\n    ios: '#037aff',\n    web: '#5f6368'\n  }),\n  truncatedTitle: 'Back',\n  backImage: Platform.select({\n    web: BackButtonWeb\n  })\n};\nHeaderBackButton.contextType = ThemeContext;\nvar styles = StyleSheet.create({\n  disabled: {\n    opacity: 0.5\n  },\n  androidButtonWrapper: _objectSpread({\n    margin: 13,\n    backgroundColor: 'transparent'\n  }, Platform.select({\n    web: {\n      marginLeft: 21\n    },\n    default: {}\n  })),\n  container: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    backgroundColor: 'transparent'\n  },\n  title: {\n    fontSize: 17,\n    paddingRight: 10\n  },\n  icon: Platform.select({\n    ios: {\n      backgroundColor: 'transparent',\n      height: 21,\n      width: 13,\n      marginLeft: 9,\n      marginRight: 22,\n      marginVertical: 12,\n      resizeMode: 'contain',\n      transform: [{\n        scaleX: I18nManager.isRTL ? -1 : 1\n      }]\n    },\n    default: {\n      height: 24,\n      width: 24,\n      margin: 3,\n      resizeMode: 'contain',\n      backgroundColor: 'transparent',\n      transform: [{\n        scaleX: I18nManager.isRTL ? -1 : 1\n      }]\n    }\n  }),\n  iconWithTitle: Platform.OS === 'ios' ? {\n    marginRight: 6\n  } : {}\n});\nexport default HeaderBackButton;","map":{"version":3,"mappings":"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","names":["React","ThemeContext","ThemeColors","TouchableItem","defaultBackImage","BackButtonWeb","HeaderBackButton","state","handleTextLayout","e","_this","initialTextWidth","setState","nativeEvent","layout","x","width","getTitleText","props","title","truncatedTitle","backImage","backTitleVisible","tintColor","Platform","OS","context","label","isValidElement","Image","style","styles","icon","iconWithTitle","source","fadeDuration","__source","fileName","lineNumber","allowFontScaling","titleStyle","backTitleText","Text","accessible","onLayout","color","numberOfLines","onPress","pressColorAndroid","disabled","button","accessibilityRole","accessibilityComponentType","accessibilityLabel","accessibilityTraits","testID","delayPressIn","undefined","pressColor","container","borderless","View","renderBackImage","maybeRenderTitle","androidButtonWrapper","PureComponent","defaultProps","select","ios","web","contextType","StyleSheet","create","opacity","margin","backgroundColor","marginLeft","default","alignItems","flexDirection","fontSize","paddingRight","height","marginRight","marginVertical","resizeMode","transform","scaleX","I18nManager","isRTL"],"sources":["HeaderBackButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  I18nManager,\n  Image,\n  Text,\n  View,\n  Platform,\n  StyleSheet,\n  LayoutChangeEvent,\n} from 'react-native';\nimport { ThemeContext, ThemeColors } from 'react-navigation';\n\nimport TouchableItem from '../TouchableItem';\n\nimport defaultBackImage from '../assets/back-icon.png';\nimport BackButtonWeb from './BackButtonWeb';\nimport { HeaderBackButtonProps } from '../../types';\n\ntype Props = Omit<HeaderBackButtonProps, 'layoutPreset' | 'scene'>;\n\ntype State = {\n  initialTextWidth?: number;\n};\n\nclass HeaderBackButton extends React.PureComponent<Props, State> {\n  static defaultProps = {\n    pressColorAndroid: 'rgba(0, 0, 0, .32)',\n    tintColor: Platform.select({\n      ios: '#037aff',\n      web: '#5f6368',\n    }),\n    truncatedTitle: 'Back',\n    backImage: Platform.select({\n      web: BackButtonWeb,\n    }),\n  };\n\n  static contextType = ThemeContext;\n  context!: React.ContextType<typeof ThemeContext>;\n\n  state: State = {};\n\n  private handleTextLayout = (e: LayoutChangeEvent) => {\n    if (this.state.initialTextWidth) {\n      return;\n    }\n    this.setState({\n      initialTextWidth: e.nativeEvent.layout.x + e.nativeEvent.layout.width,\n    });\n  };\n\n  private renderBackImage() {\n    const { backImage, backTitleVisible } = this.props;\n\n    let { tintColor } = this.props;\n    if (!tintColor && Platform.OS === 'android') {\n      tintColor = ThemeColors[this.context].label;\n    }\n\n    let title = this.getTitleText();\n\n    if (React.isValidElement(backImage)) {\n      return backImage;\n    } else if (backImage) {\n      return backImage({\n        tintColor,\n        title,\n      });\n    } else {\n      return (\n        <Image\n          style={[\n            styles.icon,\n            !!backTitleVisible && styles.iconWithTitle,\n            !!tintColor && { tintColor },\n          ]}\n          source={defaultBackImage}\n          fadeDuration={0}\n        />\n      );\n    }\n  }\n\n  private getTitleText = () => {\n    const { width, title, truncatedTitle } = this.props;\n\n    let { initialTextWidth } = this.state;\n\n    if (title === null) {\n      return null;\n    } else if (!title) {\n      return truncatedTitle;\n    } else if (initialTextWidth && width && initialTextWidth > width) {\n      return truncatedTitle;\n    } else {\n      return title;\n    }\n  };\n\n  private maybeRenderTitle() {\n    const {\n      allowFontScaling,\n      backTitleVisible,\n      titleStyle,\n      tintColor,\n    } = this.props;\n    let backTitleText = this.getTitleText();\n\n    if (!backTitleVisible || backTitleText === null) {\n      return null;\n    }\n\n    return (\n      <Text\n        accessible={false}\n        onLayout={this.handleTextLayout}\n        style={[styles.title, !!tintColor && { color: tintColor }, titleStyle]}\n        numberOfLines={1}\n        allowFontScaling={!!allowFontScaling}\n      >\n        {this.getTitleText()}\n      </Text>\n    );\n  }\n\n  render() {\n    const { onPress, pressColorAndroid, title, disabled } = this.props;\n\n    let button = (\n      <TouchableItem\n        disabled={disabled}\n        accessible\n        accessibilityRole=\"button\"\n        accessibilityComponentType=\"button\"\n        accessibilityLabel={title ? `${title}, back` : 'Go back'}\n        accessibilityTraits=\"button\"\n        testID=\"header-back\"\n        delayPressIn={0}\n        onPress={disabled ? undefined : onPress}\n        pressColor={pressColorAndroid}\n        style={[styles.container, disabled && styles.disabled]}\n        borderless\n      >\n        <View style={styles.container}>\n          {this.renderBackImage()}\n          {this.maybeRenderTitle()}\n        </View>\n      </TouchableItem>\n    );\n\n    if (Platform.OS === 'ios') {\n      return button;\n    } else {\n      return <View style={styles.androidButtonWrapper}>{button}</View>;\n    }\n  }\n}\n\nconst styles = StyleSheet.create({\n  disabled: {\n    opacity: 0.5,\n  },\n  androidButtonWrapper: {\n    margin: 13,\n    backgroundColor: 'transparent',\n    ...Platform.select({\n      web: {\n        marginLeft: 21,\n      },\n      default: {},\n    }),\n  },\n  container: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    backgroundColor: 'transparent',\n  },\n  title: {\n    fontSize: 17,\n    paddingRight: 10,\n  },\n  icon: Platform.select({\n    ios: {\n      backgroundColor: 'transparent',\n      height: 21,\n      width: 13,\n      marginLeft: 9,\n      marginRight: 22,\n      marginVertical: 12,\n      resizeMode: 'contain',\n      transform: [{ scaleX: I18nManager.isRTL ? -1 : 1 }],\n    },\n    default: {\n      height: 24,\n      width: 24,\n      margin: 3,\n      resizeMode: 'contain',\n      backgroundColor: 'transparent',\n      transform: [{ scaleX: I18nManager.isRTL ? -1 : 1 }],\n    },\n  }),\n  iconWithTitle:\n    Platform.OS === 'ios'\n      ? {\n          marginRight: 6,\n        }\n      : {},\n});\n\nexport default HeaderBackButton;\n"]},"metadata":{},"sourceType":"module"}