{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as SQLite from 'expo-sqlite';\nvar db = SQLite.openDatabase('db.db');\nexport var executeQuery = function executeQuery(sql) {\n  var params,\n      _args = arguments;\n  return _regeneratorRuntime.async(function executeQuery$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          params = _args.length > 1 && _args[1] !== undefined ? _args[1] : [];\n          return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n            return db.transaction(function (tx) {\n              tx.executeSql(sql, params, function (_, _ref) {\n                var rows = _ref.rows;\n                return resolve(rows._array);\n              }, reject);\n            });\n          }));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var startApp = function startApp() {\n  return _regeneratorRuntime.async(function startApp$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(executeQuery('CREATE TABLE IF NOT EXISTS Users (userId, userCd);'));\n\n        case 2:\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(executeQuery('CREATE TABLE IF NOT EXISTS Forms (id integer primary key not null, stringJSON, route);'));\n\n        case 4:\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(executeQuery('CREATE TABLE IF NOT EXISTS FormUsers (id, name);'));\n\n        case 6:\n          _context2.next = 8;\n          return _regeneratorRuntime.awrap(executeQuery('CREATE TABLE IF NOT EXISTS Weather (id integer, name);'));\n\n        case 8:\n          _context2.next = 10;\n          return _regeneratorRuntime.awrap(executeQuery('CREATE TABLE IF NOT EXISTS RestrictionReason (id integer, desc);'));\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["C:/Repositorio/SgoApp/APP/db/sqliteConnection.js"],"names":["SQLite","db","openDatabase","executeQuery","sql","params","Promise","resolve","reject","transaction","tx","executeSql","_","rows","_array","startApp"],"mappings":";AAAA,OAAO,KAAKA,MAAZ,MAAwB,aAAxB;AAEA,IAAMC,EAAE,GAAGD,MAAM,CAACE,YAAP,CAAoB,OAApB,CAAX;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAYC,UAAAA,MAAZ,2DAAqB,EAArB;AAAA,2CACpB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA,mBAAqBP,EAAE,CAACQ,WAAH,CAAe,UAAAC,EAAE,EAAI;AAC5DA,cAAAA,EAAE,CAACC,UAAH,CAAcP,GAAd,EAAmBC,MAAnB,EAA2B,UAACO,CAAD;AAAA,oBAAMC,IAAN,QAAMA,IAAN;AAAA,uBAAiBN,OAAO,CAACM,IAAI,CAACC,MAAN,CAAxB;AAAA,eAA3B,EAAkEN,MAAlE;AACA,aAFuC,CAArB;AAAA,WAAZ,CADoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;AAMP,OAAO,IAAMO,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAQjBZ,YAAY,CAAC,oDAAD,CARK;;AAAA;AAAA;AAAA,2CASjBA,YAAY,CAAC,wFAAD,CATK;;AAAA;AAAA;AAAA,2CAUjBA,YAAY,CAAC,kDAAD,CAVK;;AAAA;AAAA;AAAA,2CAWjBA,YAAY,CAAC,wDAAD,CAXK;;AAAA;AAAA;AAAA,2CAYjBA,YAAY,CAAC,kEAAD,CAZK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB","sourcesContent":["import * as SQLite from 'expo-sqlite';\r\n\r\nconst db = SQLite.openDatabase('db.db');\r\nexport const executeQuery = async (sql, params = []) => {\r\n\treturn new Promise((resolve, reject) => db.transaction(tx => {\r\n\t\ttx.executeSql(sql, params, (_, { rows }) => resolve(rows._array), reject)\r\n\t}))\r\n};\r\n\r\nexport const startApp = async () => {\r\n\t\r\n\t// DESCOMENTAR para quando quiser apagar as tabelas para recriar novamente\r\n\t// SE FOR NECESSÁRIO atualizar o expo não deixar comentada pois é um dos motivos para novos erros\r\n\t\r\n\t//await executeQuery('DROP TABLE Forms;'); \r\n\t//await executeQuery('DROP TABLE Users;'); \r\n\t\r\n\tawait executeQuery('CREATE TABLE IF NOT EXISTS Users (userId, userCd);');\r\n\tawait executeQuery('CREATE TABLE IF NOT EXISTS Forms (id integer primary key not null, stringJSON, route);');\r\n\tawait executeQuery('CREATE TABLE IF NOT EXISTS FormUsers (id, name);');\r\n\tawait executeQuery('CREATE TABLE IF NOT EXISTS Weather (id integer, name);');\r\n\tawait executeQuery('CREATE TABLE IF NOT EXISTS RestrictionReason (id integer, desc);');\r\n}"]},"metadata":{},"sourceType":"module"}